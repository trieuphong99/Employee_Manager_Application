upstream bunbuimp {
  #server unix:///var/run/imp.sock;
  server app:3000;
}

server {
  listen 80;
  #listen 443 ssl http2 default_server;
  #listen	[::]:443 ssl http2 default_server;
  #ssl on;
  #ssl_certificate "/etc/pki/nginx/server.crt";
  #ssl_certificate_key "/etc/pki/nginx/private/server.key";
  server_name bunbuimp.com; # change to match your URL
  root /var/www/imp/public; # I assume your app is located at this location

  #ssl_session_cache shared:SSL:1m;
  #ssl_session_timeout  10m;
  #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  #ssl_ciphers HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP;
  #ssl_prefer_server_ciphers on;

  location / {
    proxy_pass http://bunbuimp; # match the name of upstream directive which is defined above
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    #proxy_set_header  X-Forwarded-Ssl on; # Optional
    proxy_set_header  X-Forwarded-Port $server_port;
    proxy_set_header  X-Forwarded-Host $host;
  }
  location ~* ^/assets/ {
    # Per RFC2616 - 1 year maximum expiry
    expires 1y;
    add_header Cache-Control public;

    # Some browsers still send conditional-GET requests if there's a
    # Last-Modified header or an ETag header even if they haven't
    # reached the expiry date sent in the Expires header.
    add_header Last-Modified "";
    add_header ETag "";
    break;
  }

 location /cable {
    proxy_pass http://bunbuimp;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto https;
    proxy_redirect off;
  }

}
