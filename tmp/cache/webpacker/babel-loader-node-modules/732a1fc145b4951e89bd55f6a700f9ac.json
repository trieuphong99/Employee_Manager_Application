{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/phong/rails/imp/app/javascript/staff/components/checkIn/index.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport './checkIn.css';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/checkInCheckOut';\nimport * as timeSheetActions from '../../actions/timeSheet';\nimport moment from 'moment';\nimport RealTime from 'react-live-clock';\nimport Clock from 'react-clock';\nimport Time from '../../../commons/const/Time';\nimport { getInfoCurrentUser as _getInfoCurrentUser } from '../../actions/account';\nimport { history } from \"../../../commons/helpers/history/history\";\nimport { toastError } from '../../../commons/helpers/toastHelpers';\nimport ModalReason from './modalReason';\n\nvar CheckIn = function CheckIn(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalReason = _useState2[0],\n      setModalReason = _useState2[1];\n\n  var letCheckIn = function letCheckIn() {\n    var checkCheckedIn = props.timeSheet.data[0];\n\n    if (checkCheckedIn) {\n      toastError(\"You have checked in before that!\");\n    } else {\n      if (moment().isAfter(moment(Time.startWork, Time.HM))) {\n        setModalReason(!modalReason);\n      } else {\n        props.checkIn();\n        history.push('/timesheets');\n      }\n    }\n  };\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeClock = _useState4[0],\n      setTimeClock = _useState4[1];\n\n  useEffect(function () {\n    _getInfoCurrentUser();\n\n    setInterval(function () {\n      return setTimeClock(new Date());\n    }, 1000);\n    props.getStaffTimeSheet({\n      startTime: moment().format(Time.DMY),\n      endTime: moment().format(Time.DMY)\n    }); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"check-in\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"total-content-check-in\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-check-in\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Check in\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date-check-in\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Clock, {\n    value: timeClock,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(RealTime, {\n    format: Time.FullDayFirst,\n    ticking: true,\n    timezone: Time.timeZone,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-checkin\",\n    onClick: letCheckIn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Start\")), modalReason && /*#__PURE__*/React.createElement(ModalReason, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    timeSheet: state.timeSheet\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    checkIn: function checkIn(reason) {\n      dispatch(actions.checkIn({\n        reason: reason\n      }));\n    },\n    getStaffTimeSheet: function getStaffTimeSheet(startTime, endTime) {\n      dispatch(timeSheetActions.getStaffTimeSheet(startTime, endTime));\n    },\n    getInfoCurrentUser: function getInfoCurrentUser() {\n      return dispatch(_getInfoCurrentUser());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckIn);","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/staff/components/checkIn/index.js"],"names":["React","useState","useEffect","connect","actions","timeSheetActions","moment","RealTime","Clock","Time","getInfoCurrentUser","history","toastError","ModalReason","CheckIn","props","modalReason","setModalReason","letCheckIn","checkCheckedIn","timeSheet","data","isAfter","startWork","HM","checkIn","push","Date","timeClock","setTimeClock","setInterval","getStaffTimeSheet","startTime","format","DMY","endTime","FullDayFirst","timeZone","mapStateToProps","state","mapDispatchToProps","dispatch","reason"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './checkIn.css';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/checkInCheckOut';\nimport * as timeSheetActions from '../../actions/timeSheet';\nimport moment from 'moment'\nimport RealTime from 'react-live-clock';\nimport Clock from 'react-clock';\nimport Time from '../../../commons/const/Time';\nimport { getInfoCurrentUser } from '../../actions/account'\n\nimport { history } from \"../../../commons/helpers/history/history\"\nimport { toastError } from '../../../commons/helpers/toastHelpers';\nimport ModalReason from './modalReason';\n\nconst CheckIn = props => {\n\n  const [modalReason, setModalReason] = useState(false);\n  const letCheckIn = () => {\n    let checkCheckedIn = props.timeSheet.data[0];\n    if (checkCheckedIn) {\n      toastError(\"You have checked in before that!\")\n    }\n    else {\n      if (moment().isAfter(moment(Time.startWork, Time.HM))) {\n        setModalReason(!modalReason);\n      }\n      else {\n        props.checkIn();\n        history.push('/timesheets')\n      }\n    }\n\n  }\n\n  const [timeClock, setTimeClock] = useState(new Date());\n  useEffect(() => {\n    getInfoCurrentUser()\n    setInterval(\n      () => setTimeClock(new Date()),\n      1000\n    );\n    props.getStaffTimeSheet({\n      startTime: moment().format(Time.DMY),\n      endTime: moment().format(Time.DMY)\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"check-in\">\n      <div className='total-content-check-in'>\n        <div className='title-check-in'>Check in</div>\n        <div className='date-check-in'>\n          <Clock value={timeClock} />\n          <RealTime format={Time.FullDayFirst} ticking={true} timezone={Time.timeZone} />\n        </div>\n        <button className=\"btn btn-checkin\" onClick={letCheckIn}>Start</button>\n      </div>\n      {\n        modalReason && <ModalReason />\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    timeSheet: state.timeSheet,\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    checkIn: (reason) => { dispatch(actions.checkIn({ reason: reason })) },\n    getStaffTimeSheet: (startTime, endTime) => { dispatch(timeSheetActions.getStaffTimeSheet(startTime, endTime)) },\n    getInfoCurrentUser: () => dispatch(getInfoCurrentUser())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckIn);\n"]},"metadata":{},"sourceType":"module"}