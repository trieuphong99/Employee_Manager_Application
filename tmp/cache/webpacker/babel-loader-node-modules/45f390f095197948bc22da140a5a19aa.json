{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as Yup from 'yup';\nimport moment from 'moment';\nvar commonValidationSchema = {\n  email: Yup.string().trim().email(\"Email must be a valid email\").required(\"Email is a required field\"),\n  id_card: Yup.string().trim().min(9, \"Id card must be at least 9 characters\").max(12, \"Id card must be at most 12 characters\").matches(/^[0-9][^#&<>\\~;$^%{}?a-zA-Z]{8,11}$/, \"Id card cannot contain special characters\").required(\"Id card is a required field\"),\n  joining_date: Yup.string().test(\"joining_date\", \"Joining date must greater than or equal to current date\", function (value) {\n    return moment().diff(moment(value), 'day') <= 0;\n  }).required(\"Joining date is a required field\"),\n  official_date: Yup.date().when('joining_date', function (joining_date, schema) {\n    return joining_date && schema.min(joining_date, \"Official date must be after joining date\");\n  }).nullable(true),\n  contract_type: Yup.string().nullable(true).required(\"Contract type is a required field\"),\n  position: Yup.string().required(\"Position is a required field\"),\n  status: Yup.string().required(\"Status is a required field\"),\n  roles: Yup.string().required(\"Roles is a required field\"),\n  name: Yup.string().trim().min(4, \"Name must be at least 4 characters\").max(30, \"Name must be at most 30 characters\").required(\"Name is a required field\"),\n  phone_number: Yup.string().trim().min(10, \"Phone number must be at least 10 characters\").max(11, \"Phone number must be at most 11 characters\").matches(/^[0-9][^#&<>\\~;$^%{}?a-zA-Z]{9,10}$/, \"Phone number cannot contain special characters\").required(\"Phone number is a required field\"),\n  address: Yup.string().trim().max(100, \"Address must be at most 100 characters\").required(\"Address is a required field\"),\n  sex: Yup.string().required(\"Gender is a required field\"),\n  date_of_birth: Yup.string().test(\"date_of_birth\", \"Date of birth must less than current date\", function (value) {\n    return moment().diff(moment(value), 'day') > 0;\n  }).required(\"Date of birth is a required field\")\n};\nexport var validationSchema = function validationSchema(item) {\n  var specifiedValidationSchema = item ? {\n    code: Yup.string().matches(/^B[0-9]{6}$/, \"Starts with letter B and ends with 6 digits\").required(\"Code is a required field\"),\n    joining_date: Yup.string().required(\"Joining date is a required field\")\n  } : {\n    password: Yup.string().matches(/^[a-zA-Z0-9]{6,15}$/, \"Password cannot contain special characters\").min(6, \"Password must be at least 6 characters\").max(15, \"Password must be at most 15 characters\").required(\"Password is a required field\")\n  };\n  return Yup.object().shape(_objectSpread(_objectSpread({}, commonValidationSchema), specifiedValidationSchema));\n};\nexport var initialValues = function initialValues(item) {\n  return item ? _objectSpread(_objectSpread({}, item), {}, {\n    status: item.status ? \"Active\" : \"Deactive\",\n    roles: item.roles[0].name,\n    name: item.profile.name,\n    phone_number: item.profile.phone_number,\n    address: item.profile.address,\n    sex: item.profile.sex,\n    date_of_birth: item.profile.date_of_birth\n  }) : {\n    email: '',\n    id_card: '',\n    joining_date: '',\n    contract_type: '',\n    position: '',\n    status: '',\n    roles: '',\n    name: '',\n    phone_number: '',\n    address: '',\n    sex: '',\n    date_of_birth: '',\n    password: ''\n  };\n};","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/admin/components/accounts/accountForm/validate.js"],"names":["Yup","moment","commonValidationSchema","email","string","trim","required","id_card","min","max","matches","joining_date","test","value","diff","official_date","date","when","schema","nullable","contract_type","position","status","roles","name","phone_number","address","sex","date_of_birth","validationSchema","item","specifiedValidationSchema","code","password","object","shape","initialValues","profile"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport moment from 'moment';\n\nconst commonValidationSchema = {\n  email:\n    Yup.string()\n      .trim()\n      .email(\"Email must be a valid email\")\n      .required(\"Email is a required field\"),\n  id_card:\n    Yup.string()\n      .trim()\n      .min(9, \"Id card must be at least 9 characters\")\n      .max(12, \"Id card must be at most 12 characters\")\n      .matches(/^[0-9][^#&<>\\~;$^%{}?a-zA-Z]{8,11}$/, \"Id card cannot contain special characters\")\n      .required(\"Id card is a required field\"),\n  joining_date:\n    Yup.string()\n      .test(\n        \"joining_date\",\n        \"Joining date must greater than or equal to current date\",\n        value => {\n          return moment().diff(moment(value), 'day') <= 0;\n        }\n      )\n      .required(\"Joining date is a required field\"),\n  official_date:\n    Yup.date()\n      .when(\n        'joining_date',\n        (joining_date, schema) => (joining_date && schema.min(joining_date, \"Official date must be after joining date\")),\n      )\n      .nullable(true),\n  contract_type: Yup.string().nullable(true).required(\"Contract type is a required field\"),\n  position: Yup.string().required(\"Position is a required field\"),\n  status: Yup.string().required(\"Status is a required field\"),\n  roles: Yup.string().required(\"Roles is a required field\"),\n  name:\n    Yup.string()\n      .trim()\n      .min(4, \"Name must be at least 4 characters\")\n      .max(30, \"Name must be at most 30 characters\")\n      .required(\"Name is a required field\"),\n  phone_number:\n    Yup.string()\n      .trim()\n      .min(10, \"Phone number must be at least 10 characters\")\n      .max(11, \"Phone number must be at most 11 characters\")\n      .matches(/^[0-9][^#&<>\\~;$^%{}?a-zA-Z]{9,10}$/, \"Phone number cannot contain special characters\")\n      .required(\"Phone number is a required field\"),\n  address:\n    Yup.string()\n      .trim()\n      .max(100, \"Address must be at most 100 characters\")\n      .required(\"Address is a required field\"),\n  sex: Yup.string().required(\"Gender is a required field\"),\n  date_of_birth:\n    Yup.string()\n      .test(\n        \"date_of_birth\",\n        \"Date of birth must less than current date\",\n        value => {\n          return moment().diff(moment(value), 'day') > 0;\n        }\n      )\n      .required(\"Date of birth is a required field\"),\n}\n\nexport const validationSchema = item => {\n  const specifiedValidationSchema = item ? {\n    code:\n      Yup.string()\n        .matches(/^B[0-9]{6}$/, \"Starts with letter B and ends with 6 digits\")\n        .required(\"Code is a required field\"),\n    joining_date:\n      Yup.string()\n        .required(\"Joining date is a required field\"),\n  } : {\n      password:\n        Yup.string()\n          .matches(/^[a-zA-Z0-9]{6,15}$/, \"Password cannot contain special characters\")\n          .min(6, \"Password must be at least 6 characters\")\n          .max(15, \"Password must be at most 15 characters\")\n          .required(\"Password is a required field\"),\n    }\n\n  return Yup.object().shape({\n    ...commonValidationSchema,\n    ...specifiedValidationSchema\n  })\n}\n\nexport const initialValues = item => {\n  return item ? {\n    ...item,\n    status: item.status ? \"Active\" : \"Deactive\",\n    roles: item.roles[0].name,\n    name: item.profile.name,\n    phone_number: item.profile.phone_number,\n    address: item.profile.address,\n    sex: item.profile.sex,\n    date_of_birth: item.profile.date_of_birth\n  } : {\n      email: '',\n      id_card: '',\n      joining_date: '',\n      contract_type: '',\n      position: '',\n      status: '',\n      roles: '',\n      name: '',\n      phone_number: '',\n      address: '',\n      sex: '',\n      date_of_birth: '',\n      password: ''\n    }\n}\n"]},"metadata":{},"sourceType":"module"}