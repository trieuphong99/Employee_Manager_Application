{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $hasInstance = GetIntrinsic('Symbol.hasInstance', true);\n\nvar Call = require('./Call');\n\nvar GetMethod = require('./GetMethod');\n\nvar IsCallable = require('./IsCallable');\n\nvar OrdinaryHasInstance = require('./OrdinaryHasInstance');\n\nvar ToBoolean = require('./ToBoolean');\n\nvar Type = require('./Type'); // https://www.ecma-international.org/ecma-262/6.0/#sec-instanceofoperator\n\n\nmodule.exports = function InstanceofOperator(O, C) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n\n  var instOfHandler = $hasInstance ? GetMethod(C, $hasInstance) : void 0;\n\n  if (typeof instOfHandler !== 'undefined') {\n    return ToBoolean(Call(instOfHandler, C, [O]));\n  }\n\n  if (!IsCallable(C)) {\n    throw new $TypeError('`C` is not Callable');\n  }\n\n  return OrdinaryHasInstance(C, O);\n};","map":null,"metadata":{},"sourceType":"module"}