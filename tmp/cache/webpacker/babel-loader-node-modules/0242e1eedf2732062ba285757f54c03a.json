{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nvar Switch = React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var mergedRef = ref || React.createRef();\n  var initChecked = false;\n\n  if ('checked' in props) {\n    initChecked = !!props.checked;\n  } else {\n    initChecked = !!props.defaultChecked;\n  }\n\n  var _React$useState = React.useState(initChecked),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  React.useEffect(function () {\n    var autoFocus = props.autoFocus,\n        disabled = props.disabled;\n\n    if (autoFocus && !disabled && mergedRef.current) {\n      mergedRef.current.focus();\n    }\n  }, [props.autoFocus]);\n  React.useEffect(function () {\n    if ('checked' in props) {\n      setChecked(!!props.checked);\n    }\n  }, [props.checked]);\n\n  var setInternalChecked = function setInternalChecked(isChecked, e) {\n    var disabled = props.disabled,\n        onChange = props.onChange;\n\n    if (disabled) {\n      return;\n    }\n\n    if (!('checked' in props)) {\n      setChecked(isChecked);\n    }\n\n    if (onChange) {\n      onChange(isChecked, e);\n    }\n  };\n\n  var handleClick = function handleClick(e) {\n    var onClick = props.onClick;\n    var newChecked = !checked;\n    setInternalChecked(newChecked, e);\n\n    if (onClick) {\n      onClick(newChecked, e);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (e.keyCode === 37) {\n      // Left\n      setInternalChecked(false, e);\n    } else if (e.keyCode === 39) {\n      // Right\n      setInternalChecked(true, e);\n    }\n  }; // Handle auto focus when click switch in Chrome\n\n\n  var handleMouseUp = function handleMouseUp(e) {\n    if (mergedRef.current) {\n      mergedRef.current.blur();\n    }\n\n    if (props.onMouseUp) {\n      props.onMouseUp(e);\n    }\n  };\n\n  var className = props.className,\n      prefixCls = props.prefixCls,\n      disabled = props.disabled,\n      loadingIcon = props.loadingIcon,\n      checkedChildren = props.checkedChildren,\n      unCheckedChildren = props.unCheckedChildren,\n      onChange = props.onChange,\n      restProps = _objectWithoutProperties(props, [\"className\", \"prefixCls\", \"disabled\", \"loadingIcon\", \"checkedChildren\", \"unCheckedChildren\", \"onChange\"]);\n\n  var switchClassName = classNames((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-checked\"), checked), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames));\n  return React.createElement(\"button\", Object.assign({}, restProps, {\n    type: \"button\",\n    role: \"switch\",\n    \"aria-checked\": checked,\n    disabled: disabled,\n    className: switchClassName,\n    ref: mergedRef,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick,\n    onMouseUp: handleMouseUp\n  }), loadingIcon, React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-inner\")\n  }, checked ? checkedChildren : unCheckedChildren));\n});\nSwitch.displayName = 'Switch';\nSwitch.defaultProps = {\n  prefixCls: 'rc-switch',\n  checkedChildren: null,\n  unCheckedChildren: null,\n  className: '',\n  defaultChecked: false\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}