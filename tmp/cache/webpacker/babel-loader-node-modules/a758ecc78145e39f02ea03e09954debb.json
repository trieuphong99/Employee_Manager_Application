{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React from 'react';\nimport { Provider, create } from 'mini-store';\nimport SubPopupMenu, { getActiveKey } from './SubPopupMenu';\nimport { noop } from './util';\nimport { getMotion } from './utils/legacyUtil';\n\nvar Menu =\n/** @class */\nfunction () {\n  var Menu = /*#__PURE__*/function (_React$Component) {\n    _inherits(Menu, _React$Component);\n\n    var _super = _createSuper(Menu);\n\n    function Menu(props) {\n      var _this;\n\n      _classCallCheck(this, Menu);\n\n      _this = _super.call(this, props);\n\n      _this.onSelect = function (selectInfo) {\n        var _assertThisInitialize = _assertThisInitialized(_this),\n            props = _assertThisInitialize.props;\n\n        if (props.selectable) {\n          // root menu\n          var _this$store$getState = _this.store.getState(),\n              _selectedKeys = _this$store$getState.selectedKeys;\n\n          var selectedKey = selectInfo.key;\n\n          if (props.multiple) {\n            _selectedKeys = _selectedKeys.concat([selectedKey]);\n          } else {\n            _selectedKeys = [selectedKey];\n          }\n\n          if (!('selectedKeys' in props)) {\n            _this.store.setState({\n              selectedKeys: _selectedKeys\n            });\n          }\n\n          props.onSelect(_objectSpread(_objectSpread({}, selectInfo), {}, {\n            selectedKeys: _selectedKeys\n          }));\n        }\n      };\n\n      _this.onClick = function (e) {\n        _this.props.onClick(e);\n      }; // onKeyDown needs to be exposed as a instance method\n      // e.g., in rc-select, we need to navigate menu item while\n      // current active item is rc-select input box rather than the menu itself\n\n\n      _this.onKeyDown = function (e, callback) {\n        _this.innerMenu.getWrappedInstance().onKeyDown(e, callback);\n      };\n\n      _this.onOpenChange = function (event) {\n        var _assertThisInitialize2 = _assertThisInitialized(_this),\n            props = _assertThisInitialize2.props;\n\n        var openKeys = _this.store.getState().openKeys.concat();\n\n        var changed = false;\n\n        var processSingle = function processSingle(e) {\n          var oneChanged = false;\n\n          if (e.open) {\n            oneChanged = openKeys.indexOf(e.key) === -1;\n\n            if (oneChanged) {\n              openKeys.push(e.key);\n            }\n          } else {\n            var index = openKeys.indexOf(e.key);\n            oneChanged = index !== -1;\n\n            if (oneChanged) {\n              openKeys.splice(index, 1);\n            }\n          }\n\n          changed = changed || oneChanged;\n        };\n\n        if (Array.isArray(event)) {\n          // batch change call\n          event.forEach(processSingle);\n        } else {\n          processSingle(event);\n        }\n\n        if (changed) {\n          if (!('openKeys' in _this.props)) {\n            _this.store.setState({\n              openKeys: openKeys\n            });\n          }\n\n          props.onOpenChange(openKeys);\n        }\n      };\n\n      _this.onDeselect = function (selectInfo) {\n        var _assertThisInitialize3 = _assertThisInitialized(_this),\n            props = _assertThisInitialize3.props;\n\n        if (props.selectable) {\n          var _selectedKeys2 = _this.store.getState().selectedKeys.concat();\n\n          var selectedKey = selectInfo.key;\n\n          var index = _selectedKeys2.indexOf(selectedKey);\n\n          if (index !== -1) {\n            _selectedKeys2.splice(index, 1);\n          }\n\n          if (!('selectedKeys' in props)) {\n            _this.store.setState({\n              selectedKeys: _selectedKeys2\n            });\n          }\n\n          props.onDeselect(_objectSpread(_objectSpread({}, selectInfo), {}, {\n            selectedKeys: _selectedKeys2\n          }));\n        }\n      };\n\n      _this.getOpenTransitionName = function () {\n        var _assertThisInitialize4 = _assertThisInitialized(_this),\n            props = _assertThisInitialize4.props;\n\n        var transitionName = props.openTransitionName;\n        var animationName = props.openAnimation;\n\n        if (!transitionName && typeof animationName === 'string') {\n          transitionName = \"\".concat(props.prefixCls, \"-open-\").concat(animationName);\n        }\n\n        return transitionName;\n      };\n\n      _this.setInnerMenu = function (node) {\n        _this.innerMenu = node;\n      };\n\n      _this.isRootMenu = true;\n      var selectedKeys = props.defaultSelectedKeys;\n      var openKeys = props.defaultOpenKeys;\n\n      if ('selectedKeys' in props) {\n        selectedKeys = props.selectedKeys || [];\n      }\n\n      if ('openKeys' in props) {\n        openKeys = props.openKeys || [];\n      }\n\n      _this.store = create({\n        selectedKeys: selectedKeys,\n        openKeys: openKeys,\n        activeKey: {\n          '0-menu-': getActiveKey(props, props.activeKey)\n        }\n      });\n      return _this;\n    }\n\n    _createClass(Menu, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateMiniStore();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        this.updateMiniStore();\n      }\n    }, {\n      key: \"updateMiniStore\",\n      value: function updateMiniStore() {\n        if ('selectedKeys' in this.props) {\n          this.store.setState({\n            selectedKeys: this.props.selectedKeys || []\n          });\n        }\n\n        if ('openKeys' in this.props) {\n          this.store.setState({\n            openKeys: this.props.openKeys || []\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = _objectSpread({}, this.props);\n\n        props.className += \" \".concat(props.prefixCls, \"-root\");\n\n        if (props.direction === 'rtl') {\n          props.className += \" \".concat(props.prefixCls, \"-rtl\");\n        }\n\n        props = _objectSpread(_objectSpread({}, props), {}, {\n          onClick: this.onClick,\n          onOpenChange: this.onOpenChange,\n          onDeselect: this.onDeselect,\n          onSelect: this.onSelect,\n          parentMenu: this,\n          motion: getMotion(this.props)\n        });\n        delete props.openAnimation;\n        delete props.openTransitionName;\n        return /*#__PURE__*/React.createElement(Provider, {\n          store: this.store\n        }, /*#__PURE__*/React.createElement(SubPopupMenu, Object.assign({}, props, {\n          ref: this.setInnerMenu\n        }), this.props.children));\n      }\n    }]);\n\n    return Menu;\n  }(React.Component);\n\n  Menu.defaultProps = {\n    selectable: true,\n    onClick: noop,\n    onSelect: noop,\n    onOpenChange: noop,\n    onDeselect: noop,\n    defaultSelectedKeys: [],\n    defaultOpenKeys: [],\n    subMenuOpenDelay: 0.1,\n    subMenuCloseDelay: 0.1,\n    triggerSubMenuAction: 'hover',\n    prefixCls: 'rc-menu',\n    className: '',\n    mode: 'vertical',\n    style: {},\n    builtinPlacements: {},\n    overflowedIndicator: /*#__PURE__*/React.createElement(\"span\", null, \"\\xB7\\xB7\\xB7\")\n  };\n  return Menu;\n}();\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}