{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport actionTypes from '../const/actionTypes';\nimport _ from 'lodash';\nvar initialState = [];\n\nvar myReducer = function myReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.GET_OVERTIMES:\n      return action.data;\n\n    case actionTypes.ADD_OVERTIMES:\n      return state.concat(action.data);\n\n    case actionTypes.UPDATE_OVERTIMES:\n      var item = action.data;\n\n      var index = _.findIndex(state, function (o) {\n        return item.id === o.id;\n      });\n\n      return [].concat(_toConsumableArray(_.slice(state, 0, index)), [item], _toConsumableArray(_.slice(state, index + 1)));\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/staff/reducer/overtimes.js"],"names":["actionTypes","_","initialState","myReducer","state","action","type","GET_OVERTIMES","data","ADD_OVERTIMES","concat","UPDATE_OVERTIMES","item","index","findIndex","o","id","slice"],"mappings":";;;;;;;;AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,IAAIC,SAAS,GAAG,SAAZA,SAAY,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKN,WAAW,CAACO,aAAjB;AACE,aAAOF,MAAM,CAACG,IAAd;;AAEF,SAAKR,WAAW,CAACS,aAAjB;AACE,aAAOL,KAAK,CAACM,MAAN,CAAaL,MAAM,CAACG,IAApB,CAAP;;AAEF,SAAKR,WAAW,CAACW,gBAAjB;AACE,UAAMC,IAAI,GAAGP,MAAM,CAACG,IAApB;;AACA,UAAMK,KAAK,GAAGZ,CAAC,CAACa,SAAF,CAAYV,KAAZ,EAAmB,UAAAW,CAAC;AAAA,eAAIH,IAAI,CAACI,EAAL,KAAYD,CAAC,CAACC,EAAlB;AAAA,OAApB,CAAd;;AACA,0CACKf,CAAC,CAACgB,KAAF,CAAQb,KAAR,EAAe,CAAf,EAAkBS,KAAlB,CADL,IAEED,IAFF,sBAGKX,CAAC,CAACgB,KAAF,CAAQb,KAAR,EAAeS,KAAK,GAAG,CAAvB,CAHL;;AAKF;AACE,aAAOT,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,eAAeD,SAAf","sourcesContent":["import actionTypes from '../const/actionTypes';\nimport _ from 'lodash';\n\nvar initialState = []\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case actionTypes.GET_OVERTIMES:\n      return action.data;\n\n    case actionTypes.ADD_OVERTIMES:\n      return state.concat(action.data)\n\n    case actionTypes.UPDATE_OVERTIMES:\n      const item = action.data\n      const index = _.findIndex(state, o => item.id === o.id)\n      return [\n        ..._.slice(state, 0, index),\n        item,\n        ..._.slice(state, index + 1)\n      ]\n    default:\n      return state;\n  }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}