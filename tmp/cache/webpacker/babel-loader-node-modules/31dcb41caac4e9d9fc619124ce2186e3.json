{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.PureDayPicker = exports.defaultProps = void 0;\n\nvar _enzymeShallowEqual = _interopRequireDefault(require(\"enzyme-shallow-equal\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _airbnbPropTypes = require(\"airbnb-prop-types\");\n\nvar _reactWithStyles = require(\"react-with-styles\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _throttle = _interopRequireDefault(require(\"lodash/throttle\"));\n\nvar _isTouchDevice = _interopRequireDefault(require(\"is-touch-device\"));\n\nvar _reactOutsideClickHandler = _interopRequireDefault(require(\"react-outside-click-handler\"));\n\nvar _defaultPhrases = require(\"../defaultPhrases\");\n\nvar _getPhrasePropTypes = _interopRequireDefault(require(\"../utils/getPhrasePropTypes\"));\n\nvar _noflip = _interopRequireDefault(require(\"../utils/noflip\"));\n\nvar _CalendarMonthGrid = _interopRequireDefault(require(\"./CalendarMonthGrid\"));\n\nvar _DayPickerNavigation = _interopRequireDefault(require(\"./DayPickerNavigation\"));\n\nvar _DayPickerKeyboardShortcuts = _interopRequireWildcard(require(\"./DayPickerKeyboardShortcuts\"));\n\nvar _getNumberOfCalendarMonthWeeks = _interopRequireDefault(require(\"../utils/getNumberOfCalendarMonthWeeks\"));\n\nvar _getCalendarMonthWidth = _interopRequireDefault(require(\"../utils/getCalendarMonthWidth\"));\n\nvar _calculateDimension = _interopRequireDefault(require(\"../utils/calculateDimension\"));\n\nvar _getActiveElement = _interopRequireDefault(require(\"../utils/getActiveElement\"));\n\nvar _isDayVisible = _interopRequireDefault(require(\"../utils/isDayVisible\"));\n\nvar _isSameMonth = _interopRequireDefault(require(\"../utils/isSameMonth\"));\n\nvar _ModifiersShape = _interopRequireDefault(require(\"../shapes/ModifiersShape\"));\n\nvar _NavPositionShape = _interopRequireDefault(require(\"../shapes/NavPositionShape\"));\n\nvar _ScrollableOrientationShape = _interopRequireDefault(require(\"../shapes/ScrollableOrientationShape\"));\n\nvar _DayOfWeekShape = _interopRequireDefault(require(\"../shapes/DayOfWeekShape\"));\n\nvar _CalendarInfoPositionShape = _interopRequireDefault(require(\"../shapes/CalendarInfoPositionShape\"));\n\nvar _constants = require(\"../constants\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar MONTH_PADDING = 23;\nvar PREV_TRANSITION = 'prev';\nvar NEXT_TRANSITION = 'next';\nvar MONTH_SELECTION_TRANSITION = 'month_selection';\nvar YEAR_SELECTION_TRANSITION = 'year_selection';\nvar PREV_NAV = 'prev_nav';\nvar NEXT_NAV = 'next_nav';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {\n  // calendar presentation props\n  enableOutsideDays: _propTypes[\"default\"].bool,\n  numberOfMonths: _propTypes[\"default\"].number,\n  orientation: _ScrollableOrientationShape[\"default\"],\n  withPortal: _propTypes[\"default\"].bool,\n  onOutsideClick: _propTypes[\"default\"].func,\n  hidden: _propTypes[\"default\"].bool,\n  initialVisibleMonth: _propTypes[\"default\"].func,\n  firstDayOfWeek: _DayOfWeekShape[\"default\"],\n  renderCalendarInfo: _propTypes[\"default\"].func,\n  calendarInfoPosition: _CalendarInfoPositionShape[\"default\"],\n  hideKeyboardShortcutsPanel: _propTypes[\"default\"].bool,\n  daySize: _airbnbPropTypes.nonNegativeInteger,\n  isRTL: _propTypes[\"default\"].bool,\n  verticalHeight: _airbnbPropTypes.nonNegativeInteger,\n  noBorder: _propTypes[\"default\"].bool,\n  transitionDuration: _airbnbPropTypes.nonNegativeInteger,\n  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,\n  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,\n  renderKeyboardShortcutsButton: _propTypes[\"default\"].func,\n  renderKeyboardShortcutsPanel: _propTypes[\"default\"].func,\n  // navigation props\n  dayPickerNavigationInlineStyles: _propTypes[\"default\"].object,\n  disablePrev: _propTypes[\"default\"].bool,\n  disableNext: _propTypes[\"default\"].bool,\n  navPosition: _NavPositionShape[\"default\"],\n  navPrev: _propTypes[\"default\"].node,\n  navNext: _propTypes[\"default\"].node,\n  renderNavPrevButton: _propTypes[\"default\"].func,\n  renderNavNextButton: _propTypes[\"default\"].func,\n  noNavButtons: _propTypes[\"default\"].bool,\n  noNavNextButton: _propTypes[\"default\"].bool,\n  noNavPrevButton: _propTypes[\"default\"].bool,\n  onPrevMonthClick: _propTypes[\"default\"].func,\n  onNextMonthClick: _propTypes[\"default\"].func,\n  onMonthChange: _propTypes[\"default\"].func,\n  onYearChange: _propTypes[\"default\"].func,\n  onGetNextScrollableMonths: _propTypes[\"default\"].func,\n  // VERTICAL_SCROLLABLE daypickers only\n  onGetPrevScrollableMonths: _propTypes[\"default\"].func,\n  // VERTICAL_SCROLLABLE daypickers only\n  // month props\n  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderWeekHeaderElement: _propTypes[\"default\"].func,\n  // day props\n  modifiers: _propTypes[\"default\"].objectOf(_propTypes[\"default\"].objectOf(_ModifiersShape[\"default\"])),\n  renderCalendarDay: _propTypes[\"default\"].func,\n  renderDayContents: _propTypes[\"default\"].func,\n  onDayClick: _propTypes[\"default\"].func,\n  onDayMouseEnter: _propTypes[\"default\"].func,\n  onDayMouseLeave: _propTypes[\"default\"].func,\n  // accessibility props\n  isFocused: _propTypes[\"default\"].bool,\n  getFirstFocusableDay: _propTypes[\"default\"].func,\n  onBlur: _propTypes[\"default\"].func,\n  showKeyboardShortcuts: _propTypes[\"default\"].bool,\n  onTab: _propTypes[\"default\"].func,\n  onShiftTab: _propTypes[\"default\"].func,\n  // internationalization\n  monthFormat: _propTypes[\"default\"].string,\n  weekDayFormat: _propTypes[\"default\"].string,\n  phrases: _propTypes[\"default\"].shape((0, _getPhrasePropTypes[\"default\"])(_defaultPhrases.DayPickerPhrases)),\n  dayAriaLabelFormat: _propTypes[\"default\"].string\n})) : {};\nvar defaultProps = {\n  // calendar presentation props\n  enableOutsideDays: false,\n  numberOfMonths: 2,\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  onOutsideClick: function onOutsideClick() {},\n  hidden: false,\n  initialVisibleMonth: function initialVisibleMonth() {\n    return (0, _moment[\"default\"])();\n  },\n  firstDayOfWeek: null,\n  renderCalendarInfo: null,\n  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,\n  hideKeyboardShortcutsPanel: false,\n  daySize: _constants.DAY_SIZE,\n  isRTL: false,\n  verticalHeight: null,\n  noBorder: false,\n  transitionDuration: undefined,\n  verticalBorderSpacing: undefined,\n  horizontalMonthPadding: 13,\n  renderKeyboardShortcutsButton: undefined,\n  renderKeyboardShortcutsPanel: undefined,\n  // navigation props\n  dayPickerNavigationInlineStyles: null,\n  disablePrev: false,\n  disableNext: false,\n  navPosition: _constants.NAV_POSITION_TOP,\n  navPrev: null,\n  navNext: null,\n  renderNavPrevButton: null,\n  renderNavNextButton: null,\n  noNavButtons: false,\n  noNavNextButton: false,\n  noNavPrevButton: false,\n  onPrevMonthClick: function onPrevMonthClick() {},\n  onNextMonthClick: function onNextMonthClick() {},\n  onMonthChange: function onMonthChange() {},\n  onYearChange: function onYearChange() {},\n  onGetNextScrollableMonths: function onGetNextScrollableMonths() {},\n  onGetPrevScrollableMonths: function onGetPrevScrollableMonths() {},\n  // month props\n  renderMonthText: null,\n  renderMonthElement: null,\n  renderWeekHeaderElement: null,\n  // day props\n  modifiers: {},\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  onDayClick: function onDayClick() {},\n  onDayMouseEnter: function onDayMouseEnter() {},\n  onDayMouseLeave: function onDayMouseLeave() {},\n  // accessibility props\n  isFocused: false,\n  getFirstFocusableDay: null,\n  onBlur: function onBlur() {},\n  showKeyboardShortcuts: false,\n  onTab: function onTab() {},\n  onShiftTab: function onShiftTab() {},\n  // internationalization\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: _defaultPhrases.DayPickerPhrases,\n  dayAriaLabelFormat: undefined\n};\nexports.defaultProps = defaultProps;\n\nvar DayPicker =\n/*#__PURE__*/\nfunction (_ref) {\n  (0, _inheritsLoose2[\"default\"])(DayPicker, _ref);\n  var _proto = DayPicker.prototype;\n\n  _proto[!_react[\"default\"].PureComponent && \"shouldComponentUpdate\"] = function (nextProps, nextState) {\n    return !(0, _enzymeShallowEqual[\"default\"])(this.props, nextProps) || !(0, _enzymeShallowEqual[\"default\"])(this.state, nextState);\n  };\n\n  function DayPicker(props) {\n    var _this;\n\n    _this = _ref.call(this, props) || this;\n    var currentMonth = props.hidden ? (0, _moment[\"default\"])() : props.initialVisibleMonth();\n    var focusedDate = currentMonth.clone().startOf('month');\n\n    if (props.getFirstFocusableDay) {\n      focusedDate = props.getFirstFocusableDay(currentMonth);\n    }\n\n    var horizontalMonthPadding = props.horizontalMonthPadding;\n    var translationValue = props.isRTL && _this.isHorizontal() ? -(0, _getCalendarMonthWidth[\"default\"])(props.daySize, horizontalMonthPadding) : 0;\n    _this.hasSetInitialVisibleMonth = !props.hidden;\n    _this.state = {\n      currentMonthScrollTop: null,\n      currentMonth: currentMonth,\n      monthTransition: null,\n      translationValue: translationValue,\n      scrollableMonthMultiple: 1,\n      calendarMonthWidth: (0, _getCalendarMonthWidth[\"default\"])(props.daySize, horizontalMonthPadding),\n      focusedDate: !props.hidden || props.isFocused ? focusedDate : null,\n      nextFocusedDate: null,\n      showKeyboardShortcuts: props.showKeyboardShortcuts,\n      onKeyboardShortcutsPanelClose: function onKeyboardShortcutsPanelClose() {},\n      isTouchDevice: (0, _isTouchDevice[\"default\"])(),\n      withMouseInteractions: true,\n      calendarInfoWidth: 0,\n      monthTitleHeight: null,\n      hasSetHeight: false\n    };\n\n    _this.setCalendarMonthWeeks(currentMonth);\n\n    _this.calendarMonthGridHeight = 0;\n    _this.setCalendarInfoWidthTimeout = null;\n    _this.setCalendarMonthGridHeightTimeout = null;\n    _this.onKeyDown = _this.onKeyDown.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.throttledKeyDown = (0, _throttle[\"default\"])(_this.onFinalKeyDown, 200, {\n      trailing: false\n    });\n    _this.onPrevMonthClick = _this.onPrevMonthClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onPrevMonthTransition = _this.onPrevMonthTransition.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onNextMonthClick = _this.onNextMonthClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onNextMonthTransition = _this.onNextMonthTransition.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onMonthChange = _this.onMonthChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onYearChange = _this.onYearChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.getNextScrollableMonths = _this.getNextScrollableMonths.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.getPrevScrollableMonths = _this.getPrevScrollableMonths.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateStateAfterMonthTransition = _this.updateStateAfterMonthTransition.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.openKeyboardShortcutsPanel = _this.openKeyboardShortcutsPanel.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.closeKeyboardShortcutsPanel = _this.closeKeyboardShortcutsPanel.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.setCalendarInfoRef = _this.setCalendarInfoRef.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.setContainerRef = _this.setContainerRef.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.setTransitionContainerRef = _this.setTransitionContainerRef.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.setMonthTitleHeight = _this.setMonthTitleHeight.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  _proto.componentDidMount = function componentDidMount() {\n    var orientation = this.props.orientation;\n    var currentMonth = this.state.currentMonth;\n    var calendarInfoWidth = this.calendarInfo ? (0, _calculateDimension[\"default\"])(this.calendarInfo, 'width', true, true) : 0;\n    var currentMonthScrollTop = this.transitionContainer && orientation === _constants.VERTICAL_SCROLLABLE ? this.transitionContainer.scrollHeight - this.transitionContainer.scrollTop : null;\n    this.setState({\n      isTouchDevice: (0, _isTouchDevice[\"default\"])(),\n      calendarInfoWidth: calendarInfoWidth,\n      currentMonthScrollTop: currentMonthScrollTop\n    });\n    this.setCalendarMonthWeeks(currentMonth);\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextState) {\n    var hidden = nextProps.hidden,\n        isFocused = nextProps.isFocused,\n        showKeyboardShortcuts = nextProps.showKeyboardShortcuts,\n        onBlur = nextProps.onBlur,\n        orientation = nextProps.orientation,\n        renderMonthText = nextProps.renderMonthText,\n        horizontalMonthPadding = nextProps.horizontalMonthPadding;\n    var currentMonth = this.state.currentMonth;\n    var nextCurrentMonth = nextState.currentMonth;\n\n    if (!hidden) {\n      if (!this.hasSetInitialVisibleMonth) {\n        this.hasSetInitialVisibleMonth = true;\n        this.setState({\n          currentMonth: nextProps.initialVisibleMonth()\n        });\n      }\n    }\n\n    var _this$props = this.props,\n        daySize = _this$props.daySize,\n        prevIsFocused = _this$props.isFocused,\n        prevRenderMonthText = _this$props.renderMonthText;\n\n    if (nextProps.daySize !== daySize) {\n      this.setState({\n        calendarMonthWidth: (0, _getCalendarMonthWidth[\"default\"])(nextProps.daySize, horizontalMonthPadding)\n      });\n    }\n\n    if (isFocused !== prevIsFocused) {\n      if (isFocused) {\n        var focusedDate = this.getFocusedDay(currentMonth);\n        var onKeyboardShortcutsPanelClose = this.state.onKeyboardShortcutsPanelClose;\n\n        if (nextProps.showKeyboardShortcuts) {\n          // the ? shortcut came from the input and we should return input there once it is close\n          onKeyboardShortcutsPanelClose = onBlur;\n        }\n\n        this.setState({\n          showKeyboardShortcuts: showKeyboardShortcuts,\n          onKeyboardShortcutsPanelClose: onKeyboardShortcutsPanelClose,\n          focusedDate: focusedDate,\n          withMouseInteractions: false\n        });\n      } else {\n        this.setState({\n          focusedDate: null\n        });\n      }\n    }\n\n    if (renderMonthText !== prevRenderMonthText) {\n      this.setState({\n        monthTitleHeight: null\n      });\n    } // Capture the scroll position so when previous months are rendered above the current month\n    // we can adjust scroll after the component has updated and the previous current month\n    // stays in view.\n\n\n    if (orientation === _constants.VERTICAL_SCROLLABLE && this.transitionContainer && !(0, _isSameMonth[\"default\"])(currentMonth, nextCurrentMonth)) {\n      this.setState({\n        currentMonthScrollTop: this.transitionContainer.scrollHeight - this.transitionContainer.scrollTop\n      });\n    }\n  };\n\n  _proto.componentWillUpdate = function componentWillUpdate() {\n    var _this2 = this;\n\n    var transitionDuration = this.props.transitionDuration; // Calculating the dimensions trigger a DOM repaint which\n    // breaks the CSS transition.\n    // The setTimeout will wait until the transition ends.\n\n    if (this.calendarInfo) {\n      this.setCalendarInfoWidthTimeout = setTimeout(function () {\n        var calendarInfoWidth = _this2.state.calendarInfoWidth;\n        var calendarInfoPanelWidth = (0, _calculateDimension[\"default\"])(_this2.calendarInfo, 'width', true, true);\n\n        if (calendarInfoWidth !== calendarInfoPanelWidth) {\n          _this2.setState({\n            calendarInfoWidth: calendarInfoPanelWidth\n          });\n        }\n      }, transitionDuration);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$props2 = this.props,\n        orientation = _this$props2.orientation,\n        daySize = _this$props2.daySize,\n        isFocused = _this$props2.isFocused,\n        numberOfMonths = _this$props2.numberOfMonths;\n    var _this$state = this.state,\n        currentMonth = _this$state.currentMonth,\n        currentMonthScrollTop = _this$state.currentMonthScrollTop,\n        focusedDate = _this$state.focusedDate,\n        monthTitleHeight = _this$state.monthTitleHeight;\n\n    if (this.isHorizontal() && (orientation !== prevProps.orientation || daySize !== prevProps.daySize)) {\n      var visibleCalendarWeeks = this.calendarMonthWeeks.slice(1, numberOfMonths + 1);\n      var calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat((0, _toConsumableArray2[\"default\"])(visibleCalendarWeeks))) * (daySize - 1);\n      var newMonthHeight = monthTitleHeight + calendarMonthWeeksHeight + 1;\n      this.adjustDayPickerHeight(newMonthHeight);\n    }\n\n    if (!prevProps.isFocused && isFocused && !focusedDate) {\n      this.container.focus();\n    } // If orientation is VERTICAL_SCROLLABLE and currentMonth has changed adjust scrollTop so the\n    // new months rendered above the current month don't push the current month out of view.\n\n\n    if (orientation === _constants.VERTICAL_SCROLLABLE && !(0, _isSameMonth[\"default\"])(prevState.currentMonth, currentMonth) && currentMonthScrollTop && this.transitionContainer) {\n      this.transitionContainer.scrollTop = this.transitionContainer.scrollHeight - currentMonthScrollTop;\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.setCalendarInfoWidthTimeout);\n    clearTimeout(this.setCalendarMonthGridHeightTimeout);\n  };\n\n  _proto.onKeyDown = function onKeyDown(e) {\n    e.stopPropagation();\n\n    if (!_constants.MODIFIER_KEY_NAMES.has(e.key)) {\n      this.throttledKeyDown(e);\n    }\n  };\n\n  _proto.onFinalKeyDown = function onFinalKeyDown(e) {\n    this.setState({\n      withMouseInteractions: false\n    });\n    var _this$props3 = this.props,\n        onBlur = _this$props3.onBlur,\n        onTab = _this$props3.onTab,\n        onShiftTab = _this$props3.onShiftTab,\n        isRTL = _this$props3.isRTL;\n    var _this$state2 = this.state,\n        focusedDate = _this$state2.focusedDate,\n        showKeyboardShortcuts = _this$state2.showKeyboardShortcuts;\n    if (!focusedDate) return;\n    var newFocusedDate = focusedDate.clone();\n    var didTransitionMonth = false; // focus might be anywhere when the keyboard shortcuts panel is opened so we want to\n    // return it to wherever it was before when the panel was opened\n\n    var activeElement = (0, _getActiveElement[\"default\"])();\n\n    var onKeyboardShortcutsPanelClose = function onKeyboardShortcutsPanelClose() {\n      if (activeElement) activeElement.focus();\n    };\n\n    switch (e.key) {\n      case 'ArrowUp':\n        e.preventDefault();\n        newFocusedDate.subtract(1, 'week');\n        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n        break;\n\n      case 'ArrowLeft':\n        e.preventDefault();\n\n        if (isRTL) {\n          newFocusedDate.add(1, 'day');\n        } else {\n          newFocusedDate.subtract(1, 'day');\n        }\n\n        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n        break;\n\n      case 'Home':\n        e.preventDefault();\n        newFocusedDate.startOf('week');\n        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n        break;\n\n      case 'PageUp':\n        e.preventDefault();\n        newFocusedDate.subtract(1, 'month');\n        didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n        break;\n\n      case 'ArrowDown':\n        e.preventDefault();\n        newFocusedDate.add(1, 'week');\n        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n        break;\n\n      case 'ArrowRight':\n        e.preventDefault();\n\n        if (isRTL) {\n          newFocusedDate.subtract(1, 'day');\n        } else {\n          newFocusedDate.add(1, 'day');\n        }\n\n        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n        break;\n\n      case 'End':\n        e.preventDefault();\n        newFocusedDate.endOf('week');\n        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n        break;\n\n      case 'PageDown':\n        e.preventDefault();\n        newFocusedDate.add(1, 'month');\n        didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n        break;\n\n      case '?':\n        this.openKeyboardShortcutsPanel(onKeyboardShortcutsPanelClose);\n        break;\n\n      case 'Escape':\n        if (showKeyboardShortcuts) {\n          this.closeKeyboardShortcutsPanel();\n        } else {\n          onBlur(e);\n        }\n\n        break;\n\n      case 'Tab':\n        if (e.shiftKey) {\n          onShiftTab();\n        } else {\n          onTab(e);\n        }\n\n        break;\n\n      default:\n        break;\n    } // If there was a month transition, do not update the focused date until the transition has\n    // completed. Otherwise, attempting to focus on a DOM node may interrupt the CSS animation. If\n    // didTransitionMonth is true, the focusedDate gets updated in #updateStateAfterMonthTransition\n\n\n    if (!didTransitionMonth) {\n      this.setState({\n        focusedDate: newFocusedDate\n      });\n    }\n  };\n\n  _proto.onPrevMonthClick = function onPrevMonthClick(e) {\n    if (e) e.preventDefault();\n    this.onPrevMonthTransition();\n  };\n\n  _proto.onPrevMonthTransition = function onPrevMonthTransition(nextFocusedDate) {\n    var _this$props4 = this.props,\n        daySize = _this$props4.daySize,\n        isRTL = _this$props4.isRTL,\n        numberOfMonths = _this$props4.numberOfMonths;\n    var _this$state3 = this.state,\n        calendarMonthWidth = _this$state3.calendarMonthWidth,\n        monthTitleHeight = _this$state3.monthTitleHeight;\n    var translationValue;\n\n    if (this.isVertical()) {\n      var calendarMonthWeeksHeight = this.calendarMonthWeeks[0] * (daySize - 1);\n      translationValue = monthTitleHeight + calendarMonthWeeksHeight + 1;\n    } else if (this.isHorizontal()) {\n      translationValue = calendarMonthWidth;\n\n      if (isRTL) {\n        translationValue = -2 * calendarMonthWidth;\n      }\n\n      var visibleCalendarWeeks = this.calendarMonthWeeks.slice(0, numberOfMonths);\n\n      var _calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat((0, _toConsumableArray2[\"default\"])(visibleCalendarWeeks))) * (daySize - 1);\n\n      var newMonthHeight = monthTitleHeight + _calendarMonthWeeksHeight + 1;\n      this.adjustDayPickerHeight(newMonthHeight);\n    }\n\n    this.setState({\n      monthTransition: PREV_TRANSITION,\n      translationValue: translationValue,\n      focusedDate: null,\n      nextFocusedDate: nextFocusedDate\n    });\n  };\n\n  _proto.onMonthChange = function onMonthChange(currentMonth) {\n    this.setCalendarMonthWeeks(currentMonth);\n    this.calculateAndSetDayPickerHeight(); // Translation value is a hack to force an invisible transition that\n    // properly rerenders the CalendarMonthGrid\n\n    this.setState({\n      monthTransition: MONTH_SELECTION_TRANSITION,\n      translationValue: 0.00001,\n      focusedDate: null,\n      nextFocusedDate: currentMonth,\n      currentMonth: currentMonth\n    });\n  };\n\n  _proto.onYearChange = function onYearChange(currentMonth) {\n    this.setCalendarMonthWeeks(currentMonth);\n    this.calculateAndSetDayPickerHeight(); // Translation value is a hack to force an invisible transition that\n    // properly rerenders the CalendarMonthGrid\n\n    this.setState({\n      monthTransition: YEAR_SELECTION_TRANSITION,\n      translationValue: 0.0001,\n      focusedDate: null,\n      nextFocusedDate: currentMonth,\n      currentMonth: currentMonth\n    });\n  };\n\n  _proto.onNextMonthClick = function onNextMonthClick(e) {\n    if (e) e.preventDefault();\n    this.onNextMonthTransition();\n  };\n\n  _proto.onNextMonthTransition = function onNextMonthTransition(nextFocusedDate) {\n    var _this$props5 = this.props,\n        isRTL = _this$props5.isRTL,\n        numberOfMonths = _this$props5.numberOfMonths,\n        daySize = _this$props5.daySize;\n    var _this$state4 = this.state,\n        calendarMonthWidth = _this$state4.calendarMonthWidth,\n        monthTitleHeight = _this$state4.monthTitleHeight;\n    var translationValue;\n\n    if (this.isVertical()) {\n      var firstVisibleMonthWeeks = this.calendarMonthWeeks[1];\n      var calendarMonthWeeksHeight = firstVisibleMonthWeeks * (daySize - 1);\n      translationValue = -(monthTitleHeight + calendarMonthWeeksHeight + 1);\n    }\n\n    if (this.isHorizontal()) {\n      translationValue = -calendarMonthWidth;\n\n      if (isRTL) {\n        translationValue = 0;\n      }\n\n      var visibleCalendarWeeks = this.calendarMonthWeeks.slice(2, numberOfMonths + 2);\n\n      var _calendarMonthWeeksHeight2 = Math.max.apply(Math, [0].concat((0, _toConsumableArray2[\"default\"])(visibleCalendarWeeks))) * (daySize - 1);\n\n      var newMonthHeight = monthTitleHeight + _calendarMonthWeeksHeight2 + 1;\n      this.adjustDayPickerHeight(newMonthHeight);\n    }\n\n    this.setState({\n      monthTransition: NEXT_TRANSITION,\n      translationValue: translationValue,\n      focusedDate: null,\n      nextFocusedDate: nextFocusedDate\n    });\n  };\n\n  _proto.getFirstDayOfWeek = function getFirstDayOfWeek() {\n    var firstDayOfWeek = this.props.firstDayOfWeek;\n\n    if (firstDayOfWeek == null) {\n      return _moment[\"default\"].localeData().firstDayOfWeek();\n    }\n\n    return firstDayOfWeek;\n  };\n\n  _proto.getWeekHeaders = function getWeekHeaders() {\n    var weekDayFormat = this.props.weekDayFormat;\n    var currentMonth = this.state.currentMonth;\n    var firstDayOfWeek = this.getFirstDayOfWeek();\n    var weekHeaders = [];\n\n    for (var i = 0; i < 7; i += 1) {\n      weekHeaders.push(currentMonth.clone().day((i + firstDayOfWeek) % 7).format(weekDayFormat));\n    }\n\n    return weekHeaders;\n  };\n\n  _proto.getFirstVisibleIndex = function getFirstVisibleIndex() {\n    var orientation = this.props.orientation;\n    var monthTransition = this.state.monthTransition;\n    if (orientation === _constants.VERTICAL_SCROLLABLE) return 0;\n    var firstVisibleMonthIndex = 1;\n\n    if (monthTransition === PREV_TRANSITION) {\n      firstVisibleMonthIndex -= 1;\n    } else if (monthTransition === NEXT_TRANSITION) {\n      firstVisibleMonthIndex += 1;\n    }\n\n    return firstVisibleMonthIndex;\n  };\n\n  _proto.getFocusedDay = function getFocusedDay(newMonth) {\n    var _this$props6 = this.props,\n        getFirstFocusableDay = _this$props6.getFirstFocusableDay,\n        numberOfMonths = _this$props6.numberOfMonths;\n    var focusedDate;\n\n    if (getFirstFocusableDay) {\n      focusedDate = getFirstFocusableDay(newMonth);\n    }\n\n    if (newMonth && (!focusedDate || !(0, _isDayVisible[\"default\"])(focusedDate, newMonth, numberOfMonths))) {\n      focusedDate = newMonth.clone().startOf('month');\n    }\n\n    return focusedDate;\n  };\n\n  _proto.setMonthTitleHeight = function setMonthTitleHeight(monthTitleHeight) {\n    var _this3 = this;\n\n    this.setState({\n      monthTitleHeight: monthTitleHeight\n    }, function () {\n      _this3.calculateAndSetDayPickerHeight();\n    });\n  };\n\n  _proto.setCalendarMonthWeeks = function setCalendarMonthWeeks(currentMonth) {\n    var numberOfMonths = this.props.numberOfMonths;\n    this.calendarMonthWeeks = [];\n    var month = currentMonth.clone().subtract(1, 'months');\n    var firstDayOfWeek = this.getFirstDayOfWeek();\n\n    for (var i = 0; i < numberOfMonths + 2; i += 1) {\n      var numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks[\"default\"])(month, firstDayOfWeek);\n      this.calendarMonthWeeks.push(numberOfWeeks);\n      month = month.add(1, 'months');\n    }\n  };\n\n  _proto.setContainerRef = function setContainerRef(ref) {\n    this.container = ref;\n  };\n\n  _proto.setCalendarInfoRef = function setCalendarInfoRef(ref) {\n    this.calendarInfo = ref;\n  };\n\n  _proto.setTransitionContainerRef = function setTransitionContainerRef(ref) {\n    this.transitionContainer = ref;\n  };\n\n  _proto.getNextScrollableMonths = function getNextScrollableMonths(e) {\n    var onGetNextScrollableMonths = this.props.onGetNextScrollableMonths;\n    if (e) e.preventDefault();\n    if (onGetNextScrollableMonths) onGetNextScrollableMonths(e);\n    this.setState(function (_ref2) {\n      var scrollableMonthMultiple = _ref2.scrollableMonthMultiple;\n      return {\n        scrollableMonthMultiple: scrollableMonthMultiple + 1\n      };\n    });\n  };\n\n  _proto.getPrevScrollableMonths = function getPrevScrollableMonths(e) {\n    var _this$props7 = this.props,\n        numberOfMonths = _this$props7.numberOfMonths,\n        onGetPrevScrollableMonths = _this$props7.onGetPrevScrollableMonths;\n    if (e) e.preventDefault();\n    if (onGetPrevScrollableMonths) onGetPrevScrollableMonths(e);\n    this.setState(function (_ref3) {\n      var currentMonth = _ref3.currentMonth,\n          scrollableMonthMultiple = _ref3.scrollableMonthMultiple;\n      return {\n        currentMonth: currentMonth.clone().subtract(numberOfMonths, 'month'),\n        scrollableMonthMultiple: scrollableMonthMultiple + 1\n      };\n    });\n  };\n\n  _proto.maybeTransitionNextMonth = function maybeTransitionNextMonth(newFocusedDate) {\n    var numberOfMonths = this.props.numberOfMonths;\n    var _this$state5 = this.state,\n        currentMonth = _this$state5.currentMonth,\n        focusedDate = _this$state5.focusedDate;\n    var newFocusedDateMonth = newFocusedDate.month();\n    var focusedDateMonth = focusedDate.month();\n    var isNewFocusedDateVisible = (0, _isDayVisible[\"default\"])(newFocusedDate, currentMonth, numberOfMonths);\n\n    if (newFocusedDateMonth !== focusedDateMonth && !isNewFocusedDateVisible) {\n      this.onNextMonthTransition(newFocusedDate);\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.maybeTransitionPrevMonth = function maybeTransitionPrevMonth(newFocusedDate) {\n    var numberOfMonths = this.props.numberOfMonths;\n    var _this$state6 = this.state,\n        currentMonth = _this$state6.currentMonth,\n        focusedDate = _this$state6.focusedDate;\n    var newFocusedDateMonth = newFocusedDate.month();\n    var focusedDateMonth = focusedDate.month();\n    var isNewFocusedDateVisible = (0, _isDayVisible[\"default\"])(newFocusedDate, currentMonth, numberOfMonths);\n\n    if (newFocusedDateMonth !== focusedDateMonth && !isNewFocusedDateVisible) {\n      this.onPrevMonthTransition(newFocusedDate);\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.isHorizontal = function isHorizontal() {\n    var orientation = this.props.orientation;\n    return orientation === _constants.HORIZONTAL_ORIENTATION;\n  };\n\n  _proto.isVertical = function isVertical() {\n    var orientation = this.props.orientation;\n    return orientation === _constants.VERTICAL_ORIENTATION || orientation === _constants.VERTICAL_SCROLLABLE;\n  };\n\n  _proto.updateStateAfterMonthTransition = function updateStateAfterMonthTransition() {\n    var _this4 = this;\n\n    var _this$props8 = this.props,\n        onPrevMonthClick = _this$props8.onPrevMonthClick,\n        onNextMonthClick = _this$props8.onNextMonthClick,\n        numberOfMonths = _this$props8.numberOfMonths,\n        onMonthChange = _this$props8.onMonthChange,\n        onYearChange = _this$props8.onYearChange,\n        isRTL = _this$props8.isRTL;\n    var _this$state7 = this.state,\n        currentMonth = _this$state7.currentMonth,\n        monthTransition = _this$state7.monthTransition,\n        focusedDate = _this$state7.focusedDate,\n        nextFocusedDate = _this$state7.nextFocusedDate,\n        withMouseInteractions = _this$state7.withMouseInteractions,\n        calendarMonthWidth = _this$state7.calendarMonthWidth;\n    if (!monthTransition) return;\n    var newMonth = currentMonth.clone();\n    var firstDayOfWeek = this.getFirstDayOfWeek();\n\n    if (monthTransition === PREV_TRANSITION) {\n      newMonth.subtract(1, 'month');\n      if (onPrevMonthClick) onPrevMonthClick(newMonth);\n      var newInvisibleMonth = newMonth.clone().subtract(1, 'month');\n      var numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks[\"default\"])(newInvisibleMonth, firstDayOfWeek);\n      this.calendarMonthWeeks = [numberOfWeeks].concat((0, _toConsumableArray2[\"default\"])(this.calendarMonthWeeks.slice(0, -1)));\n    } else if (monthTransition === NEXT_TRANSITION) {\n      newMonth.add(1, 'month');\n      if (onNextMonthClick) onNextMonthClick(newMonth);\n\n      var _newInvisibleMonth = newMonth.clone().add(numberOfMonths, 'month');\n\n      var _numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks[\"default\"])(_newInvisibleMonth, firstDayOfWeek);\n\n      this.calendarMonthWeeks = [].concat((0, _toConsumableArray2[\"default\"])(this.calendarMonthWeeks.slice(1)), [_numberOfWeeks]);\n    } else if (monthTransition === MONTH_SELECTION_TRANSITION) {\n      if (onMonthChange) onMonthChange(newMonth);\n    } else if (monthTransition === YEAR_SELECTION_TRANSITION) {\n      if (onYearChange) onYearChange(newMonth);\n    }\n\n    var newFocusedDate = null;\n\n    if (nextFocusedDate) {\n      newFocusedDate = nextFocusedDate;\n    } else if (!focusedDate && !withMouseInteractions) {\n      newFocusedDate = this.getFocusedDay(newMonth);\n    }\n\n    this.setState({\n      currentMonth: newMonth,\n      monthTransition: null,\n      translationValue: isRTL && this.isHorizontal() ? -calendarMonthWidth : 0,\n      nextFocusedDate: null,\n      focusedDate: newFocusedDate\n    }, function () {\n      // we don't want to focus on the relevant calendar day after a month transition\n      // if the user is navigating around using a mouse\n      if (withMouseInteractions) {\n        var activeElement = (0, _getActiveElement[\"default\"])();\n\n        if (activeElement && activeElement !== document.body && _this4.container.contains(activeElement) && activeElement.blur) {\n          activeElement.blur();\n        }\n      }\n    });\n  };\n\n  _proto.adjustDayPickerHeight = function adjustDayPickerHeight(newMonthHeight) {\n    var _this5 = this;\n\n    var monthHeight = newMonthHeight + MONTH_PADDING;\n\n    if (monthHeight !== this.calendarMonthGridHeight) {\n      this.transitionContainer.style.height = \"\".concat(monthHeight, \"px\");\n\n      if (!this.calendarMonthGridHeight) {\n        this.setCalendarMonthGridHeightTimeout = setTimeout(function () {\n          _this5.setState({\n            hasSetHeight: true\n          });\n        }, 0);\n      }\n\n      this.calendarMonthGridHeight = monthHeight;\n    }\n  };\n\n  _proto.calculateAndSetDayPickerHeight = function calculateAndSetDayPickerHeight() {\n    var _this$props9 = this.props,\n        daySize = _this$props9.daySize,\n        numberOfMonths = _this$props9.numberOfMonths;\n    var monthTitleHeight = this.state.monthTitleHeight;\n    var visibleCalendarWeeks = this.calendarMonthWeeks.slice(1, numberOfMonths + 1);\n    var calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat((0, _toConsumableArray2[\"default\"])(visibleCalendarWeeks))) * (daySize - 1);\n    var newMonthHeight = monthTitleHeight + calendarMonthWeeksHeight + 1;\n\n    if (this.isHorizontal()) {\n      this.adjustDayPickerHeight(newMonthHeight);\n    }\n  };\n\n  _proto.openKeyboardShortcutsPanel = function openKeyboardShortcutsPanel(onCloseCallBack) {\n    this.setState({\n      showKeyboardShortcuts: true,\n      onKeyboardShortcutsPanelClose: onCloseCallBack\n    });\n  };\n\n  _proto.closeKeyboardShortcutsPanel = function closeKeyboardShortcutsPanel() {\n    var onKeyboardShortcutsPanelClose = this.state.onKeyboardShortcutsPanelClose;\n\n    if (onKeyboardShortcutsPanelClose) {\n      onKeyboardShortcutsPanelClose();\n    }\n\n    this.setState({\n      onKeyboardShortcutsPanelClose: null,\n      showKeyboardShortcuts: false\n    });\n  };\n\n  _proto.renderNavigation = function renderNavigation(navDirection) {\n    var _this$props10 = this.props,\n        dayPickerNavigationInlineStyles = _this$props10.dayPickerNavigationInlineStyles,\n        disablePrev = _this$props10.disablePrev,\n        disableNext = _this$props10.disableNext,\n        navPosition = _this$props10.navPosition,\n        navPrev = _this$props10.navPrev,\n        navNext = _this$props10.navNext,\n        noNavButtons = _this$props10.noNavButtons,\n        noNavNextButton = _this$props10.noNavNextButton,\n        noNavPrevButton = _this$props10.noNavPrevButton,\n        orientation = _this$props10.orientation,\n        phrases = _this$props10.phrases,\n        renderNavPrevButton = _this$props10.renderNavPrevButton,\n        renderNavNextButton = _this$props10.renderNavNextButton,\n        isRTL = _this$props10.isRTL;\n\n    if (noNavButtons) {\n      return null;\n    }\n\n    var onPrevMonthClick = orientation === _constants.VERTICAL_SCROLLABLE ? this.getPrevScrollableMonths : this.onPrevMonthClick;\n    var onNextMonthClick = orientation === _constants.VERTICAL_SCROLLABLE ? this.getNextScrollableMonths : this.onNextMonthClick;\n    return _react[\"default\"].createElement(_DayPickerNavigation[\"default\"], {\n      disablePrev: disablePrev,\n      disableNext: disableNext,\n      inlineStyles: dayPickerNavigationInlineStyles,\n      onPrevMonthClick: onPrevMonthClick,\n      onNextMonthClick: onNextMonthClick,\n      navPosition: navPosition,\n      navPrev: navPrev,\n      navNext: navNext,\n      renderNavPrevButton: renderNavPrevButton,\n      renderNavNextButton: renderNavNextButton,\n      orientation: orientation,\n      phrases: phrases,\n      isRTL: isRTL,\n      showNavNextButton: !(noNavNextButton || orientation === _constants.VERTICAL_SCROLLABLE && navDirection === PREV_NAV),\n      showNavPrevButton: !(noNavPrevButton || orientation === _constants.VERTICAL_SCROLLABLE && navDirection === NEXT_NAV)\n    });\n  };\n\n  _proto.renderWeekHeader = function renderWeekHeader(index) {\n    var _this$props11 = this.props,\n        daySize = _this$props11.daySize,\n        horizontalMonthPadding = _this$props11.horizontalMonthPadding,\n        orientation = _this$props11.orientation,\n        renderWeekHeaderElement = _this$props11.renderWeekHeaderElement,\n        styles = _this$props11.styles;\n    var calendarMonthWidth = this.state.calendarMonthWidth;\n    var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;\n    var horizontalStyle = {\n      left: index * calendarMonthWidth\n    };\n    var verticalStyle = {\n      marginLeft: -calendarMonthWidth / 2\n    };\n    var weekHeaderStyle = {}; // no styles applied to the vertical-scrollable orientation\n\n    if (this.isHorizontal()) {\n      weekHeaderStyle = horizontalStyle;\n    } else if (this.isVertical() && !verticalScrollable) {\n      weekHeaderStyle = verticalStyle;\n    }\n\n    var weekHeaders = this.getWeekHeaders();\n    var header = weekHeaders.map(function (day) {\n      return _react[\"default\"].createElement(\"li\", (0, _extends2[\"default\"])({\n        key: day\n      }, (0, _reactWithStyles.css)(styles.DayPicker_weekHeader_li, {\n        width: daySize\n      })), renderWeekHeaderElement ? renderWeekHeaderElement(day) : _react[\"default\"].createElement(\"small\", null, day));\n    });\n    return _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({}, (0, _reactWithStyles.css)(styles.DayPicker_weekHeader, this.isVertical() && styles.DayPicker_weekHeader__vertical, verticalScrollable && styles.DayPicker_weekHeader__verticalScrollable, weekHeaderStyle, {\n      padding: \"0 \".concat(horizontalMonthPadding, \"px\")\n    }), {\n      key: \"week-\".concat(index)\n    }), _react[\"default\"].createElement(\"ul\", (0, _reactWithStyles.css)(styles.DayPicker_weekHeader_ul), header));\n  };\n\n  _proto.render = function render() {\n    var _this6 = this;\n\n    var _this$state8 = this.state,\n        calendarMonthWidth = _this$state8.calendarMonthWidth,\n        currentMonth = _this$state8.currentMonth,\n        monthTransition = _this$state8.monthTransition,\n        translationValue = _this$state8.translationValue,\n        scrollableMonthMultiple = _this$state8.scrollableMonthMultiple,\n        focusedDate = _this$state8.focusedDate,\n        showKeyboardShortcuts = _this$state8.showKeyboardShortcuts,\n        isTouch = _this$state8.isTouchDevice,\n        hasSetHeight = _this$state8.hasSetHeight,\n        calendarInfoWidth = _this$state8.calendarInfoWidth,\n        monthTitleHeight = _this$state8.monthTitleHeight;\n    var _this$props12 = this.props,\n        enableOutsideDays = _this$props12.enableOutsideDays,\n        numberOfMonths = _this$props12.numberOfMonths,\n        orientation = _this$props12.orientation,\n        modifiers = _this$props12.modifiers,\n        withPortal = _this$props12.withPortal,\n        onDayClick = _this$props12.onDayClick,\n        onDayMouseEnter = _this$props12.onDayMouseEnter,\n        onDayMouseLeave = _this$props12.onDayMouseLeave,\n        firstDayOfWeek = _this$props12.firstDayOfWeek,\n        renderMonthText = _this$props12.renderMonthText,\n        renderCalendarDay = _this$props12.renderCalendarDay,\n        renderDayContents = _this$props12.renderDayContents,\n        renderCalendarInfo = _this$props12.renderCalendarInfo,\n        renderMonthElement = _this$props12.renderMonthElement,\n        renderKeyboardShortcutsButton = _this$props12.renderKeyboardShortcutsButton,\n        renderKeyboardShortcutsPanel = _this$props12.renderKeyboardShortcutsPanel,\n        calendarInfoPosition = _this$props12.calendarInfoPosition,\n        hideKeyboardShortcutsPanel = _this$props12.hideKeyboardShortcutsPanel,\n        onOutsideClick = _this$props12.onOutsideClick,\n        monthFormat = _this$props12.monthFormat,\n        daySize = _this$props12.daySize,\n        isFocused = _this$props12.isFocused,\n        isRTL = _this$props12.isRTL,\n        styles = _this$props12.styles,\n        theme = _this$props12.theme,\n        phrases = _this$props12.phrases,\n        verticalHeight = _this$props12.verticalHeight,\n        dayAriaLabelFormat = _this$props12.dayAriaLabelFormat,\n        noBorder = _this$props12.noBorder,\n        transitionDuration = _this$props12.transitionDuration,\n        verticalBorderSpacing = _this$props12.verticalBorderSpacing,\n        horizontalMonthPadding = _this$props12.horizontalMonthPadding,\n        navPosition = _this$props12.navPosition;\n    var dayPickerHorizontalPadding = theme.reactDates.spacing.dayPickerHorizontalPadding;\n    var isHorizontal = this.isHorizontal();\n    var numOfWeekHeaders = this.isVertical() ? 1 : numberOfMonths;\n    var weekHeaders = [];\n\n    for (var i = 0; i < numOfWeekHeaders; i += 1) {\n      weekHeaders.push(this.renderWeekHeader(i));\n    }\n\n    var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;\n    var height;\n\n    if (isHorizontal) {\n      height = this.calendarMonthGridHeight;\n    } else if (this.isVertical() && !verticalScrollable && !withPortal) {\n      // If the user doesn't set a desired height,\n      // we default back to this kind of made-up value that generally looks good\n      height = verticalHeight || 1.75 * calendarMonthWidth;\n    }\n\n    var isCalendarMonthGridAnimating = monthTransition !== null;\n    var shouldFocusDate = !isCalendarMonthGridAnimating && isFocused;\n    var keyboardShortcutButtonLocation = _DayPickerKeyboardShortcuts.BOTTOM_RIGHT;\n\n    if (this.isVertical()) {\n      keyboardShortcutButtonLocation = withPortal ? _DayPickerKeyboardShortcuts.TOP_LEFT : _DayPickerKeyboardShortcuts.TOP_RIGHT;\n    }\n\n    var shouldAnimateHeight = isHorizontal && hasSetHeight;\n    var calendarInfoPositionTop = calendarInfoPosition === _constants.INFO_POSITION_TOP;\n    var calendarInfoPositionBottom = calendarInfoPosition === _constants.INFO_POSITION_BOTTOM;\n    var calendarInfoPositionBefore = calendarInfoPosition === _constants.INFO_POSITION_BEFORE;\n    var calendarInfoPositionAfter = calendarInfoPosition === _constants.INFO_POSITION_AFTER;\n    var calendarInfoIsInline = calendarInfoPositionBefore || calendarInfoPositionAfter;\n\n    var calendarInfo = renderCalendarInfo && _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({\n      ref: this.setCalendarInfoRef\n    }, (0, _reactWithStyles.css)(calendarInfoIsInline && styles.DayPicker_calendarInfo__horizontal)), renderCalendarInfo());\n\n    var calendarInfoPanelWidth = renderCalendarInfo && calendarInfoIsInline ? calendarInfoWidth : 0;\n    var firstVisibleMonthIndex = this.getFirstVisibleIndex();\n    var wrapperHorizontalWidth = calendarMonthWidth * numberOfMonths + 2 * dayPickerHorizontalPadding; // Adding `1px` because of whitespace between 2 inline-block\n\n    var fullHorizontalWidth = wrapperHorizontalWidth + calendarInfoPanelWidth + 1;\n    var transitionContainerStyle = {\n      width: isHorizontal && wrapperHorizontalWidth,\n      height: height\n    };\n    var dayPickerWrapperStyle = {\n      width: isHorizontal && wrapperHorizontalWidth\n    };\n    var dayPickerStyle = {\n      width: isHorizontal && fullHorizontalWidth,\n      // These values are to center the datepicker (approximately) on the page\n      marginLeft: isHorizontal && withPortal ? -fullHorizontalWidth / 2 : null,\n      marginTop: isHorizontal && withPortal ? -calendarMonthWidth / 2 : null\n    };\n    return _react[\"default\"].createElement(\"div\", (0, _reactWithStyles.css)(styles.DayPicker, isHorizontal && styles.DayPicker__horizontal, verticalScrollable && styles.DayPicker__verticalScrollable, isHorizontal && withPortal && styles.DayPicker_portal__horizontal, this.isVertical() && withPortal && styles.DayPicker_portal__vertical, dayPickerStyle, !monthTitleHeight && styles.DayPicker__hidden, !noBorder && styles.DayPicker__withBorder), _react[\"default\"].createElement(_reactOutsideClickHandler[\"default\"], {\n      onOutsideClick: onOutsideClick\n    }, (calendarInfoPositionTop || calendarInfoPositionBefore) && calendarInfo, _react[\"default\"].createElement(\"div\", (0, _reactWithStyles.css)(dayPickerWrapperStyle, calendarInfoIsInline && isHorizontal && styles.DayPicker_wrapper__horizontal), _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({}, (0, _reactWithStyles.css)(styles.DayPicker_weekHeaders, isHorizontal && styles.DayPicker_weekHeaders__horizontal), {\n      \"aria-hidden\": \"true\",\n      role: \"presentation\"\n    }), weekHeaders), _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({}, (0, _reactWithStyles.css)(styles.DayPicker_focusRegion), {\n      ref: this.setContainerRef,\n      onClick: function onClick(e) {\n        e.stopPropagation();\n      },\n      onKeyDown: this.onKeyDown,\n      onMouseUp: function onMouseUp() {\n        _this6.setState({\n          withMouseInteractions: true\n        });\n      },\n      tabIndex: -1,\n      role: \"application\",\n      \"aria-roledescription\": phrases.roleDescription,\n      \"aria-label\": phrases.calendarLabel\n    }), !verticalScrollable && navPosition === _constants.NAV_POSITION_TOP && this.renderNavigation(), _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({}, (0, _reactWithStyles.css)(styles.DayPicker_transitionContainer, shouldAnimateHeight && styles.DayPicker_transitionContainer__horizontal, this.isVertical() && styles.DayPicker_transitionContainer__vertical, verticalScrollable && styles.DayPicker_transitionContainer__verticalScrollable, transitionContainerStyle), {\n      ref: this.setTransitionContainerRef\n    }), verticalScrollable && this.renderNavigation(PREV_NAV), _react[\"default\"].createElement(_CalendarMonthGrid[\"default\"], {\n      setMonthTitleHeight: !monthTitleHeight ? this.setMonthTitleHeight : undefined,\n      translationValue: translationValue,\n      enableOutsideDays: enableOutsideDays,\n      firstVisibleMonthIndex: firstVisibleMonthIndex,\n      initialMonth: currentMonth,\n      isAnimating: isCalendarMonthGridAnimating,\n      modifiers: modifiers,\n      orientation: orientation,\n      numberOfMonths: numberOfMonths * scrollableMonthMultiple,\n      onDayClick: onDayClick,\n      onDayMouseEnter: onDayMouseEnter,\n      onDayMouseLeave: onDayMouseLeave,\n      onMonthChange: this.onMonthChange,\n      onYearChange: this.onYearChange,\n      renderMonthText: renderMonthText,\n      renderCalendarDay: renderCalendarDay,\n      renderDayContents: renderDayContents,\n      renderMonthElement: renderMonthElement,\n      onMonthTransitionEnd: this.updateStateAfterMonthTransition,\n      monthFormat: monthFormat,\n      daySize: daySize,\n      firstDayOfWeek: firstDayOfWeek,\n      isFocused: shouldFocusDate,\n      focusedDate: focusedDate,\n      phrases: phrases,\n      isRTL: isRTL,\n      dayAriaLabelFormat: dayAriaLabelFormat,\n      transitionDuration: transitionDuration,\n      verticalBorderSpacing: verticalBorderSpacing,\n      horizontalMonthPadding: horizontalMonthPadding\n    }), verticalScrollable && this.renderNavigation(NEXT_NAV)), !verticalScrollable && navPosition === _constants.NAV_POSITION_BOTTOM && this.renderNavigation(), !isTouch && !hideKeyboardShortcutsPanel && _react[\"default\"].createElement(_DayPickerKeyboardShortcuts[\"default\"], {\n      block: this.isVertical() && !withPortal,\n      buttonLocation: keyboardShortcutButtonLocation,\n      showKeyboardShortcutsPanel: showKeyboardShortcuts,\n      openKeyboardShortcutsPanel: this.openKeyboardShortcutsPanel,\n      closeKeyboardShortcutsPanel: this.closeKeyboardShortcutsPanel,\n      phrases: phrases,\n      renderKeyboardShortcutsButton: renderKeyboardShortcutsButton,\n      renderKeyboardShortcutsPanel: renderKeyboardShortcutsPanel\n    }))), (calendarInfoPositionBottom || calendarInfoPositionAfter) && calendarInfo));\n  };\n\n  return DayPicker;\n}(_react[\"default\"].PureComponent || _react[\"default\"].Component);\n\nexports.PureDayPicker = DayPicker;\nDayPicker.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nDayPicker.defaultProps = defaultProps;\n\nvar _default = (0, _reactWithStyles.withStyles)(function (_ref4) {\n  var _ref4$reactDates = _ref4.reactDates,\n      color = _ref4$reactDates.color,\n      font = _ref4$reactDates.font,\n      noScrollBarOnVerticalScrollable = _ref4$reactDates.noScrollBarOnVerticalScrollable,\n      spacing = _ref4$reactDates.spacing,\n      zIndex = _ref4$reactDates.zIndex;\n  return {\n    DayPicker: {\n      background: color.background,\n      position: 'relative',\n      textAlign: (0, _noflip[\"default\"])('left')\n    },\n    DayPicker__horizontal: {\n      background: color.background\n    },\n    DayPicker__verticalScrollable: {\n      height: '100%'\n    },\n    DayPicker__hidden: {\n      visibility: 'hidden'\n    },\n    DayPicker__withBorder: {\n      boxShadow: (0, _noflip[\"default\"])('0 2px 6px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.07)'),\n      borderRadius: 3\n    },\n    DayPicker_portal__horizontal: {\n      boxShadow: 'none',\n      position: 'absolute',\n      left: (0, _noflip[\"default\"])('50%'),\n      top: '50%'\n    },\n    DayPicker_portal__vertical: {\n      position: 'initial'\n    },\n    DayPicker_focusRegion: {\n      outline: 'none'\n    },\n    DayPicker_calendarInfo__horizontal: {\n      display: 'inline-block',\n      verticalAlign: 'top'\n    },\n    DayPicker_wrapper__horizontal: {\n      display: 'inline-block',\n      verticalAlign: 'top'\n    },\n    DayPicker_weekHeaders: {\n      position: 'relative'\n    },\n    DayPicker_weekHeaders__horizontal: {\n      marginLeft: (0, _noflip[\"default\"])(spacing.dayPickerHorizontalPadding)\n    },\n    DayPicker_weekHeader: {\n      color: color.placeholderText,\n      position: 'absolute',\n      top: 62,\n      zIndex: zIndex + 2,\n      textAlign: (0, _noflip[\"default\"])('left')\n    },\n    DayPicker_weekHeader__vertical: {\n      left: (0, _noflip[\"default\"])('50%')\n    },\n    DayPicker_weekHeader__verticalScrollable: {\n      top: 0,\n      display: 'table-row',\n      borderBottom: \"1px solid \".concat(color.core.border),\n      background: color.background,\n      marginLeft: (0, _noflip[\"default\"])(0),\n      left: (0, _noflip[\"default\"])(0),\n      width: '100%',\n      textAlign: 'center'\n    },\n    DayPicker_weekHeader_ul: {\n      listStyle: 'none',\n      margin: '1px 0',\n      paddingLeft: (0, _noflip[\"default\"])(0),\n      paddingRight: (0, _noflip[\"default\"])(0),\n      fontSize: font.size\n    },\n    DayPicker_weekHeader_li: {\n      display: 'inline-block',\n      textAlign: 'center'\n    },\n    DayPicker_transitionContainer: {\n      position: 'relative',\n      overflow: 'hidden',\n      borderRadius: 3\n    },\n    DayPicker_transitionContainer__horizontal: {\n      transition: 'height 0.2s ease-in-out'\n    },\n    DayPicker_transitionContainer__vertical: {\n      width: '100%'\n    },\n    DayPicker_transitionContainer__verticalScrollable: _objectSpread({\n      paddingTop: 20,\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: (0, _noflip[\"default\"])(0),\n      left: (0, _noflip[\"default\"])(0),\n      overflowY: 'scroll'\n    }, noScrollBarOnVerticalScrollable && {\n      '-webkitOverflowScrolling': 'touch',\n      '::-webkit-scrollbar': {\n        '-webkit-appearance': 'none',\n        display: 'none'\n      }\n    })\n  };\n}, {\n  pureComponent: typeof _react[\"default\"].PureComponent !== 'undefined'\n})(DayPicker);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}