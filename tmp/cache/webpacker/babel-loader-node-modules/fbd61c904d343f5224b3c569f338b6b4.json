{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/phong/rails/imp/app/javascript/staff/components/profile/changeAvatar/modalChangeAvatar.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport { Modal, ModalHeader, ModalBody, Input, ModalFooter, Button } from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeAvatarUser } from '../../../actions/account';\n\nvar ChangeAvatar = function ChangeAvatar(props) {\n  var modal = props.modal,\n      toggle = props.toggle;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      file = _useState2[0],\n      changeFile = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var handleChange = function handleChange() {\n    dispatch(changeAvatarUser(file));\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Change Avatar\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    onChange: function onChange(e) {\n      return changeFile(e.target.files[0]);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"success\",\n    onClick: function onClick() {\n      return handleChange();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    onClick: toggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\n\nexport default ChangeAvatar;","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/staff/components/profile/changeAvatar/modalChangeAvatar.js"],"names":["React","useState","Modal","ModalHeader","ModalBody","Input","ModalFooter","Button","useDispatch","changeAvatarUser","ChangeAvatar","props","modal","toggle","file","changeFile","dispatch","handleChange","e","target","files"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,KAAxC,EAA+CC,WAA/C,EAA4DC,MAA5D,QAA0E,YAA1E;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,MACvBC,KADuB,GACND,KADM,CACvBC,KADuB;AAAA,MAChBC,MADgB,GACNF,KADM,CAChBE,MADgB;;AAAA,kBAEHZ,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,MAEvBa,IAFuB;AAAA,MAEjBC,UAFiB;;AAI9B,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,MAAMS,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBD,IAAAA,QAAQ,CAACP,gBAAgB,CAACK,IAAD,CAAjB,CAAR;AACD,GAFD;;AAIA,sBACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEF,KAAf;AAAsB,IAAA,MAAM,EAAEC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAEA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAIE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,kBAAAK,CAAC;AAAA,aAAIH,UAAU,CAACG,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAAd;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,eAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAwB,IAAA,OAAO,EAAE;AAAA,aAAMH,YAAY,EAAlB;AAAA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAA0B,IAAA,OAAO,EAAEJ,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAPF,CADF;AAcD,CAvBD;;AAyBA,eAAeH,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Modal, ModalHeader, ModalBody, Input, ModalFooter, Button } from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeAvatarUser } from '../../../actions/account';\n\nconst ChangeAvatar = (props) => {\n  const {modal, toggle} = props;\n  const [file, changeFile] = useState('');\n\n  const dispatch = useDispatch();\n  const handleChange = () => {\n    dispatch(changeAvatarUser(file));\n  }\n\n  return(\n    <Modal isOpen={modal} toggle={toggle}>\n      <ModalHeader toggle={toggle} >\n        Change Avatar\n      </ModalHeader>\n      <ModalBody>\n        <Input type=\"file\" onChange={e => changeFile(e.target.files[0])} />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"success\" onClick={() => handleChange()} >Save</Button>\n        <Button color=\"secondary\" onClick={toggle} >Cancel</Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default ChangeAvatar;\n"]},"metadata":{},"sourceType":"module"}