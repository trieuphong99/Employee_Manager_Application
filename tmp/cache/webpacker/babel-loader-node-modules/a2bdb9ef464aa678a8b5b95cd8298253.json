{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _arrayPrototype = _interopRequireDefault(require(\"array.prototype.flat\"));\n\nvar _globalCache = _interopRequireDefault(require(\"global-cache\"));\n\nvar _constants = require(\"./utils/constants\");\n\nvar _getClassName = _interopRequireDefault(require(\"./utils/getClassName\"));\n\nvar _separateStyles2 = _interopRequireDefault(require(\"./utils/separateStyles\"));\n/**\n * Function required as part of the react-with-styles interface. Parses the styles provided by\n * react-with-styles to produce class names based on the style name and optionally the namespace if\n * available.\n *\n * stylesObject {Object} The styles object passed to withStyles.\n *\n * Return an object mapping style names to class names.\n */\n\n\nfunction create(stylesObject) {\n  var stylesToClasses = {};\n  var styleNames = Object.keys(stylesObject);\n  var sharedState = _globalCache[\"default\"].get(_constants.GLOBAL_CACHE_KEY) || {};\n  var _sharedState$namespac = sharedState.namespace,\n      namespace = _sharedState$namespac === void 0 ? '' : _sharedState$namespac;\n  styleNames.forEach(function (styleName) {\n    var className = (0, _getClassName[\"default\"])(namespace, styleName);\n    stylesToClasses[styleName] = className;\n  });\n  return stylesToClasses;\n}\n/**\n * Process styles to be consumed by a component.\n *\n * stylesArray {Array} Array of the following: values returned by create, plain JavaScript objects\n * representing inline styles, or arrays thereof.\n *\n * Return an object with optional className and style properties to be spread on a component.\n */\n\n\nfunction resolve(stylesArray) {\n  var flattenedStyles = (0, _arrayPrototype[\"default\"])(stylesArray, Infinity);\n\n  var _separateStyles = (0, _separateStyles2[\"default\"])(flattenedStyles),\n      classNames = _separateStyles.classNames,\n      hasInlineStyles = _separateStyles.hasInlineStyles,\n      inlineStyles = _separateStyles.inlineStyles;\n\n  var specificClassNames = classNames.map(function (name, index) {\n    return \"\".concat(name, \" \").concat(name, \"_\").concat(index + 1);\n  });\n  var className = specificClassNames.join(' ');\n  var result = {\n    className: className\n  };\n  if (hasInlineStyles) result.style = inlineStyles;\n  return result;\n}\n\nvar _default = {\n  create: create,\n  resolve: resolve\n};\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}