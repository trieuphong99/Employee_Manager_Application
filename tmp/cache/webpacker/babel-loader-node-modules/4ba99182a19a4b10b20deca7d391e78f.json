{"ast":null,"code":"import 'focus-options-polyfill';\nimport React, { memo, useRef, useState, useCallback, useEffect, StrictMode } from 'react';\nimport { createPortal } from 'react-dom';\nimport useEvent from 'react-use/lib/useEvent';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport 'tslib';\nimport { pseudoParentEl, getModalOverlayStyle, getModalContentStyle } from './helpers.js';\nimport 'react-use/lib/usePrevious';\nexport { default as Controlled } from './Controlled.js';\n\nvar UncontrolledActivated = function UncontrolledActivated(_a) {\n  var children = _a.children,\n      _b = _a.closeText,\n      closeText = _b === void 0 ? 'Unzoom Image' : _b,\n      onUnload = _a.onUnload,\n      onLoad = _a.onLoad,\n      _c = _a.overlayBgColorEnd,\n      overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c,\n      _d = _a.overlayBgColorStart,\n      overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d,\n      parentRef = _a.parentRef,\n      _e = _a.portalEl,\n      portalEl = _e === void 0 ? document.body : _e,\n      _f = _a.scrollableEl,\n      scrollableEl = _f === void 0 ? window : _f,\n      _g = _a.transitionDuration,\n      transitionDuration = _g === void 0 ? 300 : _g,\n      _h = _a.zoomMargin,\n      zoomMargin = _h === void 0 ? 0 : _h,\n      _j = _a.zoomZindex,\n      zoomZindex = _j === void 0 ? 2147483647 : _j;\n  var btnRef = useRef(null);\n\n  var _k = useState(0),\n      forceUpdate = _k[1];\n\n  var _l = useState(false),\n      isLoaded = _l[0],\n      setIsLoaded = _l[1];\n\n  var _m = useState(false),\n      isUnloading = _m[0],\n      setIsUnloading = _m[1];\n\n  var _o = useWindowSize(),\n      innerWidth = _o.width,\n      innerHeight = _o.height; // on click, begin unloading\n\n\n  var handleClick = useCallback(function (e) {\n    e.preventDefault();\n    setIsUnloading(true);\n  }, []); // on escape, begin unloading\n\n  var handleKeyDown = useCallback(function (e) {\n    if (e.key === 'Escape' || e.keyCode === 27) {\n      e.stopPropagation();\n      setIsUnloading(true);\n    }\n  }, []);\n  var handleScroll = useCallback(function () {\n    forceUpdate(function (n) {\n      return n + 1;\n    });\n\n    if (!isUnloading) {\n      setIsUnloading(true);\n    }\n  }, [isUnloading]); // listen for keydown on the document\n\n  useEvent('keydown', handleKeyDown, document); // listen for scroll and close\n\n  useEvent('scroll', handleScroll, scrollableEl); // set loaded on mount and focus\n\n  useEffect(function () {\n    setIsLoaded(true);\n    onLoad();\n\n    if (btnRef.current) {\n      btnRef.current.focus({\n        preventScroll: true\n      });\n    }\n  }, [onLoad]); // if unloading, tell parent that we're all done here after Nms\n\n  useEffect(function () {\n    var unloadTimeout = isUnloading ? setTimeout(onUnload, transitionDuration) : null;\n    return function () {\n      if (unloadTimeout) {\n        clearTimeout(unloadTimeout);\n      }\n    };\n  }, [isUnloading, onUnload, transitionDuration]); // use parent element or fake one if it's not yet loaded\n\n  var parentEl = parentRef.current || pseudoParentEl; // get parent item's dimensions\n\n  var _p = parentEl.getBoundingClientRect(),\n      height = _p.height,\n      left = _p.left,\n      top = _p.top,\n      width = _p.width;\n\n  var overlayStyle = getModalOverlayStyle({\n    isLoaded: isLoaded,\n    isUnloading: isUnloading,\n    overlayBgColorEnd: overlayBgColorEnd,\n    overlayBgColorStart: overlayBgColorStart,\n    transitionDuration: transitionDuration,\n    zoomZindex: zoomZindex\n  });\n  var contentStyle = getModalContentStyle({\n    height: height,\n    isLoaded: isLoaded,\n    innerHeight: innerHeight,\n    innerWidth: innerWidth,\n    isUnloading: isUnloading,\n    left: left,\n    originalTransform: parentEl.style.transform,\n    top: top,\n    transitionDuration: transitionDuration,\n    width: width,\n    zoomMargin: zoomMargin\n  });\n  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-modal\": true,\n    \"data-rmiz-overlay\": true,\n    role: \"dialog\",\n    style: overlayStyle\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-rmiz-modal-content\": true,\n    style: contentStyle\n  }, children), /*#__PURE__*/React.createElement(\"button\", {\n    \"aria-label\": closeText,\n    \"data-rmiz-btn-close\": true,\n    onClick: handleClick,\n    ref: btnRef\n  })), portalEl);\n};\n\nvar UncontrolledActivated$1 = /*#__PURE__*/memo(UncontrolledActivated);\n\nvar Uncontrolled = function Uncontrolled(_a) {\n  var children = _a.children,\n      _b = _a.closeText,\n      closeText = _b === void 0 ? 'Unzoom image' : _b,\n      _c = _a.overlayBgColorEnd,\n      overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c,\n      _d = _a.overlayBgColorStart,\n      overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d,\n      portalEl = _a.portalEl,\n      _e = _a.openText,\n      openText = _e === void 0 ? 'Zoom image' : _e,\n      scrollableEl = _a.scrollableEl,\n      _f = _a.transitionDuration,\n      transitionDuration = _f === void 0 ? 300 : _f,\n      _g = _a.wrapElement,\n      WrapElement = _g === void 0 ? 'div' : _g,\n      wrapStyle = _a.wrapStyle,\n      _h = _a.zoomMargin,\n      zoomMargin = _h === void 0 ? 0 : _h,\n      _j = _a.zoomZindex,\n      zoomZindex = _j === void 0 ? 2147483647 : _j;\n\n  var _k = useState(false),\n      isActive = _k[0],\n      setIsActive = _k[1];\n\n  var _l = useState(false),\n      isChildLoaded = _l[0],\n      setIsChildLoaded = _l[1];\n\n  var wrapRef = useRef(null);\n  var btnRef = useRef(null);\n  var handleClickTrigger = useCallback(function (e) {\n    if (!isActive) {\n      e.preventDefault();\n      setIsActive(true);\n    }\n  }, [isActive]);\n  var handleChildLoad = useCallback(function () {\n    setIsChildLoaded(true);\n  }, []);\n  var handleChildUnload = useCallback(function () {\n    setIsActive(false);\n    setIsChildLoaded(false);\n\n    if (btnRef.current) {\n      btnRef.current.focus({\n        preventScroll: true\n      });\n    }\n  }, []);\n  var isExpanded = isActive && isChildLoaded;\n  var wrapType = isExpanded ? 'hidden' : 'visible';\n  return /*#__PURE__*/React.createElement(StrictMode, null, /*#__PURE__*/React.createElement(WrapElement, {\n    \"data-rmiz-wrap\": wrapType,\n    ref: wrapRef,\n    style: wrapStyle\n  }, children, /*#__PURE__*/React.createElement(\"button\", {\n    \"aria-label\": openText,\n    \"data-rmiz-btn-open\": true,\n    onClick: handleClickTrigger,\n    ref: btnRef\n  }), typeof window !== 'undefined' && isActive && /*#__PURE__*/React.createElement(UncontrolledActivated$1, {\n    closeText: closeText,\n    onLoad: handleChildLoad,\n    onUnload: handleChildUnload,\n    overlayBgColorEnd: overlayBgColorEnd,\n    overlayBgColorStart: overlayBgColorStart,\n    parentRef: wrapRef,\n    portalEl: portalEl,\n    scrollableEl: scrollableEl,\n    transitionDuration: transitionDuration,\n    zoomMargin: zoomMargin,\n    zoomZindex: zoomZindex\n  }, children)));\n};\n\nvar Uncontrolled$1 = /*#__PURE__*/memo(Uncontrolled);\nexport default Uncontrolled$1;","map":null,"metadata":{},"sourceType":"module"}