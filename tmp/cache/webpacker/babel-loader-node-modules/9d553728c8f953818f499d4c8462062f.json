{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Animate from 'rc-animate';\nimport createChainedFunction from \"rc-util/es/createChainedFunction\";\nimport classnames from 'classnames';\nimport Notice from './Notice';\nimport _useNotification from './useNotification';\nvar seed = 0;\nvar now = Date.now();\n\nfunction getUuid() {\n  var id = seed;\n  seed += 1;\n  return \"rcNotification_\".concat(now, \"_\").concat(id);\n}\n\nvar Notification =\n/** @class */\nfunction () {\n  var Notification = /*#__PURE__*/function (_Component) {\n    _inherits(Notification, _Component);\n\n    var _super = _createSuper(Notification);\n\n    function Notification() {\n      var _this;\n\n      _classCallCheck(this, Notification);\n\n      _this = _super.apply(this, arguments);\n      _this.state = {\n        notices: []\n      };\n      _this.hookRefs = new Map();\n\n      _this.add = function (notice, holderCallback) {\n        // eslint-disable-next-line no-param-reassign\n        notice.key = notice.key || getUuid();\n        var key = notice.key;\n        var maxCount = _this.props.maxCount;\n\n        _this.setState(function (previousState) {\n          var notices = previousState.notices;\n          var noticeIndex = notices.map(function (v) {\n            return v.notice.key;\n          }).indexOf(key);\n          var updatedNotices = notices.concat();\n\n          if (noticeIndex !== -1) {\n            updatedNotices.splice(noticeIndex, 1, {\n              notice: notice,\n              holderCallback: holderCallback\n            });\n          } else {\n            if (maxCount && notices.length >= maxCount) {\n              // XXX, use key of first item to update new added (let React to move exsiting\n              // instead of remove and mount). Same key was used before for both a) external\n              // manual control and b) internal react 'key' prop , which is not that good.\n              // eslint-disable-next-line no-param-reassign\n              notice.updateKey = updatedNotices[0].notice.updateKey || updatedNotices[0].notice.key;\n              updatedNotices.shift();\n            }\n\n            updatedNotices.push({\n              notice: notice,\n              holderCallback: holderCallback\n            });\n          }\n\n          return {\n            notices: updatedNotices\n          };\n        });\n      };\n\n      _this.remove = function (key) {\n        _this.setState(function (previousState) {\n          return {\n            notices: previousState.notices.filter(function (_ref) {\n              var notice = _ref.notice;\n              return notice.key !== key;\n            })\n          };\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(Notification, [{\n      key: \"getTransitionName\",\n      value: function getTransitionName() {\n        var _this$props = this.props,\n            prefixCls = _this$props.prefixCls,\n            animation = _this$props.animation;\n        var transitionName = this.props.transitionName;\n\n        if (!transitionName && animation) {\n          transitionName = \"\".concat(prefixCls, \"-\").concat(animation);\n        }\n\n        return transitionName;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        var notices = this.state.notices;\n        var _this$props2 = this.props,\n            prefixCls = _this$props2.prefixCls,\n            className = _this$props2.className,\n            closeIcon = _this$props2.closeIcon,\n            style = _this$props2.style;\n        var noticeNodes = notices.map(function (_ref2, index) {\n          var notice = _ref2.notice,\n              holderCallback = _ref2.holderCallback;\n          var update = Boolean(index === notices.length - 1 && notice.updateKey);\n          var key = notice.updateKey ? notice.updateKey : notice.key;\n          var onClose = createChainedFunction(_this2.remove.bind(_this2, notice.key), notice.onClose);\n\n          var noticeProps = _objectSpread(_objectSpread(_objectSpread({\n            prefixCls: prefixCls,\n            closeIcon: closeIcon\n          }, notice), notice.props), {}, {\n            key: key,\n            update: update,\n            onClose: onClose,\n            onClick: notice.onClick,\n            children: notice.content\n          });\n\n          if (holderCallback) {\n            return React.createElement(\"div\", {\n              key: key,\n              className: \"\".concat(prefixCls, \"-hook-holder\"),\n              ref: function ref(div) {\n                if (typeof key === 'undefined') {\n                  return;\n                }\n\n                if (div) {\n                  _this2.hookRefs.set(key, div);\n\n                  holderCallback(div, noticeProps);\n                } else {\n                  _this2.hookRefs[\"delete\"](key);\n                }\n              }\n            });\n          }\n\n          return React.createElement(Notice, Object.assign({}, noticeProps));\n        });\n        return React.createElement(\"div\", {\n          className: classnames(prefixCls, className),\n          style: style\n        }, React.createElement(Animate, {\n          transitionName: this.getTransitionName()\n        }, noticeNodes));\n      }\n    }]);\n\n    return Notification;\n  }(Component);\n\n  Notification.defaultProps = {\n    prefixCls: 'rc-notification',\n    animation: 'fade',\n    style: {\n      top: 65,\n      left: '50%'\n    }\n  };\n  return Notification;\n}();\n\nNotification.newInstance = function newNotificationInstance(properties, callback) {\n  var _ref3 = properties || {},\n      getContainer = _ref3.getContainer,\n      props = _objectWithoutProperties(_ref3, [\"getContainer\"]);\n\n  var div = document.createElement('div');\n\n  if (getContainer) {\n    var root = getContainer();\n    root.appendChild(div);\n  } else {\n    document.body.appendChild(div);\n  }\n\n  var called = false;\n\n  function ref(notification) {\n    if (called) {\n      return;\n    }\n\n    called = true;\n    callback({\n      notice: function notice(noticeProps) {\n        notification.add(noticeProps);\n      },\n      removeNotice: function removeNotice(key) {\n        notification.remove(key);\n      },\n      component: notification,\n      destroy: function destroy() {\n        ReactDOM.unmountComponentAtNode(div);\n\n        if (div.parentNode) {\n          div.parentNode.removeChild(div);\n        }\n      },\n      // Hooks\n      useNotification: function useNotification() {\n        return _useNotification(notification);\n      }\n    });\n  } // Only used for test case usage\n\n\n  if (process.env.NODE_ENV === 'test' && properties.TEST_RENDER) {\n    properties.TEST_RENDER(React.createElement(Notification, Object.assign({}, props, {\n      ref: ref\n    })));\n    return;\n  }\n\n  ReactDOM.render(React.createElement(Notification, Object.assign({}, props, {\n    ref: ref\n  })), div);\n};\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}