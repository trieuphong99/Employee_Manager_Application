{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar callBound = require('../helpers/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $indexOf = callBound('Array.prototype.indexOf', true) || callBound('String.prototype.indexOf');\nvar $push = callBound('Array.prototype.push');\n\nvar Get = require('./Get');\n\nvar IsArray = require('./IsArray');\n\nvar ToLength = require('./ToLength');\n\nvar ToString = require('./ToString');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-createlistfromarraylike\n\n\nmodule.exports = function CreateListFromArrayLike(obj) {\n  var elementTypes = arguments.length > 1 ? arguments[1] : ['Undefined', 'Null', 'Boolean', 'String', 'Symbol', 'Number', 'Object'];\n\n  if (Type(obj) !== 'Object') {\n    throw new $TypeError('Assertion failed: `obj` must be an Object');\n  }\n\n  if (!IsArray(elementTypes)) {\n    throw new $TypeError('Assertion failed: `elementTypes`, if provided, must be an array');\n  }\n\n  var len = ToLength(Get(obj, 'length'));\n  var list = [];\n  var index = 0;\n\n  while (index < len) {\n    var indexName = ToString(index);\n    var next = Get(obj, indexName);\n    var nextType = Type(next);\n\n    if ($indexOf(elementTypes, nextType) < 0) {\n      throw new $TypeError('item type ' + nextType + ' is not a valid elementType');\n    }\n\n    $push(list, next);\n    index += 1;\n  }\n\n  return list;\n};","map":null,"metadata":{},"sourceType":"module"}