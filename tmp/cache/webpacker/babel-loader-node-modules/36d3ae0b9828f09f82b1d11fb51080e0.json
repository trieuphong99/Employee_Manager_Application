{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $gOPD = require('../helpers/getOwnPropertyDescriptor');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar isPropertyDescriptor = require('../helpers/isPropertyDescriptor');\n\nvar IsAccessorDescriptor = require('./IsAccessorDescriptor');\n\nvar IsDataDescriptor = require('./IsDataDescriptor');\n\nvar IsExtensible = require('./IsExtensible');\n\nvar IsPropertyKey = require('./IsPropertyKey');\n\nvar ToPropertyDescriptor = require('./ToPropertyDescriptor');\n\nvar SameValue = require('./SameValue');\n\nvar Type = require('./Type');\n\nvar ValidateAndApplyPropertyDescriptor = require('./ValidateAndApplyPropertyDescriptor'); // https://www.ecma-international.org/ecma-262/6.0/#sec-ordinarydefineownproperty\n\n\nmodule.exports = function OrdinaryDefineOwnProperty(O, P, Desc) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: O must be an Object');\n  }\n\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: P must be a Property Key');\n  }\n\n  if (!isPropertyDescriptor({\n    Type: Type,\n    IsDataDescriptor: IsDataDescriptor,\n    IsAccessorDescriptor: IsAccessorDescriptor\n  }, Desc)) {\n    throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n  }\n\n  if (!$gOPD) {\n    // ES3/IE 8 fallback\n    if (IsAccessorDescriptor(Desc)) {\n      throw new $SyntaxError('This environment does not support accessor property descriptors.');\n    }\n\n    var creatingNormalDataProperty = !(P in O) && Desc['[[Writable]]'] && Desc['[[Enumerable]]'] && Desc['[[Configurable]]'] && '[[Value]]' in Desc;\n    var settingExistingDataProperty = P in O && (!('[[Configurable]]' in Desc) || Desc['[[Configurable]]']) && (!('[[Enumerable]]' in Desc) || Desc['[[Enumerable]]']) && (!('[[Writable]]' in Desc) || Desc['[[Writable]]']) && '[[Value]]' in Desc;\n\n    if (creatingNormalDataProperty || settingExistingDataProperty) {\n      O[P] = Desc['[[Value]]']; // eslint-disable-line no-param-reassign\n\n      return SameValue(O[P], Desc['[[Value]]']);\n    }\n\n    throw new $SyntaxError('This environment does not support defining non-writable, non-enumerable, or non-configurable properties');\n  }\n\n  var desc = $gOPD(O, P);\n  var current = desc && ToPropertyDescriptor(desc);\n  var extensible = IsExtensible(O);\n  return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current);\n};","map":null,"metadata":{},"sourceType":"module"}