{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar assign = require('object.assign');\n\nvar isPropertyDescriptor = require('../helpers/isPropertyDescriptor');\n\nvar IsArray = require('./IsArray');\n\nvar IsAccessorDescriptor = require('./IsAccessorDescriptor');\n\nvar IsDataDescriptor = require('./IsDataDescriptor');\n\nvar OrdinaryDefineOwnProperty = require('./OrdinaryDefineOwnProperty');\n\nvar OrdinaryGetOwnProperty = require('./OrdinaryGetOwnProperty');\n\nvar ToNumber = require('./ToNumber');\n\nvar ToString = require('./ToString');\n\nvar ToUint32 = require('./ToUint32');\n\nvar Type = require('./Type'); // https://www.ecma-international.org/ecma-262/6.0/#sec-arraysetlength\n// eslint-disable-next-line max-statements, max-lines-per-function\n\n\nmodule.exports = function ArraySetLength(A, Desc) {\n  if (!IsArray(A)) {\n    throw new $TypeError('Assertion failed: A must be an Array');\n  }\n\n  if (!isPropertyDescriptor({\n    Type: Type,\n    IsDataDescriptor: IsDataDescriptor,\n    IsAccessorDescriptor: IsAccessorDescriptor\n  }, Desc)) {\n    throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n  }\n\n  if (!('[[Value]]' in Desc)) {\n    return OrdinaryDefineOwnProperty(A, 'length', Desc);\n  }\n\n  var newLenDesc = assign({}, Desc);\n  var newLen = ToUint32(Desc['[[Value]]']);\n  var numberLen = ToNumber(Desc['[[Value]]']);\n\n  if (newLen !== numberLen) {\n    throw new $RangeError('Invalid array length');\n  }\n\n  newLenDesc['[[Value]]'] = newLen;\n  var oldLenDesc = OrdinaryGetOwnProperty(A, 'length');\n\n  if (!IsDataDescriptor(oldLenDesc)) {\n    throw new $TypeError('Assertion failed: an array had a non-data descriptor on `length`');\n  }\n\n  var oldLen = oldLenDesc['[[Value]]'];\n\n  if (newLen >= oldLen) {\n    return OrdinaryDefineOwnProperty(A, 'length', newLenDesc);\n  }\n\n  if (!oldLenDesc['[[Writable]]']) {\n    return false;\n  }\n\n  var newWritable;\n\n  if (!('[[Writable]]' in newLenDesc) || newLenDesc['[[Writable]]']) {\n    newWritable = true;\n  } else {\n    newWritable = false;\n    newLenDesc['[[Writable]]'] = true;\n  }\n\n  var succeeded = OrdinaryDefineOwnProperty(A, 'length', newLenDesc);\n\n  if (!succeeded) {\n    return false;\n  }\n\n  while (newLen < oldLen) {\n    oldLen -= 1; // eslint-disable-next-line no-param-reassign\n\n    var deleteSucceeded = delete A[ToString(oldLen)];\n\n    if (!deleteSucceeded) {\n      newLenDesc['[[Value]]'] = oldLen + 1;\n\n      if (!newWritable) {\n        newLenDesc['[[Writable]]'] = false;\n        OrdinaryDefineOwnProperty(A, 'length', newLenDesc);\n        return false;\n      }\n    }\n  }\n\n  if (!newWritable) {\n    return OrdinaryDefineOwnProperty(A, 'length', {\n      '[[Writable]]': false\n    });\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}