{"ast":null,"code":"import 'focus-options-polyfill';\nimport React, { memo, useRef, useState, useCallback, useEffect, StrictMode } from 'react';\nimport { createPortal } from 'react-dom';\nimport useEvent from 'react-use/lib/useEvent';\nimport useWindowSize from 'react-use/lib/useWindowSize';\nimport 'tslib';\nimport { pseudoParentEl, getModalOverlayStyle, getModalContentStyle } from './helpers.js';\nimport usePrevious from 'react-use/lib/usePrevious';\n\nvar ControlledActivated = function ControlledActivated(_a) {\n  var children = _a.children,\n      _b = _a.closeText,\n      closeText = _b === void 0 ? 'Unzoom Image' : _b,\n      isActiveFromParent = _a.isActive,\n      onLoad = _a.onLoad,\n      onUnload = _a.onUnload,\n      onZoomChange = _a.onZoomChange,\n      _c = _a.overlayBgColorEnd,\n      overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c,\n      _d = _a.overlayBgColorStart,\n      overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d,\n      parentRef = _a.parentRef,\n      _e = _a.portalEl,\n      portalEl = _e === void 0 ? document.body : _e,\n      _f = _a.scrollableEl,\n      scrollableEl = _f === void 0 ? window : _f,\n      _g = _a.transitionDuration,\n      transitionDuration = _g === void 0 ? 300 : _g,\n      _h = _a.zoomMargin,\n      zoomMargin = _h === void 0 ? 0 : _h,\n      _j = _a.zoomZindex,\n      zoomZindex = _j === void 0 ? 2147483647 : _j;\n  var btnRef = useRef(null);\n\n  var _k = useState(0),\n      forceUpdate = _k[1];\n\n  var _l = useState(isActiveFromParent),\n      isActive = _l[0],\n      setIsActive = _l[1];\n\n  var _m = useState(false),\n      isLoaded = _m[0],\n      setIsLoaded = _m[1];\n\n  var _o = useState(false),\n      isUnloading = _o[0],\n      setIsUnloading = _o[1];\n\n  var prevIsActive = usePrevious(isActive);\n  var prevIsActiveFromParent = usePrevious(isActiveFromParent);\n  var prevIsLoaded = usePrevious(isLoaded);\n\n  var _p = useWindowSize(),\n      innerWidth = _p.width,\n      innerHeight = _p.height; // on click, tell caller it should zoom\n\n\n  var handleClick = useCallback(function (e) {\n    e.preventDefault();\n\n    if (onZoomChange) {\n      onZoomChange(false);\n    }\n  }, [onZoomChange]); // on escape, tell caller it should unzoom\n\n  var handleKeyDown = useCallback(function (e) {\n    if (isActive && (e.key === 'Escape' || e.keyCode === 27)) {\n      e.stopPropagation();\n\n      if (onZoomChange) {\n        onZoomChange(false);\n      }\n    }\n  }, [isActive, onZoomChange]);\n  var handleScroll = useCallback(function () {\n    forceUpdate(function (n) {\n      return n + 1;\n    });\n\n    if (!isUnloading && onZoomChange) {\n      onZoomChange(false);\n    }\n  }, [isUnloading, onZoomChange]); // listen for keydown on the document\n\n  useEvent('keydown', handleKeyDown, document); // listen for scroll and close\n\n  useEvent('scroll', handleScroll, scrollableEl); // set loaded on mount and focus\n\n  useEffect(function () {\n    if (!prevIsActive && isActive) {\n      setIsLoaded(true);\n\n      if (btnRef.current) {\n        btnRef.current.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [isActive, prevIsActive]);\n  useEffect(function () {\n    // when parent says to deactivate, begin unloading process\n    if (prevIsActiveFromParent && !isActiveFromParent) {\n      setIsUnloading(true);\n    } // when parent says to activate, begin active process\n\n\n    if (!prevIsActiveFromParent && isActiveFromParent) {\n      setIsActive(true);\n    }\n  }, [isActiveFromParent, prevIsActiveFromParent]); // if unloading, tell parent that we're all done here after Nms\n\n  useEffect(function () {\n    var unloadTimeout;\n\n    if (isUnloading) {\n      unloadTimeout = setTimeout(function () {\n        setIsLoaded(false);\n        setIsActive(false);\n        setIsUnloading(false);\n      }, transitionDuration);\n    }\n\n    return function () {\n      clearTimeout(unloadTimeout);\n    };\n  }, [isUnloading, transitionDuration]); // let parent know of changes to load status\n\n  useEffect(function () {\n    if (!prevIsLoaded && isLoaded) {\n      onLoad();\n    }\n\n    if (prevIsLoaded && !isLoaded) {\n      onUnload();\n    }\n  }, [isLoaded, onLoad, onUnload, prevIsLoaded]); // use parent element or fake one if it's not yet loaded\n\n  var parentEl = parentRef.current || pseudoParentEl; // get parent element's dimensions\n\n  var _q = parentEl.getBoundingClientRect(),\n      height = _q.height,\n      left = _q.left,\n      top = _q.top,\n      width = _q.width;\n\n  var overlayStyle = getModalOverlayStyle({\n    isLoaded: isLoaded,\n    isUnloading: isUnloading,\n    overlayBgColorEnd: overlayBgColorEnd,\n    overlayBgColorStart: overlayBgColorStart,\n    transitionDuration: transitionDuration,\n    zoomZindex: zoomZindex\n  });\n  var contentStyle = getModalContentStyle({\n    height: height,\n    isLoaded: isLoaded,\n    innerHeight: innerHeight,\n    innerWidth: innerWidth,\n    isUnloading: isUnloading,\n    left: left,\n    originalTransform: parentEl.style.transform,\n    top: top,\n    transitionDuration: transitionDuration,\n    width: width,\n    zoomMargin: zoomMargin\n  });\n  return isActive ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-modal\": true,\n    \"data-rmiz-overlay\": true,\n    role: \"dialog\",\n    style: overlayStyle\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-rmiz-modal-content\": true,\n    style: contentStyle\n  }, children), /*#__PURE__*/React.createElement(\"button\", {\n    \"aria-label\": closeText,\n    \"data-rmiz-btn-close\": true,\n    onClick: handleClick,\n    ref: btnRef,\n    type: \"button\"\n  })), portalEl) : null;\n};\n\nvar ControlledActivated$1 = /*#__PURE__*/memo(ControlledActivated);\n\nvar Controlled = function Controlled(_a) {\n  var children = _a.children,\n      _b = _a.closeText,\n      closeText = _b === void 0 ? 'Unzoom image' : _b,\n      isActive = _a.isZoomed,\n      _c = _a.overlayBgColorEnd,\n      overlayBgColorEnd = _c === void 0 ? 'rgba(255, 255, 255, 0.95)' : _c,\n      _d = _a.overlayBgColorStart,\n      overlayBgColorStart = _d === void 0 ? 'rgba(255, 255, 255, 0)' : _d,\n      portalEl = _a.portalEl,\n      onZoomChange = _a.onZoomChange,\n      _e = _a.openText,\n      openText = _e === void 0 ? 'Zoom image' : _e,\n      scrollableEl = _a.scrollableEl,\n      _f = _a.transitionDuration,\n      transitionDuration = _f === void 0 ? 300 : _f,\n      _g = _a.wrapElement,\n      WrapElement = _g === void 0 ? 'div' : _g,\n      wrapStyle = _a.wrapStyle,\n      _h = _a.zoomMargin,\n      zoomMargin = _h === void 0 ? 0 : _h,\n      _j = _a.zoomZindex,\n      zoomZindex = _j === void 0 ? 2147483647 : _j;\n\n  var _k = useState(false),\n      isChildLoaded = _k[0],\n      setIsChildLoaded = _k[1];\n\n  var wrapRef = useRef(null);\n  var btnRef = useRef(null);\n  var handleClickTrigger = useCallback(function (e) {\n    if (!isActive && onZoomChange) {\n      e.preventDefault();\n      onZoomChange(true);\n    }\n  }, [isActive, onZoomChange]);\n  var handleChildLoad = useCallback(function () {\n    setIsChildLoaded(true);\n  }, []);\n  var handleChildUnload = useCallback(function () {\n    setIsChildLoaded(false);\n\n    if (btnRef.current) {\n      btnRef.current.focus({\n        preventScroll: true\n      });\n    }\n  }, []);\n  var wrapType = isChildLoaded ? 'hidden' : 'visible';\n  return /*#__PURE__*/React.createElement(StrictMode, null, /*#__PURE__*/React.createElement(WrapElement, {\n    \"data-rmiz-wrap\": wrapType,\n    ref: wrapRef,\n    style: wrapStyle\n  }, children, /*#__PURE__*/React.createElement(\"button\", {\n    \"aria-label\": openText,\n    \"data-rmiz-btn-open\": true,\n    onClick: handleClickTrigger,\n    ref: btnRef,\n    type: \"button\"\n  }), typeof window !== 'undefined' && /*#__PURE__*/React.createElement(ControlledActivated$1, {\n    closeText: closeText,\n    isActive: isActive,\n    onLoad: handleChildLoad,\n    onUnload: handleChildUnload,\n    onZoomChange: onZoomChange,\n    overlayBgColorEnd: overlayBgColorEnd,\n    overlayBgColorStart: overlayBgColorStart,\n    parentRef: wrapRef,\n    portalEl: portalEl,\n    scrollableEl: scrollableEl,\n    transitionDuration: transitionDuration,\n    zoomMargin: zoomMargin,\n    zoomZindex: zoomZindex\n  }, children)));\n};\n\nvar Controlled$1 = /*#__PURE__*/memo(Controlled);\nexport default Controlled$1;","map":null,"metadata":{},"sourceType":"module"}