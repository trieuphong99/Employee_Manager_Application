{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $gOPD = require('../helpers/getOwnPropertyDescriptor');\n\nvar $gOPN = GetIntrinsic('%Object.getOwnPropertyNames%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar every = require('../helpers/every');\n\nvar IsDataDescriptor = require('./IsDataDescriptor');\n\nvar IsExtensible = require('./IsExtensible');\n\nvar ToPropertyDescriptor = require('./ToPropertyDescriptor');\n\nvar Type = require('./Type'); // https://www.ecma-international.org/ecma-262/6.0/#sec-testintegritylevel\n\n\nmodule.exports = function TestIntegrityLevel(O, level) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n\n  if (level !== 'sealed' && level !== 'frozen') {\n    throw new $TypeError('Assertion failed: `level` must be `\"sealed\"` or `\"frozen\"`');\n  }\n\n  var status = IsExtensible(O);\n\n  if (status) {\n    return false;\n  }\n\n  var theKeys = $gOPN(O);\n  return theKeys.length === 0 || every(theKeys, function (k) {\n    var currentDesc = $gOPD(O, k);\n\n    if (typeof currentDesc !== 'undefined') {\n      if (currentDesc.configurable) {\n        return false;\n      }\n\n      if (level === 'frozen' && IsDataDescriptor(ToPropertyDescriptor(currentDesc)) && currentDesc.writable) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}