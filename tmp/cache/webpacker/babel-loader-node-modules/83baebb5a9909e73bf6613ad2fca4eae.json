{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar has = require('has');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar getSymbolDescription = require('../helpers/getSymbolDescription');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\n\nvar IsExtensible = require('./IsExtensible');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-setfunctionname\n\n\nmodule.exports = function SetFunctionName(F, name) {\n  if (typeof F !== 'function') {\n    throw new $TypeError('Assertion failed: `F` must be a function');\n  }\n\n  if (!IsExtensible(F) || has(F, 'name')) {\n    throw new $TypeError('Assertion failed: `F` must be extensible, and must not have a `name` own property');\n  }\n\n  var nameType = Type(name);\n\n  if (nameType !== 'Symbol' && nameType !== 'String') {\n    throw new $TypeError('Assertion failed: `name` must be a Symbol or a String');\n  }\n\n  if (nameType === 'Symbol') {\n    var description = getSymbolDescription(name); // eslint-disable-next-line no-param-reassign\n\n    name = typeof description === 'undefined' ? '' : '[' + description + ']';\n  }\n\n  if (arguments.length > 2) {\n    var prefix = arguments[2]; // eslint-disable-next-line no-param-reassign\n\n    name = prefix + ' ' + name;\n  }\n\n  return DefinePropertyOrThrow(F, 'name', {\n    '[[Value]]': name,\n    '[[Writable]]': false,\n    '[[Enumerable]]': false,\n    '[[Configurable]]': true\n  });\n};","map":null,"metadata":{},"sourceType":"module"}