{"ast":null,"code":"import actionTypes from '../const/actionTypes';\nimport axios from 'axios';\nimport { hideLoading, showLoading } from './loading';\nimport { toastError, toastSuccess } from '../../commons/helpers/toastHelpers';\n\nvar handleErrors = function handleErrors(resErrors, setErrors, setSubmitting) {\n  var errors = {};\n  errors['date'] = resErrors;\n  setSubmitting(true);\n  setErrors(errors);\n}; // --------------GET OVERTIMES LIST---------------\n\n\nexport var setOvertimes = function setOvertimes(data) {\n  return {\n    type: actionTypes.GET_OVERTIMES,\n    data: data\n  };\n};\nexport var getOvertimes = function getOvertimes(data) {\n  var params = {\n    from_date: data.startTime,\n    to_date: data.endTime,\n    current_page: String(data.currentPage)\n  };\n  return function (dispatch) {\n    dispatch(showLoading());\n    axios.get('/overtimes', {\n      params: params\n    }).then(function (res) {\n      dispatch(setOvertimes(res.data));\n    })[\"catch\"](function (error) {\n      console.log(error);\n    })[\"finally\"](function () {\n      dispatch(hideLoading());\n    });\n  };\n}; // ---------------ADD OVERTIMES---------------\n\nvar setAddOvertimes = function setAddOvertimes(data) {\n  return {\n    type: actionTypes.ADD_OVERTIMES,\n    data: data\n  };\n};\n\nexport var addOvertimes = function addOvertimes(data, setErrors, setSubmitting, toggle) {\n  var body = {\n    date: data.date,\n    start_at: data.start_at,\n    end_at: data.end_at,\n    reason: data.reason\n  };\n  return function (dispatch) {\n    dispatch(showLoading());\n    axios.post('/overtimes', body).then(function (res) {\n      dispatch(setAddOvertimes(res.data));\n      toastSuccess(\"Successful!\");\n      toggle();\n    })[\"catch\"](function (error) {\n      var errors = error.response.data;\n      handleErrors(errors, setErrors, setSubmitting);\n    })[\"finally\"](function () {\n      dispatch(hideLoading());\n    });\n  };\n}; // --------------- UPDATE OVERTIMES ----------------\n\nvar setUpdateOvertimes = function setUpdateOvertimes(data) {\n  return {\n    type: actionTypes.UPDATE_OVERTIMES,\n    data: data\n  };\n};\n\nexport var updateOvertimes = function updateOvertimes(id, data, setErrors, setSubmitting, toggle) {\n  var body = {\n    date: data.date,\n    start_at: data.start_at,\n    end_at: data.end_at,\n    reason: data.reason\n  };\n  return function (dispatch) {\n    axios.put(\"/overtimes/\".concat(id), body).then(function (res) {\n      dispatch(setUpdateOvertimes(res.data));\n      toastSuccess(\"Successful!\");\n      toggle();\n    })[\"catch\"](function (error) {\n      var errors = error.response.data;\n      handleErrors(errors, setErrors, setSubmitting);\n    })[\"finally\"](function () {\n      dispatch(hideLoading());\n    });\n  };\n};","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/staff/actions/overtimes.js"],"names":["actionTypes","axios","hideLoading","showLoading","toastError","toastSuccess","handleErrors","resErrors","setErrors","setSubmitting","errors","setOvertimes","data","type","GET_OVERTIMES","getOvertimes","params","from_date","startTime","to_date","endTime","current_page","String","currentPage","dispatch","get","then","res","error","console","log","setAddOvertimes","ADD_OVERTIMES","addOvertimes","toggle","body","date","start_at","end_at","reason","post","response","setUpdateOvertimes","UPDATE_OVERTIMES","updateOvertimes","id","put"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,WAAzC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,oCAAzC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,aAAvB,EAAyC;AAC5D,MAAMC,MAAM,GAAG,EAAf;AACAA,EAAAA,MAAM,CAAC,MAAD,CAAN,GAAiBH,SAAjB;AACAE,EAAAA,aAAa,CAAC,IAAD,CAAb;AACAD,EAAAA,SAAS,CAACE,MAAD,CAAT;AACD,CALD,C,CAOA;;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEb,WAAW,CAACc,aADb;AAELF,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACH,IAAD,EAAU;AACpC,MAAMI,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEL,IAAI,CAACM,SADH;AAEbC,IAAAA,OAAO,EAAEP,IAAI,CAACQ,OAFD;AAGbC,IAAAA,YAAY,EAAEC,MAAM,CAACV,IAAI,CAACW,WAAN;AAHP,GAAf;AAKA,SAAO,UAACC,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAACrB,WAAW,EAAZ,CAAR;AACAF,IAAAA,KAAK,CAACwB,GAAN,CAAU,YAAV,EAAwB;AAAET,MAAAA,MAAM,EAANA;AAAF,KAAxB,EACGU,IADH,CACQ,UAAUC,GAAV,EAAe;AACnBH,MAAAA,QAAQ,CAACb,YAAY,CAACgB,GAAG,CAACf,IAAL,CAAb,CAAR;AACD,KAHH,WAIS,UAAUgB,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KANH,aAOW,YAAY;AACnBJ,MAAAA,QAAQ,CAACtB,WAAW,EAAZ,CAAR;AACD,KATH;AAUD,GAZD;AAaD,CAnBM,C,CAqBP;;AACA,IAAM6B,eAAe,GAAG,SAAlBA,eAAkB,CAAAnB,IAAI,EAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEb,WAAW,CAACgC,aADb;AAELpB,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALD;;AAMA,OAAO,IAAMqB,YAAY,GAAG,SAAfA,YAAe,CAACrB,IAAD,EAAOJ,SAAP,EAAkBC,aAAlB,EAAiCyB,MAAjC,EAA4C;AACtE,MAAMC,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAExB,IAAI,CAACwB,IADA;AAEXC,IAAAA,QAAQ,EAAEzB,IAAI,CAACyB,QAFJ;AAGXC,IAAAA,MAAM,EAAE1B,IAAI,CAAC0B,MAHF;AAIXC,IAAAA,MAAM,EAAE3B,IAAI,CAAC2B;AAJF,GAAb;AAMA,SAAO,UAAAf,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACrB,WAAW,EAAZ,CAAR;AACAF,IAAAA,KAAK,CAACuC,IAAN,CAAW,YAAX,EAAyBL,IAAzB,EACGT,IADH,CACQ,UAAUC,GAAV,EAAe;AACnBH,MAAAA,QAAQ,CAACO,eAAe,CAACJ,GAAG,CAACf,IAAL,CAAhB,CAAR;AACAP,MAAAA,YAAY,CAAC,aAAD,CAAZ;AACA6B,MAAAA,MAAM;AACP,KALH,WAMS,UAAUN,KAAV,EAAiB;AACtB,UAAMlB,MAAM,GAAGkB,KAAK,CAACa,QAAN,CAAe7B,IAA9B;AACAN,MAAAA,YAAY,CAACI,MAAD,EAASF,SAAT,EAAoBC,aAApB,CAAZ;AACD,KATH,aAUW,YAAY;AACnBe,MAAAA,QAAQ,CAACtB,WAAW,EAAZ,CAAR;AACD,KAZH;AAaD,GAfD;AAgBD,CAvBM,C,CAyBP;;AACA,IAAMwC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA9B,IAAI,EAAI;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEb,WAAW,CAAC2C,gBADb;AAEL/B,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALD;;AAOA,OAAO,IAAMgC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD,EAAKjC,IAAL,EAAWJ,SAAX,EAAsBC,aAAtB,EAAqCyB,MAArC,EAAgD;AAC7E,MAAMC,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAExB,IAAI,CAACwB,IADA;AAEXC,IAAAA,QAAQ,EAAEzB,IAAI,CAACyB,QAFJ;AAGXC,IAAAA,MAAM,EAAE1B,IAAI,CAAC0B,MAHF;AAIXC,IAAAA,MAAM,EAAE3B,IAAI,CAAC2B;AAJF,GAAb;AAMA,SAAO,UAAAf,QAAQ,EAAI;AACjBvB,IAAAA,KAAK,CAAC6C,GAAN,sBAAwBD,EAAxB,GAA8BV,IAA9B,EACGT,IADH,CACQ,UAAUC,GAAV,EAAe;AACnBH,MAAAA,QAAQ,CAACkB,kBAAkB,CAACf,GAAG,CAACf,IAAL,CAAnB,CAAR;AACAP,MAAAA,YAAY,CAAC,aAAD,CAAZ;AACA6B,MAAAA,MAAM;AACP,KALH,WAMS,UAAUN,KAAV,EAAiB;AACtB,UAAMlB,MAAM,GAAGkB,KAAK,CAACa,QAAN,CAAe7B,IAA9B;AACAN,MAAAA,YAAY,CAACI,MAAD,EAASF,SAAT,EAAoBC,aAApB,CAAZ;AACD,KATH,aAUW,YAAY;AACnBe,MAAAA,QAAQ,CAACtB,WAAW,EAAZ,CAAR;AACD,KAZH;AAaD,GAdD;AAeD,CAtBM","sourcesContent":["import actionTypes from '../const/actionTypes';\nimport axios from 'axios'\nimport { hideLoading, showLoading } from './loading'\nimport { toastError, toastSuccess } from '../../commons/helpers/toastHelpers'\n\nconst handleErrors = (resErrors, setErrors, setSubmitting) => {\n  const errors = {}\n  errors['date'] = resErrors\n  setSubmitting(true)\n  setErrors(errors)\n}\n\n// --------------GET OVERTIMES LIST---------------\nexport const setOvertimes = (data) => {\n  return {\n    type: actionTypes.GET_OVERTIMES,\n    data\n  }\n}\n\nexport const getOvertimes = (data) => {\n  const params = {\n    from_date: data.startTime,\n    to_date: data.endTime,\n    current_page: String(data.currentPage)\n  }\n  return (dispatch) => {\n    dispatch(showLoading())\n    axios.get('/overtimes', { params })\n      .then(function (res) {\n        dispatch(setOvertimes(res.data))\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n      .finally(function () {\n        dispatch(hideLoading())\n      });\n  }\n}\n\n// ---------------ADD OVERTIMES---------------\nconst setAddOvertimes = data => {\n  return {\n    type: actionTypes.ADD_OVERTIMES,\n    data\n  }\n}\nexport const addOvertimes = (data, setErrors, setSubmitting, toggle) => {\n  const body = {\n    date: data.date,\n    start_at: data.start_at,\n    end_at: data.end_at,\n    reason: data.reason\n  }\n  return dispatch => {\n    dispatch(showLoading())\n    axios.post('/overtimes', body)\n      .then(function (res) {\n        dispatch(setAddOvertimes(res.data))\n        toastSuccess(\"Successful!\")\n        toggle()\n      })\n      .catch(function (error) {\n        const errors = error.response.data\n        handleErrors(errors, setErrors, setSubmitting)\n      })\n      .finally(function () {\n        dispatch(hideLoading())\n      });\n  }\n}\n\n// --------------- UPDATE OVERTIMES ----------------\nconst setUpdateOvertimes = data => {\n  return {\n    type: actionTypes.UPDATE_OVERTIMES,\n    data\n  }\n}\n\nexport const updateOvertimes = (id, data, setErrors, setSubmitting, toggle) => {\n  const body = {\n    date: data.date,\n    start_at: data.start_at,\n    end_at: data.end_at,\n    reason: data.reason\n  }\n  return dispatch => {\n    axios.put(`/overtimes/${id}`, body)\n      .then(function (res) {\n        dispatch(setUpdateOvertimes(res.data))\n        toastSuccess(\"Successful!\")\n        toggle()\n      })\n      .catch(function (error) {\n        const errors = error.response.data\n        handleErrors(errors, setErrors, setSubmitting)\n      })\n      .finally(function () {\n        dispatch(hideLoading())\n      });\n  }\n}"]},"metadata":{},"sourceType":"module"}