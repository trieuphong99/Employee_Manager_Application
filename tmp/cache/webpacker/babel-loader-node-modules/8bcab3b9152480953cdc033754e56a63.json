{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _enzymeShallowEqual = _interopRequireDefault(require(\"enzyme-shallow-equal\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactMomentProptypes = _interopRequireDefault(require(\"react-moment-proptypes\"));\n\nvar _airbnbPropTypes = require(\"airbnb-prop-types\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _object = _interopRequireDefault(require(\"object.values\"));\n\nvar _isTouchDevice = _interopRequireDefault(require(\"is-touch-device\"));\n\nvar _defaultPhrases = require(\"../defaultPhrases\");\n\nvar _getPhrasePropTypes = _interopRequireDefault(require(\"../utils/getPhrasePropTypes\"));\n\nvar _isInclusivelyAfterDay = _interopRequireDefault(require(\"../utils/isInclusivelyAfterDay\"));\n\nvar _isNextDay = _interopRequireDefault(require(\"../utils/isNextDay\"));\n\nvar _isSameDay = _interopRequireDefault(require(\"../utils/isSameDay\"));\n\nvar _isAfterDay = _interopRequireDefault(require(\"../utils/isAfterDay\"));\n\nvar _isBeforeDay = _interopRequireDefault(require(\"../utils/isBeforeDay\"));\n\nvar _isPreviousDay = _interopRequireDefault(require(\"../utils/isPreviousDay\"));\n\nvar _getVisibleDays = _interopRequireDefault(require(\"../utils/getVisibleDays\"));\n\nvar _isDayVisible = _interopRequireDefault(require(\"../utils/isDayVisible\"));\n\nvar _getSelectedDateOffset = _interopRequireDefault(require(\"../utils/getSelectedDateOffset\"));\n\nvar _toISODateString = _interopRequireDefault(require(\"../utils/toISODateString\"));\n\nvar _modifiers = require(\"../utils/modifiers\");\n\nvar _DisabledShape = _interopRequireDefault(require(\"../shapes/DisabledShape\"));\n\nvar _FocusedInputShape = _interopRequireDefault(require(\"../shapes/FocusedInputShape\"));\n\nvar _ScrollableOrientationShape = _interopRequireDefault(require(\"../shapes/ScrollableOrientationShape\"));\n\nvar _DayOfWeekShape = _interopRequireDefault(require(\"../shapes/DayOfWeekShape\"));\n\nvar _CalendarInfoPositionShape = _interopRequireDefault(require(\"../shapes/CalendarInfoPositionShape\"));\n\nvar _NavPositionShape = _interopRequireDefault(require(\"../shapes/NavPositionShape\"));\n\nvar _constants = require(\"../constants\");\n\nvar _DayPicker = _interopRequireDefault(require(\"./DayPicker\"));\n\nvar _getPooledMoment = _interopRequireDefault(require(\"../utils/getPooledMoment\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? (0, _airbnbPropTypes.forbidExtraProps)({\n  startDate: _reactMomentProptypes[\"default\"].momentObj,\n  endDate: _reactMomentProptypes[\"default\"].momentObj,\n  onDatesChange: _propTypes[\"default\"].func,\n  startDateOffset: _propTypes[\"default\"].func,\n  endDateOffset: _propTypes[\"default\"].func,\n  minDate: _reactMomentProptypes[\"default\"].momentObj,\n  maxDate: _reactMomentProptypes[\"default\"].momentObj,\n  focusedInput: _FocusedInputShape[\"default\"],\n  onFocusChange: _propTypes[\"default\"].func,\n  onClose: _propTypes[\"default\"].func,\n  keepOpenOnDateSelect: _propTypes[\"default\"].bool,\n  minimumNights: _propTypes[\"default\"].number,\n  disabled: _DisabledShape[\"default\"],\n  isOutsideRange: _propTypes[\"default\"].func,\n  isDayBlocked: _propTypes[\"default\"].func,\n  isDayHighlighted: _propTypes[\"default\"].func,\n  getMinNightsForHoverDate: _propTypes[\"default\"].func,\n  daysViolatingMinNightsCanBeClicked: _propTypes[\"default\"].bool,\n  // DayPicker props\n  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderWeekHeaderElement: _propTypes[\"default\"].func,\n  enableOutsideDays: _propTypes[\"default\"].bool,\n  numberOfMonths: _propTypes[\"default\"].number,\n  orientation: _ScrollableOrientationShape[\"default\"],\n  withPortal: _propTypes[\"default\"].bool,\n  initialVisibleMonth: _propTypes[\"default\"].func,\n  hideKeyboardShortcutsPanel: _propTypes[\"default\"].bool,\n  daySize: _airbnbPropTypes.nonNegativeInteger,\n  noBorder: _propTypes[\"default\"].bool,\n  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,\n  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,\n  dayPickerNavigationInlineStyles: _propTypes[\"default\"].object,\n  navPosition: _NavPositionShape[\"default\"],\n  navPrev: _propTypes[\"default\"].node,\n  navNext: _propTypes[\"default\"].node,\n  renderNavPrevButton: _propTypes[\"default\"].func,\n  renderNavNextButton: _propTypes[\"default\"].func,\n  noNavButtons: _propTypes[\"default\"].bool,\n  noNavNextButton: _propTypes[\"default\"].bool,\n  noNavPrevButton: _propTypes[\"default\"].bool,\n  onPrevMonthClick: _propTypes[\"default\"].func,\n  onNextMonthClick: _propTypes[\"default\"].func,\n  onOutsideClick: _propTypes[\"default\"].func,\n  renderCalendarDay: _propTypes[\"default\"].func,\n  renderDayContents: _propTypes[\"default\"].func,\n  renderCalendarInfo: _propTypes[\"default\"].func,\n  renderKeyboardShortcutsButton: _propTypes[\"default\"].func,\n  renderKeyboardShortcutsPanel: _propTypes[\"default\"].func,\n  calendarInfoPosition: _CalendarInfoPositionShape[\"default\"],\n  firstDayOfWeek: _DayOfWeekShape[\"default\"],\n  verticalHeight: _airbnbPropTypes.nonNegativeInteger,\n  transitionDuration: _airbnbPropTypes.nonNegativeInteger,\n  // accessibility\n  onBlur: _propTypes[\"default\"].func,\n  isFocused: _propTypes[\"default\"].bool,\n  showKeyboardShortcuts: _propTypes[\"default\"].bool,\n  onTab: _propTypes[\"default\"].func,\n  onShiftTab: _propTypes[\"default\"].func,\n  // i18n\n  monthFormat: _propTypes[\"default\"].string,\n  weekDayFormat: _propTypes[\"default\"].string,\n  phrases: _propTypes[\"default\"].shape((0, _getPhrasePropTypes[\"default\"])(_defaultPhrases.DayPickerPhrases)),\n  dayAriaLabelFormat: _propTypes[\"default\"].string,\n  isRTL: _propTypes[\"default\"].bool\n}) : {};\nvar defaultProps = {\n  startDate: undefined,\n  // TODO: use null\n  endDate: undefined,\n  // TODO: use null\n  minDate: null,\n  maxDate: null,\n  onDatesChange: function onDatesChange() {},\n  startDateOffset: undefined,\n  endDateOffset: undefined,\n  focusedInput: null,\n  onFocusChange: function onFocusChange() {},\n  onClose: function onClose() {},\n  keepOpenOnDateSelect: false,\n  minimumNights: 1,\n  disabled: false,\n  isOutsideRange: function isOutsideRange() {},\n  isDayBlocked: function isDayBlocked() {},\n  isDayHighlighted: function isDayHighlighted() {},\n  getMinNightsForHoverDate: function getMinNightsForHoverDate() {},\n  daysViolatingMinNightsCanBeClicked: false,\n  // DayPicker props\n  renderMonthText: null,\n  renderWeekHeaderElement: null,\n  enableOutsideDays: false,\n  numberOfMonths: 1,\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  hideKeyboardShortcutsPanel: false,\n  initialVisibleMonth: null,\n  daySize: _constants.DAY_SIZE,\n  dayPickerNavigationInlineStyles: null,\n  navPosition: _constants.NAV_POSITION_TOP,\n  navPrev: null,\n  navNext: null,\n  renderNavPrevButton: null,\n  renderNavNextButton: null,\n  noNavButtons: false,\n  noNavNextButton: false,\n  noNavPrevButton: false,\n  onPrevMonthClick: function onPrevMonthClick() {},\n  onNextMonthClick: function onNextMonthClick() {},\n  onOutsideClick: function onOutsideClick() {},\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  renderCalendarInfo: null,\n  renderMonthElement: null,\n  renderKeyboardShortcutsButton: undefined,\n  renderKeyboardShortcutsPanel: undefined,\n  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,\n  firstDayOfWeek: null,\n  verticalHeight: null,\n  noBorder: false,\n  transitionDuration: undefined,\n  verticalBorderSpacing: undefined,\n  horizontalMonthPadding: 13,\n  // accessibility\n  onBlur: function onBlur() {},\n  isFocused: false,\n  showKeyboardShortcuts: false,\n  onTab: function onTab() {},\n  onShiftTab: function onShiftTab() {},\n  // i18n\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: _defaultPhrases.DayPickerPhrases,\n  dayAriaLabelFormat: undefined,\n  isRTL: false\n};\n\nvar getChooseAvailableDatePhrase = function getChooseAvailableDatePhrase(phrases, focusedInput) {\n  if (focusedInput === _constants.START_DATE) {\n    return phrases.chooseAvailableStartDate;\n  }\n\n  if (focusedInput === _constants.END_DATE) {\n    return phrases.chooseAvailableEndDate;\n  }\n\n  return phrases.chooseAvailableDate;\n};\n\nvar DayPickerRangeController = /*#__PURE__*/function (_ref) {\n  (0, _inheritsLoose2[\"default\"])(DayPickerRangeController, _ref);\n  var _proto = DayPickerRangeController.prototype;\n\n  _proto[!_react[\"default\"].PureComponent && \"shouldComponentUpdate\"] = function (nextProps, nextState) {\n    return !(0, _enzymeShallowEqual[\"default\"])(this.props, nextProps) || !(0, _enzymeShallowEqual[\"default\"])(this.state, nextState);\n  };\n\n  function DayPickerRangeController(props) {\n    var _this;\n\n    _this = _ref.call(this, props) || this;\n    _this.isTouchDevice = (0, _isTouchDevice[\"default\"])();\n    _this.today = (0, _moment[\"default\"])();\n    _this.modifiers = {\n      today: function today(day) {\n        return _this.isToday(day);\n      },\n      blocked: function blocked(day) {\n        return _this.isBlocked(day);\n      },\n      'blocked-calendar': function blockedCalendar(day) {\n        return props.isDayBlocked(day);\n      },\n      'blocked-out-of-range': function blockedOutOfRange(day) {\n        return props.isOutsideRange(day);\n      },\n      'highlighted-calendar': function highlightedCalendar(day) {\n        return props.isDayHighlighted(day);\n      },\n      valid: function valid(day) {\n        return !_this.isBlocked(day);\n      },\n      'selected-start': function selectedStart(day) {\n        return _this.isStartDate(day);\n      },\n      'selected-end': function selectedEnd(day) {\n        return _this.isEndDate(day);\n      },\n      'blocked-minimum-nights': function blockedMinimumNights(day) {\n        return _this.doesNotMeetMinimumNights(day);\n      },\n      'selected-span': function selectedSpan(day) {\n        return _this.isInSelectedSpan(day);\n      },\n      'last-in-range': function lastInRange(day) {\n        return _this.isLastInRange(day);\n      },\n      hovered: function hovered(day) {\n        return _this.isHovered(day);\n      },\n      'hovered-span': function hoveredSpan(day) {\n        return _this.isInHoveredSpan(day);\n      },\n      'hovered-offset': function hoveredOffset(day) {\n        return _this.isInHoveredSpan(day);\n      },\n      'after-hovered-start': function afterHoveredStart(day) {\n        return _this.isDayAfterHoveredStartDate(day);\n      },\n      'first-day-of-week': function firstDayOfWeek(day) {\n        return _this.isFirstDayOfWeek(day);\n      },\n      'last-day-of-week': function lastDayOfWeek(day) {\n        return _this.isLastDayOfWeek(day);\n      },\n      'hovered-start-first-possible-end': function hoveredStartFirstPossibleEnd(day, hoverDate) {\n        return _this.isFirstPossibleEndDateForHoveredStartDate(day, hoverDate);\n      },\n      'hovered-start-blocked-minimum-nights': function hoveredStartBlockedMinimumNights(day, hoverDate) {\n        return _this.doesNotMeetMinNightsForHoveredStartDate(day, hoverDate);\n      },\n      'before-hovered-end': function beforeHoveredEnd(day) {\n        return _this.isDayBeforeHoveredEndDate(day);\n      },\n      'no-selected-start-before-selected-end': function noSelectedStartBeforeSelectedEnd(day) {\n        return _this.beforeSelectedEnd(day) && !props.startDate;\n      },\n      'selected-start-in-hovered-span': function selectedStartInHoveredSpan(day, hoverDate) {\n        return _this.isStartDate(day) && (0, _isAfterDay[\"default\"])(hoverDate, day);\n      },\n      'selected-start-no-selected-end': function selectedStartNoSelectedEnd(day) {\n        return _this.isStartDate(day) && !props.endDate;\n      },\n      'selected-end-no-selected-start': function selectedEndNoSelectedStart(day) {\n        return _this.isEndDate(day) && !props.startDate;\n      }\n    };\n\n    var _this$getStateForNewM = _this.getStateForNewMonth(props),\n        currentMonth = _this$getStateForNewM.currentMonth,\n        visibleDays = _this$getStateForNewM.visibleDays; // initialize phrases\n    // set the appropriate CalendarDay phrase based on focusedInput\n\n\n    var chooseAvailableDate = getChooseAvailableDatePhrase(props.phrases, props.focusedInput);\n    _this.state = {\n      hoverDate: null,\n      currentMonth: currentMonth,\n      phrases: _objectSpread({}, props.phrases, {\n        chooseAvailableDate: chooseAvailableDate\n      }),\n      visibleDays: visibleDays,\n      disablePrev: _this.shouldDisableMonthNavigation(props.minDate, currentMonth),\n      disableNext: _this.shouldDisableMonthNavigation(props.maxDate, currentMonth)\n    };\n    _this.onDayClick = _this.onDayClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onDayMouseEnter = _this.onDayMouseEnter.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onDayMouseLeave = _this.onDayMouseLeave.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onPrevMonthClick = _this.onPrevMonthClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onNextMonthClick = _this.onNextMonthClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onMonthChange = _this.onMonthChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onYearChange = _this.onYearChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onGetNextScrollableMonths = _this.onGetNextScrollableMonths.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onGetPrevScrollableMonths = _this.onGetPrevScrollableMonths.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.getFirstFocusableDay = _this.getFirstFocusableDay.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    var startDate = nextProps.startDate,\n        endDate = nextProps.endDate,\n        focusedInput = nextProps.focusedInput,\n        getMinNightsForHoverDate = nextProps.getMinNightsForHoverDate,\n        minimumNights = nextProps.minimumNights,\n        isOutsideRange = nextProps.isOutsideRange,\n        isDayBlocked = nextProps.isDayBlocked,\n        isDayHighlighted = nextProps.isDayHighlighted,\n        phrases = nextProps.phrases,\n        initialVisibleMonth = nextProps.initialVisibleMonth,\n        numberOfMonths = nextProps.numberOfMonths,\n        enableOutsideDays = nextProps.enableOutsideDays;\n    var _this$props = this.props,\n        prevStartDate = _this$props.startDate,\n        prevEndDate = _this$props.endDate,\n        prevFocusedInput = _this$props.focusedInput,\n        prevMinimumNights = _this$props.minimumNights,\n        prevIsOutsideRange = _this$props.isOutsideRange,\n        prevIsDayBlocked = _this$props.isDayBlocked,\n        prevIsDayHighlighted = _this$props.isDayHighlighted,\n        prevPhrases = _this$props.phrases,\n        prevInitialVisibleMonth = _this$props.initialVisibleMonth,\n        prevNumberOfMonths = _this$props.numberOfMonths,\n        prevEnableOutsideDays = _this$props.enableOutsideDays;\n    var hoverDate = this.state.hoverDate;\n    var visibleDays = this.state.visibleDays;\n    var recomputeOutsideRange = false;\n    var recomputeDayBlocked = false;\n    var recomputeDayHighlighted = false;\n\n    if (isOutsideRange !== prevIsOutsideRange) {\n      this.modifiers['blocked-out-of-range'] = function (day) {\n        return isOutsideRange(day);\n      };\n\n      recomputeOutsideRange = true;\n    }\n\n    if (isDayBlocked !== prevIsDayBlocked) {\n      this.modifiers['blocked-calendar'] = function (day) {\n        return isDayBlocked(day);\n      };\n\n      recomputeDayBlocked = true;\n    }\n\n    if (isDayHighlighted !== prevIsDayHighlighted) {\n      this.modifiers['highlighted-calendar'] = function (day) {\n        return isDayHighlighted(day);\n      };\n\n      recomputeDayHighlighted = true;\n    }\n\n    var recomputePropModifiers = recomputeOutsideRange || recomputeDayBlocked || recomputeDayHighlighted;\n    var didStartDateChange = startDate !== prevStartDate;\n    var didEndDateChange = endDate !== prevEndDate;\n    var didFocusChange = focusedInput !== prevFocusedInput;\n\n    if (numberOfMonths !== prevNumberOfMonths || enableOutsideDays !== prevEnableOutsideDays || initialVisibleMonth !== prevInitialVisibleMonth && !prevFocusedInput && didFocusChange) {\n      var newMonthState = this.getStateForNewMonth(nextProps);\n      var currentMonth = newMonthState.currentMonth;\n      visibleDays = newMonthState.visibleDays;\n      this.setState({\n        currentMonth: currentMonth,\n        visibleDays: visibleDays\n      });\n    }\n\n    var modifiers = {};\n\n    if (didStartDateChange) {\n      modifiers = this.deleteModifier(modifiers, prevStartDate, 'selected-start');\n      modifiers = this.addModifier(modifiers, startDate, 'selected-start');\n\n      if (prevStartDate) {\n        var startSpan = prevStartDate.clone().add(1, 'day');\n        var endSpan = prevStartDate.clone().add(prevMinimumNights + 1, 'days');\n        modifiers = this.deleteModifierFromRange(modifiers, startSpan, endSpan, 'after-hovered-start');\n\n        if (!endDate || !prevEndDate) {\n          modifiers = this.deleteModifier(modifiers, prevStartDate, 'selected-start-no-selected-end');\n        }\n      }\n\n      if (!prevStartDate && endDate && startDate) {\n        modifiers = this.deleteModifier(modifiers, endDate, 'selected-end-no-selected-start');\n        modifiers = this.deleteModifier(modifiers, endDate, 'selected-end-in-hovered-span');\n        (0, _object[\"default\"])(visibleDays).forEach(function (days) {\n          Object.keys(days).forEach(function (day) {\n            var momentObj = (0, _moment[\"default\"])(day);\n            modifiers = _this2.deleteModifier(modifiers, momentObj, 'no-selected-start-before-selected-end');\n          });\n        });\n      }\n    }\n\n    if (didEndDateChange) {\n      modifiers = this.deleteModifier(modifiers, prevEndDate, 'selected-end');\n      modifiers = this.addModifier(modifiers, endDate, 'selected-end');\n\n      if (prevEndDate && (!startDate || !prevStartDate)) {\n        modifiers = this.deleteModifier(modifiers, prevEndDate, 'selected-end-no-selected-start');\n      }\n    }\n\n    if (didStartDateChange || didEndDateChange) {\n      if (prevStartDate && prevEndDate) {\n        modifiers = this.deleteModifierFromRange(modifiers, prevStartDate, prevEndDate.clone().add(1, 'day'), 'selected-span');\n      }\n\n      if (startDate && endDate) {\n        modifiers = this.deleteModifierFromRange(modifiers, startDate, endDate.clone().add(1, 'day'), 'hovered-span');\n        modifiers = this.addModifierToRange(modifiers, startDate.clone().add(1, 'day'), endDate, 'selected-span');\n      }\n\n      if (startDate && !endDate) {\n        modifiers = this.addModifier(modifiers, startDate, 'selected-start-no-selected-end');\n      }\n\n      if (endDate && !startDate) {\n        modifiers = this.addModifier(modifiers, endDate, 'selected-end-no-selected-start');\n      }\n\n      if (!startDate && endDate) {\n        (0, _object[\"default\"])(visibleDays).forEach(function (days) {\n          Object.keys(days).forEach(function (day) {\n            var momentObj = (0, _moment[\"default\"])(day);\n\n            if ((0, _isBeforeDay[\"default\"])(momentObj, endDate)) {\n              modifiers = _this2.addModifier(modifiers, momentObj, 'no-selected-start-before-selected-end');\n            }\n          });\n        });\n      }\n    }\n\n    if (!this.isTouchDevice && didStartDateChange && startDate && !endDate) {\n      var _startSpan = startDate.clone().add(1, 'day');\n\n      var _endSpan = startDate.clone().add(minimumNights + 1, 'days');\n\n      modifiers = this.addModifierToRange(modifiers, _startSpan, _endSpan, 'after-hovered-start');\n    }\n\n    if (!this.isTouchDevice && didEndDateChange && !startDate && endDate) {\n      var _startSpan2 = endDate.clone().subtract(minimumNights, 'days');\n\n      var _endSpan2 = endDate.clone();\n\n      modifiers = this.addModifierToRange(modifiers, _startSpan2, _endSpan2, 'before-hovered-end');\n    }\n\n    if (prevMinimumNights > 0) {\n      if (didFocusChange || didStartDateChange || minimumNights !== prevMinimumNights) {\n        var _startSpan3 = prevStartDate || this.today;\n\n        modifiers = this.deleteModifierFromRange(modifiers, _startSpan3, _startSpan3.clone().add(prevMinimumNights, 'days'), 'blocked-minimum-nights');\n        modifiers = this.deleteModifierFromRange(modifiers, _startSpan3, _startSpan3.clone().add(prevMinimumNights, 'days'), 'blocked');\n      }\n    }\n\n    if (didFocusChange || recomputePropModifiers) {\n      (0, _object[\"default\"])(visibleDays).forEach(function (days) {\n        Object.keys(days).forEach(function (day) {\n          var momentObj = (0, _getPooledMoment[\"default\"])(day);\n          var isBlocked = false;\n\n          if (didFocusChange || recomputeOutsideRange) {\n            if (isOutsideRange(momentObj)) {\n              modifiers = _this2.addModifier(modifiers, momentObj, 'blocked-out-of-range');\n              isBlocked = true;\n            } else {\n              modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked-out-of-range');\n            }\n          }\n\n          if (didFocusChange || recomputeDayBlocked) {\n            if (isDayBlocked(momentObj)) {\n              modifiers = _this2.addModifier(modifiers, momentObj, 'blocked-calendar');\n              isBlocked = true;\n            } else {\n              modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked-calendar');\n            }\n          }\n\n          if (isBlocked) {\n            modifiers = _this2.addModifier(modifiers, momentObj, 'blocked');\n          } else {\n            modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked');\n          }\n\n          if (didFocusChange || recomputeDayHighlighted) {\n            if (isDayHighlighted(momentObj)) {\n              modifiers = _this2.addModifier(modifiers, momentObj, 'highlighted-calendar');\n            } else {\n              modifiers = _this2.deleteModifier(modifiers, momentObj, 'highlighted-calendar');\n            }\n          }\n        });\n      });\n    }\n\n    if (!this.isTouchDevice && didFocusChange && hoverDate && !this.isBlocked(hoverDate)) {\n      var minNightsForHoverDate = getMinNightsForHoverDate(hoverDate);\n\n      if (minNightsForHoverDate > 0 && focusedInput === _constants.END_DATE) {\n        modifiers = this.deleteModifierFromRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n        modifiers = this.deleteModifier(modifiers, hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n      }\n\n      if (minNightsForHoverDate > 0 && focusedInput === _constants.START_DATE) {\n        modifiers = this.addModifierToRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n        modifiers = this.addModifier(modifiers, hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n      }\n    }\n\n    if (minimumNights > 0 && startDate && focusedInput === _constants.END_DATE) {\n      modifiers = this.addModifierToRange(modifiers, startDate, startDate.clone().add(minimumNights, 'days'), 'blocked-minimum-nights');\n      modifiers = this.addModifierToRange(modifiers, startDate, startDate.clone().add(minimumNights, 'days'), 'blocked');\n    }\n\n    var today = (0, _moment[\"default\"])();\n\n    if (!(0, _isSameDay[\"default\"])(this.today, today)) {\n      modifiers = this.deleteModifier(modifiers, this.today, 'today');\n      modifiers = this.addModifier(modifiers, today, 'today');\n      this.today = today;\n    }\n\n    if (Object.keys(modifiers).length > 0) {\n      this.setState({\n        visibleDays: _objectSpread({}, visibleDays, {}, modifiers)\n      });\n    }\n\n    if (didFocusChange || phrases !== prevPhrases) {\n      // set the appropriate CalendarDay phrase based on focusedInput\n      var chooseAvailableDate = getChooseAvailableDatePhrase(phrases, focusedInput);\n      this.setState({\n        phrases: _objectSpread({}, phrases, {\n          chooseAvailableDate: chooseAvailableDate\n        })\n      });\n    }\n  };\n\n  _proto.onDayClick = function onDayClick(day, e) {\n    var _this$props2 = this.props,\n        keepOpenOnDateSelect = _this$props2.keepOpenOnDateSelect,\n        minimumNights = _this$props2.minimumNights,\n        onBlur = _this$props2.onBlur,\n        focusedInput = _this$props2.focusedInput,\n        onFocusChange = _this$props2.onFocusChange,\n        onClose = _this$props2.onClose,\n        onDatesChange = _this$props2.onDatesChange,\n        startDateOffset = _this$props2.startDateOffset,\n        endDateOffset = _this$props2.endDateOffset,\n        disabled = _this$props2.disabled,\n        daysViolatingMinNightsCanBeClicked = _this$props2.daysViolatingMinNightsCanBeClicked;\n    if (e) e.preventDefault();\n    if (this.isBlocked(day, !daysViolatingMinNightsCanBeClicked)) return;\n    var _this$props3 = this.props,\n        startDate = _this$props3.startDate,\n        endDate = _this$props3.endDate;\n\n    if (startDateOffset || endDateOffset) {\n      startDate = (0, _getSelectedDateOffset[\"default\"])(startDateOffset, day);\n      endDate = (0, _getSelectedDateOffset[\"default\"])(endDateOffset, day);\n\n      if (this.isBlocked(startDate) || this.isBlocked(endDate)) {\n        return;\n      }\n\n      onDatesChange({\n        startDate: startDate,\n        endDate: endDate\n      });\n\n      if (!keepOpenOnDateSelect) {\n        onFocusChange(null);\n        onClose({\n          startDate: startDate,\n          endDate: endDate\n        });\n      }\n    } else if (focusedInput === _constants.START_DATE) {\n      var lastAllowedStartDate = endDate && endDate.clone().subtract(minimumNights, 'days');\n      var isStartDateAfterEndDate = (0, _isBeforeDay[\"default\"])(lastAllowedStartDate, day) || (0, _isAfterDay[\"default\"])(startDate, endDate);\n      var isEndDateDisabled = disabled === _constants.END_DATE;\n\n      if (!isEndDateDisabled || !isStartDateAfterEndDate) {\n        startDate = day;\n\n        if (isStartDateAfterEndDate) {\n          endDate = null;\n        }\n      }\n\n      onDatesChange({\n        startDate: startDate,\n        endDate: endDate\n      });\n\n      if (isEndDateDisabled && !isStartDateAfterEndDate) {\n        onFocusChange(null);\n        onClose({\n          startDate: startDate,\n          endDate: endDate\n        });\n      } else if (!isEndDateDisabled) {\n        onFocusChange(_constants.END_DATE);\n      }\n    } else if (focusedInput === _constants.END_DATE) {\n      var firstAllowedEndDate = startDate && startDate.clone().add(minimumNights, 'days');\n\n      if (!startDate) {\n        endDate = day;\n        onDatesChange({\n          startDate: startDate,\n          endDate: endDate\n        });\n        onFocusChange(_constants.START_DATE);\n      } else if ((0, _isInclusivelyAfterDay[\"default\"])(day, firstAllowedEndDate)) {\n        endDate = day;\n        onDatesChange({\n          startDate: startDate,\n          endDate: endDate\n        });\n\n        if (!keepOpenOnDateSelect) {\n          onFocusChange(null);\n          onClose({\n            startDate: startDate,\n            endDate: endDate\n          });\n        }\n      } else if (daysViolatingMinNightsCanBeClicked && this.doesNotMeetMinimumNights(day)) {\n        endDate = day;\n        onDatesChange({\n          startDate: startDate,\n          endDate: endDate\n        });\n      } else if (disabled !== _constants.START_DATE) {\n        startDate = day;\n        endDate = null;\n        onDatesChange({\n          startDate: startDate,\n          endDate: endDate\n        });\n      } else {\n        onDatesChange({\n          startDate: startDate,\n          endDate: endDate\n        });\n      }\n    } else {\n      onDatesChange({\n        startDate: startDate,\n        endDate: endDate\n      });\n    }\n\n    onBlur();\n  };\n\n  _proto.onDayMouseEnter = function onDayMouseEnter(day) {\n    /* eslint react/destructuring-assignment: 1 */\n    if (this.isTouchDevice) return;\n    var _this$props4 = this.props,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate,\n        focusedInput = _this$props4.focusedInput,\n        getMinNightsForHoverDate = _this$props4.getMinNightsForHoverDate,\n        minimumNights = _this$props4.minimumNights,\n        startDateOffset = _this$props4.startDateOffset,\n        endDateOffset = _this$props4.endDateOffset;\n    var _this$state = this.state,\n        hoverDate = _this$state.hoverDate,\n        visibleDays = _this$state.visibleDays,\n        dateOffset = _this$state.dateOffset;\n    var nextDateOffset = null;\n\n    if (focusedInput) {\n      var hasOffset = startDateOffset || endDateOffset;\n      var modifiers = {};\n\n      if (hasOffset) {\n        var start = (0, _getSelectedDateOffset[\"default\"])(startDateOffset, day);\n        var end = (0, _getSelectedDateOffset[\"default\"])(endDateOffset, day, function (rangeDay) {\n          return rangeDay.add(1, 'day');\n        });\n        nextDateOffset = {\n          start: start,\n          end: end\n        }; // eslint-disable-next-line react/destructuring-assignment\n\n        if (dateOffset && dateOffset.start && dateOffset.end) {\n          modifiers = this.deleteModifierFromRange(modifiers, dateOffset.start, dateOffset.end, 'hovered-offset');\n        }\n\n        modifiers = this.addModifierToRange(modifiers, start, end, 'hovered-offset');\n      }\n\n      if (!hasOffset) {\n        modifiers = this.deleteModifier(modifiers, hoverDate, 'hovered');\n        modifiers = this.addModifier(modifiers, day, 'hovered');\n\n        if (startDate && !endDate && focusedInput === _constants.END_DATE) {\n          if ((0, _isAfterDay[\"default\"])(hoverDate, startDate)) {\n            var endSpan = hoverDate.clone().add(1, 'day');\n            modifiers = this.deleteModifierFromRange(modifiers, startDate, endSpan, 'hovered-span');\n          }\n\n          if ((0, _isBeforeDay[\"default\"])(day, startDate) || (0, _isSameDay[\"default\"])(day, startDate)) {\n            modifiers = this.deleteModifier(modifiers, startDate, 'selected-start-in-hovered-span');\n          }\n\n          if (!this.isBlocked(day) && (0, _isAfterDay[\"default\"])(day, startDate)) {\n            var _endSpan3 = day.clone().add(1, 'day');\n\n            modifiers = this.addModifierToRange(modifiers, startDate, _endSpan3, 'hovered-span');\n            modifiers = this.addModifier(modifiers, startDate, 'selected-start-in-hovered-span');\n          }\n        }\n\n        if (!startDate && endDate && focusedInput === _constants.START_DATE) {\n          if ((0, _isBeforeDay[\"default\"])(hoverDate, endDate)) {\n            modifiers = this.deleteModifierFromRange(modifiers, hoverDate, endDate, 'hovered-span');\n          }\n\n          if ((0, _isAfterDay[\"default\"])(day, endDate) || (0, _isSameDay[\"default\"])(day, endDate)) {\n            modifiers = this.deleteModifier(modifiers, endDate, 'selected-end-in-hovered-span');\n          }\n\n          if (!this.isBlocked(day) && (0, _isBeforeDay[\"default\"])(day, endDate)) {\n            modifiers = this.addModifierToRange(modifiers, day, endDate, 'hovered-span');\n            modifiers = this.addModifier(modifiers, endDate, 'selected-end-in-hovered-span');\n          }\n        }\n\n        if (startDate) {\n          var startSpan = startDate.clone().add(1, 'day');\n\n          var _endSpan4 = startDate.clone().add(minimumNights + 1, 'days');\n\n          modifiers = this.deleteModifierFromRange(modifiers, startSpan, _endSpan4, 'after-hovered-start');\n\n          if ((0, _isSameDay[\"default\"])(day, startDate)) {\n            var newStartSpan = startDate.clone().add(1, 'day');\n            var newEndSpan = startDate.clone().add(minimumNights + 1, 'days');\n            modifiers = this.addModifierToRange(modifiers, newStartSpan, newEndSpan, 'after-hovered-start');\n          }\n        }\n\n        if (endDate) {\n          var _startSpan4 = endDate.clone().subtract(minimumNights, 'days');\n\n          modifiers = this.deleteModifierFromRange(modifiers, _startSpan4, endDate, 'before-hovered-end');\n\n          if ((0, _isSameDay[\"default\"])(day, endDate)) {\n            var _newStartSpan = endDate.clone().subtract(minimumNights, 'days');\n\n            modifiers = this.addModifierToRange(modifiers, _newStartSpan, endDate, 'before-hovered-end');\n          }\n        }\n\n        if (hoverDate && !this.isBlocked(hoverDate)) {\n          var minNightsForPrevHoverDate = getMinNightsForHoverDate(hoverDate);\n\n          if (minNightsForPrevHoverDate > 0 && focusedInput === _constants.START_DATE) {\n            modifiers = this.deleteModifierFromRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForPrevHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n            modifiers = this.deleteModifier(modifiers, hoverDate.clone().add(minNightsForPrevHoverDate, 'days'), 'hovered-start-first-possible-end');\n          }\n        }\n\n        if (!this.isBlocked(day)) {\n          var minNightsForHoverDate = getMinNightsForHoverDate(day);\n\n          if (minNightsForHoverDate > 0 && focusedInput === _constants.START_DATE) {\n            modifiers = this.addModifierToRange(modifiers, day.clone().add(1, 'days'), day.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n            modifiers = this.addModifier(modifiers, day.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n          }\n        }\n      }\n\n      this.setState({\n        hoverDate: day,\n        dateOffset: nextDateOffset,\n        visibleDays: _objectSpread({}, visibleDays, {}, modifiers)\n      });\n    }\n  };\n\n  _proto.onDayMouseLeave = function onDayMouseLeave(day) {\n    var _this$props5 = this.props,\n        startDate = _this$props5.startDate,\n        endDate = _this$props5.endDate,\n        focusedInput = _this$props5.focusedInput,\n        getMinNightsForHoverDate = _this$props5.getMinNightsForHoverDate,\n        minimumNights = _this$props5.minimumNights;\n    var _this$state2 = this.state,\n        hoverDate = _this$state2.hoverDate,\n        visibleDays = _this$state2.visibleDays,\n        dateOffset = _this$state2.dateOffset;\n    if (this.isTouchDevice || !hoverDate) return;\n    var modifiers = {};\n    modifiers = this.deleteModifier(modifiers, hoverDate, 'hovered');\n\n    if (dateOffset) {\n      modifiers = this.deleteModifierFromRange(modifiers, dateOffset.start, dateOffset.end, 'hovered-offset');\n    }\n\n    if (startDate && !endDate) {\n      if ((0, _isAfterDay[\"default\"])(hoverDate, startDate)) {\n        var endSpan = hoverDate.clone().add(1, 'day');\n        modifiers = this.deleteModifierFromRange(modifiers, startDate, endSpan, 'hovered-span');\n      }\n\n      if ((0, _isAfterDay[\"default\"])(day, startDate)) {\n        modifiers = this.deleteModifier(modifiers, startDate, 'selected-start-in-hovered-span');\n      }\n    }\n\n    if (!startDate && endDate) {\n      if ((0, _isAfterDay[\"default\"])(endDate, hoverDate)) {\n        modifiers = this.deleteModifierFromRange(modifiers, hoverDate, endDate, 'hovered-span');\n      }\n\n      if ((0, _isBeforeDay[\"default\"])(day, endDate)) {\n        modifiers = this.deleteModifier(modifiers, endDate, 'selected-end-in-hovered-span');\n      }\n    }\n\n    if (startDate && (0, _isSameDay[\"default\"])(day, startDate)) {\n      var startSpan = startDate.clone().add(1, 'day');\n\n      var _endSpan5 = startDate.clone().add(minimumNights + 1, 'days');\n\n      modifiers = this.deleteModifierFromRange(modifiers, startSpan, _endSpan5, 'after-hovered-start');\n    }\n\n    if (endDate && (0, _isSameDay[\"default\"])(day, endDate)) {\n      var _startSpan5 = endDate.clone().subtract(minimumNights, 'days');\n\n      modifiers = this.deleteModifierFromRange(modifiers, _startSpan5, endDate, 'before-hovered-end');\n    }\n\n    if (!this.isBlocked(hoverDate)) {\n      var minNightsForHoverDate = getMinNightsForHoverDate(hoverDate);\n\n      if (minNightsForHoverDate > 0 && focusedInput === _constants.START_DATE) {\n        modifiers = this.deleteModifierFromRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n        modifiers = this.deleteModifier(modifiers, hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n      }\n    }\n\n    this.setState({\n      hoverDate: null,\n      visibleDays: _objectSpread({}, visibleDays, {}, modifiers)\n    });\n  };\n\n  _proto.onPrevMonthClick = function onPrevMonthClick() {\n    var _this$props6 = this.props,\n        enableOutsideDays = _this$props6.enableOutsideDays,\n        maxDate = _this$props6.maxDate,\n        minDate = _this$props6.minDate,\n        numberOfMonths = _this$props6.numberOfMonths,\n        onPrevMonthClick = _this$props6.onPrevMonthClick;\n    var _this$state3 = this.state,\n        currentMonth = _this$state3.currentMonth,\n        visibleDays = _this$state3.visibleDays;\n    var newVisibleDays = {};\n    Object.keys(visibleDays).sort().slice(0, numberOfMonths + 1).forEach(function (month) {\n      newVisibleDays[month] = visibleDays[month];\n    });\n    var prevMonth = currentMonth.clone().subtract(2, 'months');\n    var prevMonthVisibleDays = (0, _getVisibleDays[\"default\"])(prevMonth, 1, enableOutsideDays, true);\n    var newCurrentMonth = currentMonth.clone().subtract(1, 'month');\n    this.setState({\n      currentMonth: newCurrentMonth,\n      disablePrev: this.shouldDisableMonthNavigation(minDate, newCurrentMonth),\n      disableNext: this.shouldDisableMonthNavigation(maxDate, newCurrentMonth),\n      visibleDays: _objectSpread({}, newVisibleDays, {}, this.getModifiers(prevMonthVisibleDays))\n    }, function () {\n      onPrevMonthClick(newCurrentMonth.clone());\n    });\n  };\n\n  _proto.onNextMonthClick = function onNextMonthClick() {\n    var _this$props7 = this.props,\n        enableOutsideDays = _this$props7.enableOutsideDays,\n        maxDate = _this$props7.maxDate,\n        minDate = _this$props7.minDate,\n        numberOfMonths = _this$props7.numberOfMonths,\n        onNextMonthClick = _this$props7.onNextMonthClick;\n    var _this$state4 = this.state,\n        currentMonth = _this$state4.currentMonth,\n        visibleDays = _this$state4.visibleDays;\n    var newVisibleDays = {};\n    Object.keys(visibleDays).sort().slice(1).forEach(function (month) {\n      newVisibleDays[month] = visibleDays[month];\n    });\n    var nextMonth = currentMonth.clone().add(numberOfMonths + 1, 'month');\n    var nextMonthVisibleDays = (0, _getVisibleDays[\"default\"])(nextMonth, 1, enableOutsideDays, true);\n    var newCurrentMonth = currentMonth.clone().add(1, 'month');\n    this.setState({\n      currentMonth: newCurrentMonth,\n      disablePrev: this.shouldDisableMonthNavigation(minDate, newCurrentMonth),\n      disableNext: this.shouldDisableMonthNavigation(maxDate, newCurrentMonth),\n      visibleDays: _objectSpread({}, newVisibleDays, {}, this.getModifiers(nextMonthVisibleDays))\n    }, function () {\n      onNextMonthClick(newCurrentMonth.clone());\n    });\n  };\n\n  _proto.onMonthChange = function onMonthChange(newMonth) {\n    var _this$props8 = this.props,\n        numberOfMonths = _this$props8.numberOfMonths,\n        enableOutsideDays = _this$props8.enableOutsideDays,\n        orientation = _this$props8.orientation;\n    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n    var newVisibleDays = (0, _getVisibleDays[\"default\"])(newMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths);\n    this.setState({\n      currentMonth: newMonth.clone(),\n      visibleDays: this.getModifiers(newVisibleDays)\n    });\n  };\n\n  _proto.onYearChange = function onYearChange(newMonth) {\n    var _this$props9 = this.props,\n        numberOfMonths = _this$props9.numberOfMonths,\n        enableOutsideDays = _this$props9.enableOutsideDays,\n        orientation = _this$props9.orientation;\n    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n    var newVisibleDays = (0, _getVisibleDays[\"default\"])(newMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths);\n    this.setState({\n      currentMonth: newMonth.clone(),\n      visibleDays: this.getModifiers(newVisibleDays)\n    });\n  };\n\n  _proto.onGetNextScrollableMonths = function onGetNextScrollableMonths() {\n    var _this$props10 = this.props,\n        numberOfMonths = _this$props10.numberOfMonths,\n        enableOutsideDays = _this$props10.enableOutsideDays;\n    var _this$state5 = this.state,\n        currentMonth = _this$state5.currentMonth,\n        visibleDays = _this$state5.visibleDays;\n    var numberOfVisibleMonths = Object.keys(visibleDays).length;\n    var nextMonth = currentMonth.clone().add(numberOfVisibleMonths, 'month');\n    var newVisibleDays = (0, _getVisibleDays[\"default\"])(nextMonth, numberOfMonths, enableOutsideDays, true);\n    this.setState({\n      visibleDays: _objectSpread({}, visibleDays, {}, this.getModifiers(newVisibleDays))\n    });\n  };\n\n  _proto.onGetPrevScrollableMonths = function onGetPrevScrollableMonths() {\n    var _this$props11 = this.props,\n        numberOfMonths = _this$props11.numberOfMonths,\n        enableOutsideDays = _this$props11.enableOutsideDays;\n    var _this$state6 = this.state,\n        currentMonth = _this$state6.currentMonth,\n        visibleDays = _this$state6.visibleDays;\n    var firstPreviousMonth = currentMonth.clone().subtract(numberOfMonths, 'month');\n    var newVisibleDays = (0, _getVisibleDays[\"default\"])(firstPreviousMonth, numberOfMonths, enableOutsideDays, true);\n    this.setState({\n      currentMonth: firstPreviousMonth.clone(),\n      visibleDays: _objectSpread({}, visibleDays, {}, this.getModifiers(newVisibleDays))\n    });\n  };\n\n  _proto.getFirstFocusableDay = function getFirstFocusableDay(newMonth) {\n    var _this3 = this;\n\n    var _this$props12 = this.props,\n        startDate = _this$props12.startDate,\n        endDate = _this$props12.endDate,\n        focusedInput = _this$props12.focusedInput,\n        minimumNights = _this$props12.minimumNights,\n        numberOfMonths = _this$props12.numberOfMonths;\n    var focusedDate = newMonth.clone().startOf('month');\n\n    if (focusedInput === _constants.START_DATE && startDate) {\n      focusedDate = startDate.clone();\n    } else if (focusedInput === _constants.END_DATE && !endDate && startDate) {\n      focusedDate = startDate.clone().add(minimumNights, 'days');\n    } else if (focusedInput === _constants.END_DATE && endDate) {\n      focusedDate = endDate.clone();\n    }\n\n    if (this.isBlocked(focusedDate)) {\n      var days = [];\n      var lastVisibleDay = newMonth.clone().add(numberOfMonths - 1, 'months').endOf('month');\n      var currentDay = focusedDate.clone();\n\n      while (!(0, _isAfterDay[\"default\"])(currentDay, lastVisibleDay)) {\n        currentDay = currentDay.clone().add(1, 'day');\n        days.push(currentDay);\n      }\n\n      var viableDays = days.filter(function (day) {\n        return !_this3.isBlocked(day);\n      });\n\n      if (viableDays.length > 0) {\n        var _viableDays = (0, _slicedToArray2[\"default\"])(viableDays, 1);\n\n        focusedDate = _viableDays[0];\n      }\n    }\n\n    return focusedDate;\n  };\n\n  _proto.getModifiers = function getModifiers(visibleDays) {\n    var _this4 = this;\n\n    var modifiers = {};\n    Object.keys(visibleDays).forEach(function (month) {\n      modifiers[month] = {};\n      visibleDays[month].forEach(function (day) {\n        modifiers[month][(0, _toISODateString[\"default\"])(day)] = _this4.getModifiersForDay(day);\n      });\n    });\n    return modifiers;\n  };\n\n  _proto.getModifiersForDay = function getModifiersForDay(day) {\n    var _this5 = this;\n\n    return new Set(Object.keys(this.modifiers).filter(function (modifier) {\n      return _this5.modifiers[modifier](day);\n    }));\n  };\n\n  _proto.getStateForNewMonth = function getStateForNewMonth(nextProps) {\n    var _this6 = this;\n\n    var initialVisibleMonth = nextProps.initialVisibleMonth,\n        numberOfMonths = nextProps.numberOfMonths,\n        enableOutsideDays = nextProps.enableOutsideDays,\n        orientation = nextProps.orientation,\n        startDate = nextProps.startDate;\n    var initialVisibleMonthThunk = initialVisibleMonth || (startDate ? function () {\n      return startDate;\n    } : function () {\n      return _this6.today;\n    });\n    var currentMonth = initialVisibleMonthThunk();\n    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n    var visibleDays = this.getModifiers((0, _getVisibleDays[\"default\"])(currentMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths));\n    return {\n      currentMonth: currentMonth,\n      visibleDays: visibleDays\n    };\n  };\n\n  _proto.shouldDisableMonthNavigation = function shouldDisableMonthNavigation(date, visibleMonth) {\n    if (!date) return false;\n    var _this$props13 = this.props,\n        numberOfMonths = _this$props13.numberOfMonths,\n        enableOutsideDays = _this$props13.enableOutsideDays;\n    return (0, _isDayVisible[\"default\"])(date, visibleMonth, numberOfMonths, enableOutsideDays);\n  };\n\n  _proto.addModifier = function addModifier(updatedDays, day, modifier) {\n    return (0, _modifiers.addModifier)(updatedDays, day, modifier, this.props, this.state);\n  };\n\n  _proto.addModifierToRange = function addModifierToRange(updatedDays, start, end, modifier) {\n    var days = updatedDays;\n    var spanStart = start.clone();\n\n    while ((0, _isBeforeDay[\"default\"])(spanStart, end)) {\n      days = this.addModifier(days, spanStart, modifier);\n      spanStart = spanStart.clone().add(1, 'day');\n    }\n\n    return days;\n  };\n\n  _proto.deleteModifier = function deleteModifier(updatedDays, day, modifier) {\n    return (0, _modifiers.deleteModifier)(updatedDays, day, modifier, this.props, this.state);\n  };\n\n  _proto.deleteModifierFromRange = function deleteModifierFromRange(updatedDays, start, end, modifier) {\n    var days = updatedDays;\n    var spanStart = start.clone();\n\n    while ((0, _isBeforeDay[\"default\"])(spanStart, end)) {\n      days = this.deleteModifier(days, spanStart, modifier);\n      spanStart = spanStart.clone().add(1, 'day');\n    }\n\n    return days;\n  };\n\n  _proto.doesNotMeetMinimumNights = function doesNotMeetMinimumNights(day) {\n    var _this$props14 = this.props,\n        startDate = _this$props14.startDate,\n        isOutsideRange = _this$props14.isOutsideRange,\n        focusedInput = _this$props14.focusedInput,\n        minimumNights = _this$props14.minimumNights;\n    if (focusedInput !== _constants.END_DATE) return false;\n\n    if (startDate) {\n      var dayDiff = day.diff(startDate.clone().startOf('day').hour(12), 'days');\n      return dayDiff < minimumNights && dayDiff >= 0;\n    }\n\n    return isOutsideRange((0, _moment[\"default\"])(day).subtract(minimumNights, 'days'));\n  };\n\n  _proto.doesNotMeetMinNightsForHoveredStartDate = function doesNotMeetMinNightsForHoveredStartDate(day, hoverDate) {\n    var _this$props15 = this.props,\n        focusedInput = _this$props15.focusedInput,\n        getMinNightsForHoverDate = _this$props15.getMinNightsForHoverDate;\n    if (focusedInput !== _constants.END_DATE) return false;\n\n    if (hoverDate && !this.isBlocked(hoverDate)) {\n      var minNights = getMinNightsForHoverDate(hoverDate);\n      var dayDiff = day.diff(hoverDate.clone().startOf('day').hour(12), 'days');\n      return dayDiff < minNights && dayDiff >= 0;\n    }\n\n    return false;\n  };\n\n  _proto.isDayAfterHoveredStartDate = function isDayAfterHoveredStartDate(day) {\n    var _this$props16 = this.props,\n        startDate = _this$props16.startDate,\n        endDate = _this$props16.endDate,\n        minimumNights = _this$props16.minimumNights;\n\n    var _ref2 = this.state || {},\n        hoverDate = _ref2.hoverDate;\n\n    return !!startDate && !endDate && !this.isBlocked(day) && (0, _isNextDay[\"default\"])(hoverDate, day) && minimumNights > 0 && (0, _isSameDay[\"default\"])(hoverDate, startDate);\n  };\n\n  _proto.isEndDate = function isEndDate(day) {\n    var endDate = this.props.endDate;\n    return (0, _isSameDay[\"default\"])(day, endDate);\n  };\n\n  _proto.isHovered = function isHovered(day) {\n    var _ref3 = this.state || {},\n        hoverDate = _ref3.hoverDate;\n\n    var focusedInput = this.props.focusedInput;\n    return !!focusedInput && (0, _isSameDay[\"default\"])(day, hoverDate);\n  };\n\n  _proto.isInHoveredSpan = function isInHoveredSpan(day) {\n    var _this$props17 = this.props,\n        startDate = _this$props17.startDate,\n        endDate = _this$props17.endDate;\n\n    var _ref4 = this.state || {},\n        hoverDate = _ref4.hoverDate;\n\n    var isForwardRange = !!startDate && !endDate && (day.isBetween(startDate, hoverDate) || (0, _isSameDay[\"default\"])(hoverDate, day));\n    var isBackwardRange = !!endDate && !startDate && (day.isBetween(hoverDate, endDate) || (0, _isSameDay[\"default\"])(hoverDate, day));\n    var isValidDayHovered = hoverDate && !this.isBlocked(hoverDate);\n    return (isForwardRange || isBackwardRange) && isValidDayHovered;\n  };\n\n  _proto.isInSelectedSpan = function isInSelectedSpan(day) {\n    var _this$props18 = this.props,\n        startDate = _this$props18.startDate,\n        endDate = _this$props18.endDate;\n    return day.isBetween(startDate, endDate, 'days');\n  };\n\n  _proto.isLastInRange = function isLastInRange(day) {\n    var endDate = this.props.endDate;\n    return this.isInSelectedSpan(day) && (0, _isNextDay[\"default\"])(day, endDate);\n  };\n\n  _proto.isStartDate = function isStartDate(day) {\n    var startDate = this.props.startDate;\n    return (0, _isSameDay[\"default\"])(day, startDate);\n  };\n\n  _proto.isBlocked = function isBlocked(day) {\n    var blockDaysViolatingMinNights = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var _this$props19 = this.props,\n        isDayBlocked = _this$props19.isDayBlocked,\n        isOutsideRange = _this$props19.isOutsideRange;\n    return isDayBlocked(day) || isOutsideRange(day) || blockDaysViolatingMinNights && this.doesNotMeetMinimumNights(day);\n  };\n\n  _proto.isToday = function isToday(day) {\n    return (0, _isSameDay[\"default\"])(day, this.today);\n  };\n\n  _proto.isFirstDayOfWeek = function isFirstDayOfWeek(day) {\n    var firstDayOfWeek = this.props.firstDayOfWeek;\n    return day.day() === (firstDayOfWeek || _moment[\"default\"].localeData().firstDayOfWeek());\n  };\n\n  _proto.isLastDayOfWeek = function isLastDayOfWeek(day) {\n    var firstDayOfWeek = this.props.firstDayOfWeek;\n    return day.day() === ((firstDayOfWeek || _moment[\"default\"].localeData().firstDayOfWeek()) + 6) % 7;\n  };\n\n  _proto.isFirstPossibleEndDateForHoveredStartDate = function isFirstPossibleEndDateForHoveredStartDate(day, hoverDate) {\n    var _this$props20 = this.props,\n        focusedInput = _this$props20.focusedInput,\n        getMinNightsForHoverDate = _this$props20.getMinNightsForHoverDate;\n    if (focusedInput !== _constants.END_DATE || !hoverDate || this.isBlocked(hoverDate)) return false;\n    var minNights = getMinNightsForHoverDate(hoverDate);\n    var firstAvailableEndDate = hoverDate.clone().add(minNights, 'days');\n    return (0, _isSameDay[\"default\"])(day, firstAvailableEndDate);\n  };\n\n  _proto.beforeSelectedEnd = function beforeSelectedEnd(day) {\n    var endDate = this.props.endDate;\n    return (0, _isBeforeDay[\"default\"])(day, endDate);\n  };\n\n  _proto.isDayBeforeHoveredEndDate = function isDayBeforeHoveredEndDate(day) {\n    var _this$props21 = this.props,\n        startDate = _this$props21.startDate,\n        endDate = _this$props21.endDate,\n        minimumNights = _this$props21.minimumNights;\n\n    var _ref5 = this.state || {},\n        hoverDate = _ref5.hoverDate;\n\n    return !!endDate && !startDate && !this.isBlocked(day) && (0, _isPreviousDay[\"default\"])(hoverDate, day) && minimumNights > 0 && (0, _isSameDay[\"default\"])(hoverDate, endDate);\n  };\n\n  _proto.render = function render() {\n    var _this$props22 = this.props,\n        numberOfMonths = _this$props22.numberOfMonths,\n        orientation = _this$props22.orientation,\n        monthFormat = _this$props22.monthFormat,\n        renderMonthText = _this$props22.renderMonthText,\n        renderWeekHeaderElement = _this$props22.renderWeekHeaderElement,\n        dayPickerNavigationInlineStyles = _this$props22.dayPickerNavigationInlineStyles,\n        navPosition = _this$props22.navPosition,\n        navPrev = _this$props22.navPrev,\n        navNext = _this$props22.navNext,\n        renderNavPrevButton = _this$props22.renderNavPrevButton,\n        renderNavNextButton = _this$props22.renderNavNextButton,\n        noNavButtons = _this$props22.noNavButtons,\n        noNavNextButton = _this$props22.noNavNextButton,\n        noNavPrevButton = _this$props22.noNavPrevButton,\n        onOutsideClick = _this$props22.onOutsideClick,\n        withPortal = _this$props22.withPortal,\n        enableOutsideDays = _this$props22.enableOutsideDays,\n        firstDayOfWeek = _this$props22.firstDayOfWeek,\n        renderKeyboardShortcutsButton = _this$props22.renderKeyboardShortcutsButton,\n        renderKeyboardShortcutsPanel = _this$props22.renderKeyboardShortcutsPanel,\n        hideKeyboardShortcutsPanel = _this$props22.hideKeyboardShortcutsPanel,\n        daySize = _this$props22.daySize,\n        focusedInput = _this$props22.focusedInput,\n        renderCalendarDay = _this$props22.renderCalendarDay,\n        renderDayContents = _this$props22.renderDayContents,\n        renderCalendarInfo = _this$props22.renderCalendarInfo,\n        renderMonthElement = _this$props22.renderMonthElement,\n        calendarInfoPosition = _this$props22.calendarInfoPosition,\n        onBlur = _this$props22.onBlur,\n        onShiftTab = _this$props22.onShiftTab,\n        onTab = _this$props22.onTab,\n        isFocused = _this$props22.isFocused,\n        showKeyboardShortcuts = _this$props22.showKeyboardShortcuts,\n        isRTL = _this$props22.isRTL,\n        weekDayFormat = _this$props22.weekDayFormat,\n        dayAriaLabelFormat = _this$props22.dayAriaLabelFormat,\n        verticalHeight = _this$props22.verticalHeight,\n        noBorder = _this$props22.noBorder,\n        transitionDuration = _this$props22.transitionDuration,\n        verticalBorderSpacing = _this$props22.verticalBorderSpacing,\n        horizontalMonthPadding = _this$props22.horizontalMonthPadding;\n    var _this$state7 = this.state,\n        currentMonth = _this$state7.currentMonth,\n        phrases = _this$state7.phrases,\n        visibleDays = _this$state7.visibleDays,\n        disablePrev = _this$state7.disablePrev,\n        disableNext = _this$state7.disableNext;\n    return _react[\"default\"].createElement(_DayPicker[\"default\"], {\n      orientation: orientation,\n      enableOutsideDays: enableOutsideDays,\n      modifiers: visibleDays,\n      numberOfMonths: numberOfMonths,\n      onDayClick: this.onDayClick,\n      onDayMouseEnter: this.onDayMouseEnter,\n      onDayMouseLeave: this.onDayMouseLeave,\n      onPrevMonthClick: this.onPrevMonthClick,\n      onNextMonthClick: this.onNextMonthClick,\n      onMonthChange: this.onMonthChange,\n      onTab: onTab,\n      onShiftTab: onShiftTab,\n      onYearChange: this.onYearChange,\n      onGetNextScrollableMonths: this.onGetNextScrollableMonths,\n      onGetPrevScrollableMonths: this.onGetPrevScrollableMonths,\n      monthFormat: monthFormat,\n      renderMonthText: renderMonthText,\n      renderWeekHeaderElement: renderWeekHeaderElement,\n      withPortal: withPortal,\n      hidden: !focusedInput,\n      initialVisibleMonth: function initialVisibleMonth() {\n        return currentMonth;\n      },\n      daySize: daySize,\n      onOutsideClick: onOutsideClick,\n      disablePrev: disablePrev,\n      disableNext: disableNext,\n      dayPickerNavigationInlineStyles: dayPickerNavigationInlineStyles,\n      navPosition: navPosition,\n      navPrev: navPrev,\n      navNext: navNext,\n      renderNavPrevButton: renderNavPrevButton,\n      renderNavNextButton: renderNavNextButton,\n      noNavButtons: noNavButtons,\n      noNavPrevButton: noNavPrevButton,\n      noNavNextButton: noNavNextButton,\n      renderCalendarDay: renderCalendarDay,\n      renderDayContents: renderDayContents,\n      renderCalendarInfo: renderCalendarInfo,\n      renderMonthElement: renderMonthElement,\n      renderKeyboardShortcutsButton: renderKeyboardShortcutsButton,\n      renderKeyboardShortcutsPanel: renderKeyboardShortcutsPanel,\n      calendarInfoPosition: calendarInfoPosition,\n      firstDayOfWeek: firstDayOfWeek,\n      hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,\n      isFocused: isFocused,\n      getFirstFocusableDay: this.getFirstFocusableDay,\n      onBlur: onBlur,\n      showKeyboardShortcuts: showKeyboardShortcuts,\n      phrases: phrases,\n      isRTL: isRTL,\n      weekDayFormat: weekDayFormat,\n      dayAriaLabelFormat: dayAriaLabelFormat,\n      verticalHeight: verticalHeight,\n      verticalBorderSpacing: verticalBorderSpacing,\n      noBorder: noBorder,\n      transitionDuration: transitionDuration,\n      horizontalMonthPadding: horizontalMonthPadding\n    });\n  };\n\n  return DayPickerRangeController;\n}(_react[\"default\"].PureComponent || _react[\"default\"].Component);\n\nexports[\"default\"] = DayPickerRangeController;\nDayPickerRangeController.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nDayPickerRangeController.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}