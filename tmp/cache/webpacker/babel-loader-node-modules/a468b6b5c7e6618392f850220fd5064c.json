{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $preventExtensions = GetIntrinsic('%Object.preventExtensions%');\n\nvar $gOPD = require('../helpers/getOwnPropertyDescriptor');\n\nvar $gOPN = GetIntrinsic('%Object.getOwnPropertyNames%');\n\nvar forEach = require('../helpers/forEach');\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\n\nvar IsAccessorDescriptor = require('./IsAccessorDescriptor');\n\nvar ToPropertyDescriptor = require('./ToPropertyDescriptor');\n\nvar Type = require('./Type'); // https://www.ecma-international.org/ecma-262/6.0/#sec-setintegritylevel\n\n\nmodule.exports = function SetIntegrityLevel(O, level) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n\n  if (level !== 'sealed' && level !== 'frozen') {\n    throw new $TypeError('Assertion failed: `level` must be `\"sealed\"` or `\"frozen\"`');\n  }\n\n  if (!$preventExtensions) {\n    throw new $SyntaxError('SetIntegrityLevel requires native `Object.preventExtensions` support');\n  }\n\n  var status = $preventExtensions(O);\n\n  if (!status) {\n    return false;\n  }\n\n  if (!$gOPN) {\n    throw new $SyntaxError('SetIntegrityLevel requires native `Object.getOwnPropertyNames` support');\n  }\n\n  var theKeys = $gOPN(O);\n\n  if (level === 'sealed') {\n    forEach(theKeys, function (k) {\n      DefinePropertyOrThrow(O, k, {\n        configurable: false\n      });\n    });\n  } else if (level === 'frozen') {\n    forEach(theKeys, function (k) {\n      var currentDesc = $gOPD(O, k);\n\n      if (typeof currentDesc !== 'undefined') {\n        var desc;\n\n        if (IsAccessorDescriptor(ToPropertyDescriptor(currentDesc))) {\n          desc = {\n            configurable: false\n          };\n        } else {\n          desc = {\n            configurable: false,\n            writable: false\n          };\n        }\n\n        DefinePropertyOrThrow(O, k, desc);\n      }\n    });\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}