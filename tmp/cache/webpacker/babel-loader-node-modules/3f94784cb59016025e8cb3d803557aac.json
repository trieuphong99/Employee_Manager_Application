{"ast":null,"code":"var _jsxFileName = \"/home/phong/rails/imp/app/javascript/commons/components/dateRangePicker/index.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from \"react\";\nimport \"react-dates/initialize\";\nimport { DateRangePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport './style.css';\nimport moment from 'moment';\nimport { isInclusivelyBeforeDay } from 'react-dates';\nimport Time from '../../const/Time';\n\nvar DatePicker = function DatePicker(props) {\n  var block = props.block,\n      blockRange = props.blockRange,\n      date = props.date,\n      setDate = props.setDate;\n\n  var _useState = useState(date ? moment(date.startTime, Time.crossDMY) : moment().subtract(1, 'months').startOf(\"month\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      startDate = _useState2[0],\n      setStartDate = _useState2[1];\n\n  var _useState3 = useState(date ? moment(date.endTime, Time.crossDMY) : moment().add(1, 'months').endOf('month')),\n      _useState4 = _slicedToArray(_useState3, 2),\n      endDate = _useState4[0],\n      setEndDate = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      focusedInput = _useState6[0],\n      setFocusedInput = _useState6[1];\n\n  var handleDatesChange = function handleDatesChange(_ref) {\n    var startDate = _ref.startDate,\n        endDate = _ref.endDate;\n    setStartDate(startDate);\n    setEndDate(endDate);\n\n    if (startDate !== null && endDate !== null && focusedInput === \"endDate\") {\n      setDate({\n        startTime: startDate.format(Time.DMY),\n        endTime: endDate.format(Time.DMY)\n      });\n    }\n  };\n\n  var _isOutsideRange = function isOutsideRange(day) {\n    if (blockRange === \"left\") return isInclusivelyBeforeDay(day, moment());else if (blockRange === \"none\") return false;else return !isInclusivelyBeforeDay(day, moment());\n  };\n\n  return React.createElement(DateRangePicker, {\n    startDate: startDate // momentPropTypes.momentObj or null,\n    ,\n    startDateId: \"your_unique_start_date_id\" // PropTypes.string.isRequired,\n    ,\n    endDate: endDate // momentPropTypes.momentObj or null,\n    ,\n    endDateId: \"your_unique_end_date_id\" // PropTypes.string.isRequired,\n    ,\n    focusedInput: focusedInput // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n    ,\n    onFocusChange: function onFocusChange(focusedInput) {\n      return setFocusedInput(focusedInput);\n    } // PropTypes.func.isRequired,\n    ,\n    onDatesChange: handleDatesChange,\n    block: block,\n    displayFormat: Time.crossDMY,\n    minimumNights: 0,\n    isOutsideRange: function isOutsideRange(day) {\n      return _isOutsideRange(day);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  });\n};\n\nexport default DatePicker;","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/commons/components/dateRangePicker/index.js"],"names":["React","useState","DateRangePicker","moment","isInclusivelyBeforeDay","Time","DatePicker","props","block","blockRange","date","setDate","startTime","crossDMY","subtract","startOf","startDate","setStartDate","endTime","add","endOf","endDate","setEndDate","focusedInput","setFocusedInput","handleDatesChange","format","DMY","isOutsideRange","day"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"react-dates/initialize\";\nimport { DateRangePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport './style.css'\nimport moment from 'moment'\nimport { isInclusivelyBeforeDay } from 'react-dates';\nimport Time from '../../const/Time'\n\nconst DatePicker = props => {\n  const { block, blockRange, date, setDate } = props\n  const [startDate, setStartDate] = useState(date ? moment(date.startTime, Time.crossDMY) : moment().subtract(1, 'months').startOf(\"month\"));\n  const [endDate, setEndDate] = useState(date ? moment(date.endTime, Time.crossDMY) : moment().add(1, 'months').endOf('month'));\n  const [focusedInput, setFocusedInput] = useState(null);\n\n  const handleDatesChange = ({ startDate, endDate }) => {\n    setStartDate(startDate);\n    setEndDate(endDate);\n    if (startDate !== null && endDate !== null && focusedInput === \"endDate\") {\n      setDate({\n        startTime: startDate.format(Time.DMY),\n        endTime: endDate.format(Time.DMY)\n      })\n    }\n  };\n\n  const isOutsideRange = day => {\n    if (blockRange === \"left\")\n      return isInclusivelyBeforeDay(day, moment())\n    else if (blockRange === \"none\")\n      return false\n    else\n      return !isInclusivelyBeforeDay(day, moment())\n  }\n\n  return (\n    <DateRangePicker\n      startDate={startDate} // momentPropTypes.momentObj or null,\n      startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n      endDate={endDate} // momentPropTypes.momentObj or null,\n      endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n      focusedInput={focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n      onFocusChange={focusedInput => setFocusedInput(focusedInput)} // PropTypes.func.isRequired,\n      onDatesChange={handleDatesChange}\n      block={block}\n      displayFormat={Time.crossDMY}\n      minimumNights={0}\n      isOutsideRange={day => isOutsideRange(day)}\n    />\n  );\n}\n\nexport default DatePicker;\n"]},"metadata":{},"sourceType":"module"}