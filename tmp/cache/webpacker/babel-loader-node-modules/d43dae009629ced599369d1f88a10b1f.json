{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $EvalError = GetIntrinsic('%EvalError%');\n\nvar DayWithinYear = require('./DayWithinYear');\n\nvar InLeapYear = require('./InLeapYear');\n\nvar MonthFromTime = require('./MonthFromTime'); // https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.5\n\n\nmodule.exports = function DateFromTime(t) {\n  var m = MonthFromTime(t);\n  var d = DayWithinYear(t);\n\n  if (m === 0) {\n    return d + 1;\n  }\n\n  if (m === 1) {\n    return d - 30;\n  }\n\n  var leap = InLeapYear(t);\n\n  if (m === 2) {\n    return d - 58 - leap;\n  }\n\n  if (m === 3) {\n    return d - 89 - leap;\n  }\n\n  if (m === 4) {\n    return d - 119 - leap;\n  }\n\n  if (m === 5) {\n    return d - 150 - leap;\n  }\n\n  if (m === 6) {\n    return d - 180 - leap;\n  }\n\n  if (m === 7) {\n    return d - 211 - leap;\n  }\n\n  if (m === 8) {\n    return d - 242 - leap;\n  }\n\n  if (m === 9) {\n    return d - 272 - leap;\n  }\n\n  if (m === 10) {\n    return d - 303 - leap;\n  }\n\n  if (m === 11) {\n    return d - 333 - leap;\n  }\n\n  throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);\n};","map":null,"metadata":{},"sourceType":"module"}