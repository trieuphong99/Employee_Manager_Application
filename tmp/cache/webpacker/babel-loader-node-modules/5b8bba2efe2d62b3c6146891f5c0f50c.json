{"ast":null,"code":"import { __spreadArrays } from 'tslib';\n\nvar toDurationString = function toDurationString(duration) {\n  return duration + \"ms\";\n};\n\nvar getScale = function getScale(_a) {\n  var height = _a.height,\n      innerHeight = _a.innerHeight,\n      innerWidth = _a.innerWidth,\n      width = _a.width,\n      zoomMargin = _a.zoomMargin;\n  var scaleX = innerWidth / (width + zoomMargin);\n  var scaleY = innerHeight / (height + zoomMargin);\n  var scale = Math.min(scaleX, scaleY);\n  return scale;\n};\n\nvar getModalContentStyle = function getModalContentStyle(_a) {\n  var height = _a.height,\n      innerHeight = _a.innerHeight,\n      innerWidth = _a.innerWidth,\n      isLoaded = _a.isLoaded,\n      isUnloading = _a.isUnloading,\n      left = _a.left,\n      originalTransform = _a.originalTransform,\n      top = _a.top,\n      transitionDuration = _a.transitionDuration,\n      width = _a.width,\n      zoomMargin = _a.zoomMargin;\n  var transitionDurationString = toDurationString(transitionDuration);\n\n  if (!isLoaded || isUnloading) {\n    var initTransform = __spreadArrays([\"scale(1)\", \"translate(0, 0)\"], originalTransform ? [originalTransform] : []).join(' ');\n\n    return {\n      height: height,\n      left: left,\n      top: top,\n      transform: initTransform,\n      WebkitTransform: initTransform,\n      transitionDuration: transitionDurationString,\n      width: width\n    };\n  } // Get amount to scale item\n\n\n  var scale = getScale({\n    height: height,\n    innerWidth: innerWidth,\n    innerHeight: innerHeight,\n    width: width,\n    zoomMargin: zoomMargin\n  }); // Get the the coords for center of the viewport\n\n  var viewportX = innerWidth / 2;\n  var viewportY = innerHeight / 2; // Get the coords for center of the parent item\n\n  var childCenterX = left + width / 2;\n  var childCenterY = top + height / 2; // Get offset amounts for item coords to be centered on screen\n\n  var translateX = (viewportX - childCenterX) / scale;\n  var translateY = (viewportY - childCenterY) / scale; // Build transform style, including any original transform\n\n  var transform = __spreadArrays([\"scale(\" + scale + \")\", \"translate(\" + translateX + \"px, \" + translateY + \"px)\"], originalTransform ? [originalTransform] : []).join(' ');\n\n  return {\n    height: height,\n    left: left,\n    top: top,\n    transform: transform,\n    WebkitTransform: transform,\n    transitionDuration: transitionDurationString,\n    width: width\n  };\n};\n\nvar getModalOverlayStyle = function getModalOverlayStyle(_a) {\n  var isLoaded = _a.isLoaded,\n      isUnloading = _a.isUnloading,\n      overlayBgColorEnd = _a.overlayBgColorEnd,\n      overlayBgColorStart = _a.overlayBgColorStart,\n      transitionDuration = _a.transitionDuration,\n      zoomZindex = _a.zoomZindex;\n  var style = {\n    backgroundColor: overlayBgColorStart,\n    transitionDuration: toDurationString(transitionDuration),\n    zIndex: zoomZindex\n  };\n\n  if (isLoaded && !isUnloading) {\n    style.backgroundColor = overlayBgColorEnd;\n  }\n\n  return style;\n};\n\nvar pseudoParentEl = {\n  getBoundingClientRect: function getBoundingClientRect() {\n    return {\n      height: 0,\n      left: 0,\n      top: 0,\n      width: 0\n    };\n  },\n  style: {\n    transform: null\n  }\n};\nexport { getModalContentStyle, getModalOverlayStyle, getScale, pseudoParentEl };","map":null,"metadata":{},"sourceType":"module"}