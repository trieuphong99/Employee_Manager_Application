{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withStyles = withStyles;\nObject.defineProperty(exports, \"withStylesPropTypes\", {\n  enumerable: true,\n  get: function get() {\n    return _withStylesPropTypes.withStylesPropTypes;\n  }\n});\nexports.css = exports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar _getComponentName = _interopRequireDefault(require(\"airbnb-prop-types/build/helpers/getComponentName\"));\n\nvar _emptyStylesFn = _interopRequireDefault(require(\"./utils/emptyStylesFn\"));\n\nvar _perf = _interopRequireDefault(require(\"./utils/perf\"));\n\nvar _WithStylesContext = _interopRequireWildcard(require(\"./WithStylesContext\"));\n\nvar _ThemedStyleSheet = _interopRequireWildcard(require(\"./ThemedStyleSheet\"));\n\nvar _withStylesPropTypes = require(\"./withStylesPropTypes\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * A higher order function that returns a higher order class component that injects\n * CSS-in-JS props derived from the react-with-styles theme, interface, and\n * direction provided through the WithStylesContext provider.\n *\n * The function should be used as follows:\n * `withStyles((theme) => styles, options)(Component)`\n *\n * Options can be used to rename the injected props, memoize the component, and flush\n * the styles to the styles tag (or whatever the interface implements as flush) before\n * rendering.\n *\n * @export\n * @param {Function|null|undefined} [stylesFn=EMPTY_STYLES_FN]\n * @param {Object} [{\n *     stylesPropName = 'styles',\n *     themePropName = 'theme',\n *     cssPropName = 'css',\n *     flushBefore = false,\n *     pureComponent = false,\n *   }={}]\n * @returns a higher order component that wraps the provided component and injects\n * the react-with-styles css, styles, and theme props.\n */\n\n\nfunction withStyles() {\n  var stylesFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emptyStylesFn[\"default\"];\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$stylesPropName = _ref.stylesPropName,\n      stylesPropName = _ref$stylesPropName === void 0 ? 'styles' : _ref$stylesPropName,\n      _ref$themePropName = _ref.themePropName,\n      themePropName = _ref$themePropName === void 0 ? 'theme' : _ref$themePropName,\n      _ref$cssPropName = _ref.cssPropName,\n      cssPropName = _ref$cssPropName === void 0 ? 'css' : _ref$cssPropName,\n      _ref$flushBefore = _ref.flushBefore,\n      flushBefore = _ref$flushBefore === void 0 ? false : _ref$flushBefore,\n      _ref$pureComponent = _ref.pureComponent,\n      pureComponent = _ref$pureComponent === void 0 ? false : _ref$pureComponent;\n\n  stylesFn = stylesFn || _emptyStylesFn[\"default\"];\n  var BaseClass = pureComponent ? _react[\"default\"].PureComponent : _react[\"default\"].Component;\n  /** Cache for storing the result of stylesFn(theme) for all themes. */\n\n  var stylesFnResultCacheMap = typeof WeakMap === 'undefined' ? new Map() : new WeakMap();\n\n  function getOrCreateStylesFnResultCache(theme) {\n    // Get and store the result in the stylesFnResultsCache for the component\n    // -- not the instance -- so we only apply the theme to the stylesFn\n    // once per theme for this component.\n    var cachedResultForTheme = stylesFnResultCacheMap.get(theme);\n    var stylesFnResult = cachedResultForTheme || stylesFn(theme) || {};\n    stylesFnResultCacheMap.set(theme, stylesFnResult); // cache the result of stylesFn(theme)\n\n    return stylesFnResult;\n  }\n  /**\n   * Cache for storing the results of computations:\n   * `WeakMap<Theme, WeakMap<typeof WithStyles, { ltr: {}, rtl: {} }>>`\n   * Falling back to `Map` whenever `WeakMap` is not supported\n   */\n\n\n  var withStylesCache = typeof WeakMap === 'undefined' ? new Map() : new WeakMap();\n\n  function getComponentCache(theme, component, direction) {\n    var themeCache = withStylesCache.get(theme);\n\n    if (!themeCache) {\n      return null;\n    }\n\n    var componentCache = themeCache.get(component);\n\n    if (!componentCache) {\n      return null;\n    }\n\n    return componentCache[direction];\n  }\n\n  function updateComponentCache(theme, component, direction, results) {\n    var themeCache = withStylesCache.get(theme);\n\n    if (!themeCache) {\n      themeCache = typeof WeakMap === 'undefined' ? new Map() : new WeakMap();\n      withStylesCache.set(theme, themeCache);\n    }\n\n    var componentCache = themeCache.get(component);\n\n    if (!componentCache) {\n      componentCache = {\n        ltr: {},\n        rtl: {}\n      };\n      themeCache.set(component, componentCache);\n    }\n\n    componentCache[direction] = results;\n  }\n  /** Derive the create function from the interface and direction */\n\n\n  function makeCreateFn(direction, stylesInterface) {\n    var directionSelector = direction === _WithStylesContext.DIRECTIONS.RTL ? 'RTL' : 'LTR';\n    var create = stylesInterface[\"create\".concat(directionSelector)] || stylesInterface.create;\n\n    if (process.env.NODE_ENV !== 'production') {\n      create = (0, _perf[\"default\"])('create')(create);\n    }\n\n    return create;\n  }\n  /** Derive the resolve function from the interface and direction */\n\n\n  function makeResolveFn(direction, stylesInterface) {\n    var directionSelector = direction === _WithStylesContext.DIRECTIONS.RTL ? 'RTL' : 'LTR';\n    var resolve = stylesInterface[\"resolve\".concat(directionSelector)] || stylesInterface.resolve;\n\n    if (process.env.NODE_ENV !== 'production') {\n      resolve = (0, _perf[\"default\"])('resolve')(resolve);\n    }\n\n    return resolve;\n  } // The function that wraps the provided component in a wrapper\n  // component that injects the withStyles props\n\n\n  return function withStylesHOC(WrappedComponent) {\n    var wrappedComponentName = (0, _getComponentName[\"default\"])(WrappedComponent); // The wrapper component that injects the withStyles props\n\n    var WithStyles =\n    /*#__PURE__*/\n    function (_BaseClass) {\n      (0, _inheritsLoose2[\"default\"])(WithStyles, _BaseClass);\n\n      function WithStyles() {\n        return _BaseClass.apply(this, arguments) || this;\n      }\n\n      var _proto = WithStyles.prototype;\n\n      _proto.getCurrentInterface = function getCurrentInterface() {\n        // Fallback to the singleton implementation\n        return this.context && this.context.stylesInterface || (0, _ThemedStyleSheet._getInterface)();\n      };\n\n      _proto.getCurrentTheme = function getCurrentTheme() {\n        // Fallback to the singleton implementation\n        return this.context && this.context.stylesTheme || (0, _ThemedStyleSheet._getTheme)();\n      };\n\n      _proto.getCurrentDirection = function getCurrentDirection() {\n        return this.context && this.context.direction || _WithStylesContext.DIRECTIONS.LTR;\n      };\n\n      _proto.getProps = function getProps() {\n        // Get the styles interface, theme, and direction from context\n        var stylesInterface = this.getCurrentInterface();\n        var theme = this.getCurrentTheme();\n        var direction = this.getCurrentDirection(); // Use a cache to store the interface methods and created styles by direction.\n        // This way, if the theme and the interface don't change, we do not recalculate\n        // styles or any other interface derivations. They are effectively only calculated\n        // once per direction, until the theme or interface change.\n        // Assume: always an object.\n\n        var componentCache = getComponentCache(theme, WithStyles, direction); // Determine what's changed\n\n        var interfaceChanged = !componentCache || !componentCache.stylesInterface || stylesInterface && componentCache.stylesInterface !== stylesInterface;\n        var themeChanged = !componentCache || componentCache.theme !== theme; // If the interface and theme haven't changed for this direction,\n        // we return the cached props immediately.\n\n        if (!interfaceChanged && !themeChanged) {\n          return componentCache.props;\n        } // If the theme or the interface changed, then there are some values\n        // we need to recalculate. We avoid recalculating the ones we already\n        // calculated in the past if the objects they're derived from have not\n        // changed.\n\n\n        var create = interfaceChanged && makeCreateFn(direction, stylesInterface) || componentCache.create;\n        var resolve = interfaceChanged && makeResolveFn(direction, stylesInterface) || componentCache.resolve; // Derive the css function prop\n\n        var css = interfaceChanged && function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return resolve(args);\n        } || componentCache.props.css; // Get or calculate the themed styles from the stylesFn:\n        // Uses a separate cache at the component level, not at the instance level,\n        // to only apply the theme to the stylesFn once per component class per theme.\n\n\n        var stylesFnResult = getOrCreateStylesFnResultCache(theme); // Derive the styles prop: recalculate it if create changed, or stylesFnResult changed\n\n        var styles = (interfaceChanged || stylesFnResult !== componentCache.stylesFnResult) && create(stylesFnResult) || componentCache.props.styles; // Put the new props together\n\n        var props = {\n          css: css,\n          styles: styles,\n          theme: theme\n        }; // Update the cache with all the new values\n\n        updateComponentCache(theme, WithStyles, direction, {\n          stylesInterface: stylesInterface,\n          theme: theme,\n          create: create,\n          resolve: resolve,\n          stylesFnResult: stylesFnResult,\n          props: props\n        });\n        return props;\n      };\n\n      _proto.flush = function flush() {\n        var stylesInterface = this.getCurrentInterface();\n\n        if (stylesInterface && stylesInterface.flush) {\n          stylesInterface.flush();\n        }\n      };\n\n      _proto.render = function render() {\n        var _ref2; // We only want to re-render if the theme, stylesInterface, or direction change.\n        // These values are in context so we're listening for their updates.\n        // this.getProps() derives the props from the theme, stylesInterface, and direction in\n        // context, and memoizes them on the instance per direction.\n\n\n        var _this$getProps = this.getProps(),\n            theme = _this$getProps.theme,\n            styles = _this$getProps.styles,\n            css = _this$getProps.css; // Flush if specified\n\n\n        if (flushBefore) {\n          this.flush();\n        }\n\n        return _react[\"default\"].createElement(WrappedComponent, (0, _extends2[\"default\"])({}, this.props, (_ref2 = {}, (0, _defineProperty2[\"default\"])(_ref2, themePropName, theme), (0, _defineProperty2[\"default\"])(_ref2, stylesPropName, styles), (0, _defineProperty2[\"default\"])(_ref2, cssPropName, css), _ref2)));\n      };\n\n      return WithStyles;\n    }(BaseClass); // Copy the wrapped component's prop types and default props on WithStyles\n\n\n    if (WrappedComponent.propTypes) {\n      WithStyles.propTypes = _objectSpread({}, WrappedComponent.propTypes);\n      delete WithStyles.propTypes[stylesPropName];\n      delete WithStyles.propTypes[themePropName];\n      delete WithStyles.propTypes[cssPropName];\n    }\n\n    if (WrappedComponent.defaultProps) {\n      WithStyles.defaultProps = _objectSpread({}, WrappedComponent.defaultProps);\n    }\n\n    WithStyles.contextType = _WithStylesContext[\"default\"];\n    WithStyles.WrappedComponent = WrappedComponent;\n    WithStyles.displayName = \"withStyles(\".concat(wrappedComponentName, \")\");\n    return (0, _hoistNonReactStatics[\"default\"])(WithStyles, WrappedComponent);\n  };\n}\n\nvar _default = withStyles;\n/**\n * Deprecated: Do not use directly. Please wrap your component in `withStyles` and use the `css`\n * prop injected via props instead.\n */\n\nexports[\"default\"] = _default;\nvar css = _ThemedStyleSheet[\"default\"].resolveLTR;\nexports.css = css;","map":null,"metadata":{},"sourceType":"module"}