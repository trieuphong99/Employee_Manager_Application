{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _ from 'lodash';\nexport var SliceData = function SliceData(data, index, item) {\n  return [].concat(_toConsumableArray(_.slice(data, 0, index)), [item], _toConsumableArray(_.slice(data, index + 1)));\n};","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/commons/function/sliceData.js"],"names":["_","SliceData","data","index","item","slice"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAd,EAAuB;AAC9C,sCACOJ,CAAC,CAACK,KAAF,CAAQH,IAAR,EAAc,CAAd,EAAiBC,KAAjB,CADP,IAEIC,IAFJ,sBAGOJ,CAAC,CAACK,KAAF,CAAQH,IAAR,EAAcC,KAAK,GAAG,CAAtB,CAHP;AAMD,CAPM","sourcesContent":["import _ from 'lodash';\n\nexport const SliceData = (data, index, item) => {\n  return ( [\n      ..._.slice(data, 0, index),\n      item,\n      ..._.slice(data, index + 1)\n    ])\n  \n}\n"]},"metadata":{},"sourceType":"module"}