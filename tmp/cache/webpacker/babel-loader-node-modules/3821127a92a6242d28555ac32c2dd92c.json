{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/phong/rails/imp/app/javascript/staff/components/dayOffs/dateRangePicker.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from \"react\";\nimport \"react-dates/initialize\";\nimport { DateRangePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport moment from 'moment';\nimport { isInclusivelyBeforeDay } from 'react-dates';\nimport Time from '../../../commons/const/Time';\n\nvar DatePicker = function DatePicker(props) {\n  var startDate = props.startDate,\n      endDate = props.endDate,\n      block = props.block,\n      blockRange = props.blockRange,\n      setFieldValue = props.setFieldValue;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusedInput = _useState2[0],\n      setFocusedInput = _useState2[1];\n\n  var handleDatesChange = function handleDatesChange(_ref) {\n    var startDate = _ref.startDate,\n        endDate = _ref.endDate;\n    setFieldValue('from_date', startDate);\n    setFieldValue('to_date', endDate);\n  };\n\n  var _isOutsideRange = function isOutsideRange(day) {\n    if (blockRange === \"left\") return isInclusivelyBeforeDay(day, moment());else if (blockRange === \"none\") return false;else return !isInclusivelyBeforeDay(day, moment());\n  };\n\n  return /*#__PURE__*/React.createElement(DateRangePicker, {\n    startDate: startDate // momentPropTypes.momentObj or null,\n    ,\n    startDateId: \"your_unique_start_date_id\" // PropTypes.string.isRequired,\n    ,\n    endDate: endDate // momentPropTypes.momentObj or null,\n    ,\n    endDateId: \"your_unique_end_date_id\" // PropTypes.string.isRequired,\n    ,\n    focusedInput: focusedInput // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n    ,\n    onFocusChange: function onFocusChange(focusedInput) {\n      return setFocusedInput(focusedInput);\n    } // PropTypes.func.isRequired,\n    ,\n    onDatesChange: handleDatesChange,\n    block: block,\n    displayFormat: Time.crossDMY,\n    minimumNights: 0,\n    isOutsideRange: function isOutsideRange(day) {\n      return _isOutsideRange(day);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default DatePicker;","map":{"version":3,"sources":["/home/phong/rails/imp/app/javascript/staff/components/dayOffs/dateRangePicker.js"],"names":["React","useState","DateRangePicker","moment","isInclusivelyBeforeDay","Time","DatePicker","props","startDate","endDate","block","blockRange","setFieldValue","focusedInput","setFocusedInput","handleDatesChange","isOutsideRange","day","crossDMY"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,wBAAP;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,OAAO,qCAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,OAAOC,IAAP,MAAiB,6BAAjB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAAA,MAClBC,SADkB,GACuCD,KADvC,CAClBC,SADkB;AAAA,MACPC,OADO,GACuCF,KADvC,CACPE,OADO;AAAA,MACEC,KADF,GACuCH,KADvC,CACEG,KADF;AAAA,MACSC,UADT,GACuCJ,KADvC,CACSI,UADT;AAAA,MACqBC,aADrB,GACuCL,KADvC,CACqBK,aADrB;;AAAA,kBAEcX,QAAQ,CAAC,IAAD,CAFtB;AAAA;AAAA,MAEnBY,YAFmB;AAAA,MAELC,eAFK;;AAG1B,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA4B;AAAA,QAAzBP,SAAyB,QAAzBA,SAAyB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AAClDG,IAAAA,aAAa,CAAC,WAAD,EAAcJ,SAAd,CAAb;AACAI,IAAAA,aAAa,CAAC,SAAD,EAAYH,OAAZ,CAAb;AACD,GAHH;;AAKA,MAAMO,eAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG,EAAI;AAC5B,QAAIN,UAAU,KAAK,MAAnB,EACE,OAAOP,sBAAsB,CAACa,GAAD,EAAMd,MAAM,EAAZ,CAA7B,CADF,KAEK,IAAIQ,UAAU,KAAK,MAAnB,EACH,OAAO,KAAP,CADG,KAGH,OAAO,CAACP,sBAAsB,CAACa,GAAD,EAAMd,MAAM,EAAZ,CAA9B;AACH,GAPD;;AASA,sBACE,oBAAC,eAAD;AACE,IAAA,SAAS,EAAEK,SADb,CACwB;AADxB;AAEE,IAAA,WAAW,EAAC,2BAFd,CAE0C;AAF1C;AAGE,IAAA,OAAO,EAAEC,OAHX,CAGoB;AAHpB;AAIE,IAAA,SAAS,EAAC,yBAJZ,CAIsC;AAJtC;AAKE,IAAA,YAAY,EAAEI,YALhB,CAK8B;AAL9B;AAME,IAAA,aAAa,EAAE,uBAAAA,YAAY;AAAA,aAAIC,eAAe,CAACD,YAAD,CAAnB;AAAA,KAN7B,CAMgE;AANhE;AAOE,IAAA,aAAa,EAAEE,iBAPjB;AAQE,IAAA,KAAK,EAAEL,KART;AASE,IAAA,aAAa,EAAEL,IAAI,CAACa,QATtB;AAUE,IAAA,aAAa,EAAE,CAVjB;AAWE,IAAA,cAAc,EAAE,wBAAAD,GAAG;AAAA,aAAID,eAAc,CAACC,GAAD,CAAlB;AAAA,KAXrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAeD,CAhCD;;AAkCA,eAAeX,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"react-dates/initialize\";\nimport { DateRangePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport moment from 'moment'\nimport { isInclusivelyBeforeDay } from 'react-dates';\nimport Time from '../../../commons/const/Time'\n\nconst DatePicker = props => {\n  const { startDate, endDate, block, blockRange, setFieldValue } = props\n  const [focusedInput, setFocusedInput] = useState(null);\n  const handleDatesChange = ({ startDate, endDate }) => {\n      setFieldValue('from_date', startDate)\n      setFieldValue('to_date', endDate)\n    };\n    \n  const isOutsideRange = day => {\n    if (blockRange === \"left\")\n      return isInclusivelyBeforeDay(day, moment())\n    else if (blockRange === \"none\")\n      return false\n    else\n      return !isInclusivelyBeforeDay(day, moment())\n  }\n\n  return (\n    <DateRangePicker\n      startDate={startDate} // momentPropTypes.momentObj or null,\n      startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n      endDate={endDate} // momentPropTypes.momentObj or null,\n      endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n      focusedInput={focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n      onFocusChange={focusedInput => setFocusedInput(focusedInput)} // PropTypes.func.isRequired,\n      onDatesChange={handleDatesChange}\n      block={block}\n      displayFormat={Time.crossDMY}\n      minimumNights={0}\n      isOutsideRange={day => isOutsideRange(day)}\n    />\n  );\n}\n\nexport default DatePicker;\n"]},"metadata":{},"sourceType":"module"}