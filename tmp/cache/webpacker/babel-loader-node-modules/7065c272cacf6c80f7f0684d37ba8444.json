{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _enzymeShallowEqual = _interopRequireDefault(require(\"enzyme-shallow-equal\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactMomentProptypes = _interopRequireDefault(require(\"react-moment-proptypes\"));\n\nvar _airbnbPropTypes = require(\"airbnb-prop-types\");\n\nvar _reactWithStyles = require(\"react-with-styles\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _consolidatedEvents = require(\"consolidated-events\");\n\nvar _defaultPhrases = require(\"../defaultPhrases\");\n\nvar _getPhrasePropTypes = _interopRequireDefault(require(\"../utils/getPhrasePropTypes\"));\n\nvar _noflip = _interopRequireDefault(require(\"../utils/noflip\"));\n\nvar _CalendarMonth = _interopRequireDefault(require(\"./CalendarMonth\"));\n\nvar _isTransitionEndSupported = _interopRequireDefault(require(\"../utils/isTransitionEndSupported\"));\n\nvar _getTransformStyles = _interopRequireDefault(require(\"../utils/getTransformStyles\"));\n\nvar _getCalendarMonthWidth = _interopRequireDefault(require(\"../utils/getCalendarMonthWidth\"));\n\nvar _toISOMonthString = _interopRequireDefault(require(\"../utils/toISOMonthString\"));\n\nvar _isPrevMonth = _interopRequireDefault(require(\"../utils/isPrevMonth\"));\n\nvar _isNextMonth = _interopRequireDefault(require(\"../utils/isNextMonth\"));\n\nvar _ModifiersShape = _interopRequireDefault(require(\"../shapes/ModifiersShape\"));\n\nvar _ScrollableOrientationShape = _interopRequireDefault(require(\"../shapes/ScrollableOrientationShape\"));\n\nvar _DayOfWeekShape = _interopRequireDefault(require(\"../shapes/DayOfWeekShape\"));\n\nvar _constants = require(\"../constants\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {\n  enableOutsideDays: _propTypes[\"default\"].bool,\n  firstVisibleMonthIndex: _propTypes[\"default\"].number,\n  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,\n  initialMonth: _reactMomentProptypes[\"default\"].momentObj,\n  isAnimating: _propTypes[\"default\"].bool,\n  numberOfMonths: _propTypes[\"default\"].number,\n  modifiers: _propTypes[\"default\"].objectOf(_propTypes[\"default\"].objectOf(_ModifiersShape[\"default\"])),\n  orientation: _ScrollableOrientationShape[\"default\"],\n  onDayClick: _propTypes[\"default\"].func,\n  onDayMouseEnter: _propTypes[\"default\"].func,\n  onDayMouseLeave: _propTypes[\"default\"].func,\n  onMonthTransitionEnd: _propTypes[\"default\"].func,\n  onMonthChange: _propTypes[\"default\"].func,\n  onYearChange: _propTypes[\"default\"].func,\n  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderCalendarDay: _propTypes[\"default\"].func,\n  renderDayContents: _propTypes[\"default\"].func,\n  translationValue: _propTypes[\"default\"].number,\n  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  daySize: _airbnbPropTypes.nonNegativeInteger,\n  focusedDate: _reactMomentProptypes[\"default\"].momentObj,\n  // indicates focusable day\n  isFocused: _propTypes[\"default\"].bool,\n  // indicates whether or not to move focus to focusable day\n  firstDayOfWeek: _DayOfWeekShape[\"default\"],\n  setMonthTitleHeight: _propTypes[\"default\"].func,\n  isRTL: _propTypes[\"default\"].bool,\n  transitionDuration: _airbnbPropTypes.nonNegativeInteger,\n  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,\n  // i18n\n  monthFormat: _propTypes[\"default\"].string,\n  phrases: _propTypes[\"default\"].shape((0, _getPhrasePropTypes[\"default\"])(_defaultPhrases.CalendarDayPhrases)),\n  dayAriaLabelFormat: _propTypes[\"default\"].string\n})) : {};\nvar defaultProps = {\n  enableOutsideDays: false,\n  firstVisibleMonthIndex: 0,\n  horizontalMonthPadding: 13,\n  initialMonth: (0, _moment[\"default\"])(),\n  isAnimating: false,\n  numberOfMonths: 1,\n  modifiers: {},\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  onDayClick: function onDayClick() {},\n  onDayMouseEnter: function onDayMouseEnter() {},\n  onDayMouseLeave: function onDayMouseLeave() {},\n  onMonthChange: function onMonthChange() {},\n  onYearChange: function onYearChange() {},\n  onMonthTransitionEnd: function onMonthTransitionEnd() {},\n  renderMonthText: null,\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  translationValue: null,\n  renderMonthElement: null,\n  daySize: _constants.DAY_SIZE,\n  focusedDate: null,\n  isFocused: false,\n  firstDayOfWeek: null,\n  setMonthTitleHeight: null,\n  isRTL: false,\n  transitionDuration: 200,\n  verticalBorderSpacing: undefined,\n  // i18n\n  monthFormat: 'MMMM YYYY',\n  // english locale\n  phrases: _defaultPhrases.CalendarDayPhrases,\n  dayAriaLabelFormat: undefined\n};\n\nfunction getMonths(initialMonth, numberOfMonths, withoutTransitionMonths) {\n  var month = initialMonth.clone();\n  if (!withoutTransitionMonths) month = month.subtract(1, 'month');\n  var months = [];\n\n  for (var i = 0; i < (withoutTransitionMonths ? numberOfMonths : numberOfMonths + 2); i += 1) {\n    months.push(month);\n    month = month.clone().add(1, 'month');\n  }\n\n  return months;\n}\n\nvar CalendarMonthGrid =\n/*#__PURE__*/\nfunction (_ref) {\n  (0, _inheritsLoose2[\"default\"])(CalendarMonthGrid, _ref);\n  var _proto = CalendarMonthGrid.prototype;\n\n  _proto[!_react[\"default\"].PureComponent && \"shouldComponentUpdate\"] = function (nextProps, nextState) {\n    return !(0, _enzymeShallowEqual[\"default\"])(this.props, nextProps) || !(0, _enzymeShallowEqual[\"default\"])(this.state, nextState);\n  };\n\n  function CalendarMonthGrid(props) {\n    var _this;\n\n    _this = _ref.call(this, props) || this;\n    var withoutTransitionMonths = props.orientation === _constants.VERTICAL_SCROLLABLE;\n    _this.state = {\n      months: getMonths(props.initialMonth, props.numberOfMonths, withoutTransitionMonths)\n    };\n    _this.isTransitionEndSupported = (0, _isTransitionEndSupported[\"default\"])();\n    _this.onTransitionEnd = _this.onTransitionEnd.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.setContainerRef = _this.setContainerRef.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.locale = _moment[\"default\"].locale();\n    _this.onMonthSelect = _this.onMonthSelect.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.onYearSelect = _this.onYearSelect.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.removeEventListener = (0, _consolidatedEvents.addEventListener)(this.container, 'transitionend', this.onTransitionEnd);\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    var initialMonth = nextProps.initialMonth,\n        numberOfMonths = nextProps.numberOfMonths,\n        orientation = nextProps.orientation;\n    var months = this.state.months;\n    var _this$props = this.props,\n        prevInitialMonth = _this$props.initialMonth,\n        prevNumberOfMonths = _this$props.numberOfMonths;\n    var hasMonthChanged = !prevInitialMonth.isSame(initialMonth, 'month');\n    var hasNumberOfMonthsChanged = prevNumberOfMonths !== numberOfMonths;\n    var newMonths = months;\n\n    if (hasMonthChanged && !hasNumberOfMonthsChanged) {\n      if ((0, _isNextMonth[\"default\"])(prevInitialMonth, initialMonth)) {\n        newMonths = months.slice(1);\n        newMonths.push(months[months.length - 1].clone().add(1, 'month'));\n      } else if ((0, _isPrevMonth[\"default\"])(prevInitialMonth, initialMonth)) {\n        newMonths = months.slice(0, months.length - 1);\n        newMonths.unshift(months[0].clone().subtract(1, 'month'));\n      } else {\n        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n        newMonths = getMonths(initialMonth, numberOfMonths, withoutTransitionMonths);\n      }\n    }\n\n    if (hasNumberOfMonthsChanged) {\n      var _withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n\n      newMonths = getMonths(initialMonth, numberOfMonths, _withoutTransitionMonths);\n    }\n\n    var momentLocale = _moment[\"default\"].locale();\n\n    if (this.locale !== momentLocale) {\n      this.locale = momentLocale;\n      newMonths = newMonths.map(function (m) {\n        return m.locale(_this2.locale);\n      });\n    }\n\n    this.setState({\n      months: newMonths\n    });\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props2 = this.props,\n        isAnimating = _this$props2.isAnimating,\n        transitionDuration = _this$props2.transitionDuration,\n        onMonthTransitionEnd = _this$props2.onMonthTransitionEnd; // For IE9, immediately call onMonthTransitionEnd instead of\n    // waiting for the animation to complete. Similarly, if transitionDuration\n    // is set to 0, also immediately invoke the onMonthTransitionEnd callback\n\n    if ((!this.isTransitionEndSupported || !transitionDuration) && isAnimating) {\n      onMonthTransitionEnd();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.removeEventListener) this.removeEventListener();\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd() {\n    var onMonthTransitionEnd = this.props.onMonthTransitionEnd;\n    onMonthTransitionEnd();\n  };\n\n  _proto.onMonthSelect = function onMonthSelect(currentMonth, newMonthVal) {\n    var newMonth = currentMonth.clone();\n    var _this$props3 = this.props,\n        onMonthChange = _this$props3.onMonthChange,\n        orientation = _this$props3.orientation;\n    var months = this.state.months;\n    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n    var initialMonthSubtraction = months.indexOf(currentMonth);\n\n    if (!withoutTransitionMonths) {\n      initialMonthSubtraction -= 1;\n    }\n\n    newMonth.set('month', newMonthVal).subtract(initialMonthSubtraction, 'months');\n    onMonthChange(newMonth);\n  };\n\n  _proto.onYearSelect = function onYearSelect(currentMonth, newYearVal) {\n    var newMonth = currentMonth.clone();\n    var _this$props4 = this.props,\n        onYearChange = _this$props4.onYearChange,\n        orientation = _this$props4.orientation;\n    var months = this.state.months;\n    var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n    var initialMonthSubtraction = months.indexOf(currentMonth);\n\n    if (!withoutTransitionMonths) {\n      initialMonthSubtraction -= 1;\n    }\n\n    newMonth.set('year', newYearVal).subtract(initialMonthSubtraction, 'months');\n    onYearChange(newMonth);\n  };\n\n  _proto.setContainerRef = function setContainerRef(ref) {\n    this.container = ref;\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props5 = this.props,\n        enableOutsideDays = _this$props5.enableOutsideDays,\n        firstVisibleMonthIndex = _this$props5.firstVisibleMonthIndex,\n        horizontalMonthPadding = _this$props5.horizontalMonthPadding,\n        isAnimating = _this$props5.isAnimating,\n        modifiers = _this$props5.modifiers,\n        numberOfMonths = _this$props5.numberOfMonths,\n        monthFormat = _this$props5.monthFormat,\n        orientation = _this$props5.orientation,\n        translationValue = _this$props5.translationValue,\n        daySize = _this$props5.daySize,\n        onDayMouseEnter = _this$props5.onDayMouseEnter,\n        onDayMouseLeave = _this$props5.onDayMouseLeave,\n        onDayClick = _this$props5.onDayClick,\n        renderMonthText = _this$props5.renderMonthText,\n        renderCalendarDay = _this$props5.renderCalendarDay,\n        renderDayContents = _this$props5.renderDayContents,\n        renderMonthElement = _this$props5.renderMonthElement,\n        onMonthTransitionEnd = _this$props5.onMonthTransitionEnd,\n        firstDayOfWeek = _this$props5.firstDayOfWeek,\n        focusedDate = _this$props5.focusedDate,\n        isFocused = _this$props5.isFocused,\n        isRTL = _this$props5.isRTL,\n        styles = _this$props5.styles,\n        phrases = _this$props5.phrases,\n        dayAriaLabelFormat = _this$props5.dayAriaLabelFormat,\n        transitionDuration = _this$props5.transitionDuration,\n        verticalBorderSpacing = _this$props5.verticalBorderSpacing,\n        setMonthTitleHeight = _this$props5.setMonthTitleHeight;\n    var months = this.state.months;\n    var isVertical = orientation === _constants.VERTICAL_ORIENTATION;\n    var isVerticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;\n    var isHorizontal = orientation === _constants.HORIZONTAL_ORIENTATION;\n    var calendarMonthWidth = (0, _getCalendarMonthWidth[\"default\"])(daySize, horizontalMonthPadding);\n    var width = isVertical || isVerticalScrollable ? calendarMonthWidth : (numberOfMonths + 2) * calendarMonthWidth;\n    var transformType = isVertical || isVerticalScrollable ? 'translateY' : 'translateX';\n    var transformValue = \"\".concat(transformType, \"(\").concat(translationValue, \"px)\");\n    return _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({}, (0, _reactWithStyles.css)(styles.CalendarMonthGrid, isHorizontal && styles.CalendarMonthGrid__horizontal, isVertical && styles.CalendarMonthGrid__vertical, isVerticalScrollable && styles.CalendarMonthGrid__vertical_scrollable, isAnimating && styles.CalendarMonthGrid__animating, isAnimating && transitionDuration && {\n      transition: \"transform \".concat(transitionDuration, \"ms ease-in-out\")\n    }, _objectSpread({}, (0, _getTransformStyles[\"default\"])(transformValue), {\n      width: width\n    })), {\n      ref: this.setContainerRef,\n      onTransitionEnd: onMonthTransitionEnd\n    }), months.map(function (month, i) {\n      var isVisible = i >= firstVisibleMonthIndex && i < firstVisibleMonthIndex + numberOfMonths;\n      var hideForAnimation = i === 0 && !isVisible;\n      var showForAnimation = i === 0 && isAnimating && isVisible;\n      var monthString = (0, _toISOMonthString[\"default\"])(month);\n      return _react[\"default\"].createElement(\"div\", (0, _extends2[\"default\"])({\n        key: monthString\n      }, (0, _reactWithStyles.css)(isHorizontal && styles.CalendarMonthGrid_month__horizontal, hideForAnimation && styles.CalendarMonthGrid_month__hideForAnimation, showForAnimation && !isVertical && !isRTL && {\n        position: 'absolute',\n        left: -calendarMonthWidth\n      }, showForAnimation && !isVertical && isRTL && {\n        position: 'absolute',\n        right: 0\n      }, showForAnimation && isVertical && {\n        position: 'absolute',\n        top: -translationValue\n      }, !isVisible && !isAnimating && styles.CalendarMonthGrid_month__hidden)), _react[\"default\"].createElement(_CalendarMonth[\"default\"], {\n        month: month,\n        isVisible: isVisible,\n        enableOutsideDays: enableOutsideDays,\n        modifiers: modifiers[monthString],\n        monthFormat: monthFormat,\n        orientation: orientation,\n        onDayMouseEnter: onDayMouseEnter,\n        onDayMouseLeave: onDayMouseLeave,\n        onDayClick: onDayClick,\n        onMonthSelect: _this3.onMonthSelect,\n        onYearSelect: _this3.onYearSelect,\n        renderMonthText: renderMonthText,\n        renderCalendarDay: renderCalendarDay,\n        renderDayContents: renderDayContents,\n        renderMonthElement: renderMonthElement,\n        firstDayOfWeek: firstDayOfWeek,\n        daySize: daySize,\n        focusedDate: isVisible ? focusedDate : null,\n        isFocused: isFocused,\n        phrases: phrases,\n        setMonthTitleHeight: setMonthTitleHeight,\n        dayAriaLabelFormat: dayAriaLabelFormat,\n        verticalBorderSpacing: verticalBorderSpacing,\n        horizontalMonthPadding: horizontalMonthPadding\n      }));\n    }));\n  };\n\n  return CalendarMonthGrid;\n}(_react[\"default\"].PureComponent || _react[\"default\"].Component);\n\nCalendarMonthGrid.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nCalendarMonthGrid.defaultProps = defaultProps;\n\nvar _default = (0, _reactWithStyles.withStyles)(function (_ref2) {\n  var _ref2$reactDates = _ref2.reactDates,\n      color = _ref2$reactDates.color,\n      spacing = _ref2$reactDates.spacing,\n      zIndex = _ref2$reactDates.zIndex;\n  return {\n    CalendarMonthGrid: {\n      background: color.background,\n      textAlign: (0, _noflip[\"default\"])('left'),\n      zIndex: zIndex\n    },\n    CalendarMonthGrid__animating: {\n      zIndex: zIndex + 1\n    },\n    CalendarMonthGrid__horizontal: {\n      position: 'absolute',\n      left: (0, _noflip[\"default\"])(spacing.dayPickerHorizontalPadding)\n    },\n    CalendarMonthGrid__vertical: {\n      margin: '0 auto'\n    },\n    CalendarMonthGrid__vertical_scrollable: {\n      margin: '0 auto'\n    },\n    CalendarMonthGrid_month__horizontal: {\n      display: 'inline-block',\n      verticalAlign: 'top',\n      minHeight: '100%'\n    },\n    CalendarMonthGrid_month__hideForAnimation: {\n      position: 'absolute',\n      zIndex: zIndex - 1,\n      opacity: 0,\n      pointerEvents: 'none'\n    },\n    CalendarMonthGrid_month__hidden: {\n      visibility: 'hidden'\n    }\n  };\n}, {\n  pureComponent: typeof _react[\"default\"].PureComponent !== 'undefined'\n})(CalendarMonthGrid);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}