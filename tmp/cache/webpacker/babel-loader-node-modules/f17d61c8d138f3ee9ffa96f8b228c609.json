{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInt = GetIntrinsic('%parseInt%');\n\nvar inspect = require('object-inspect');\n\nvar regexTester = require('../helpers/regexTester');\n\nvar callBound = require('../helpers/callBound');\n\nvar every = require('../helpers/every');\n\nvar isDigit = regexTester(/^[0-9]$/);\nvar $charAt = callBound('String.prototype.charAt');\nvar $strSlice = callBound('String.prototype.slice');\n\nvar IsArray = require('./IsArray');\n\nvar IsInteger = require('./IsInteger');\n\nvar Type = require('./Type');\n\nvar canDistinguishSparseFromUndefined = 0 in [undefined]; // IE 6 - 8 have a bug where this returns false\n\nvar isStringOrHole = function isStringOrHole(capture, index, arr) {\n  return Type(capture) === 'String' || (canDistinguishSparseFromUndefined ? !(index in arr) : Type(capture) === 'Undefined');\n}; // https://www.ecma-international.org/ecma-262/6.0/#sec-getsubstitution\n// eslint-disable-next-line max-statements, max-params, max-lines-per-function\n\n\nmodule.exports = function GetSubstitution(matched, str, position, captures, replacement) {\n  if (Type(matched) !== 'String') {\n    throw new $TypeError('Assertion failed: `matched` must be a String');\n  }\n\n  var matchLength = matched.length;\n\n  if (Type(str) !== 'String') {\n    throw new $TypeError('Assertion failed: `str` must be a String');\n  }\n\n  var stringLength = str.length;\n\n  if (!IsInteger(position) || position < 0 || position > stringLength) {\n    throw new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n  }\n\n  if (!IsArray(captures) || !every(captures, isStringOrHole)) {\n    throw new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n  }\n\n  if (Type(replacement) !== 'String') {\n    throw new $TypeError('Assertion failed: `replacement` must be a String');\n  }\n\n  var tailPos = position + matchLength;\n  var m = captures.length;\n  var result = '';\n\n  for (var i = 0; i < replacement.length; i += 1) {\n    // if this is a $, and it's not the end of the replacement\n    var current = $charAt(replacement, i);\n    var isLast = i + 1 >= replacement.length;\n    var nextIsLast = i + 2 >= replacement.length;\n\n    if (current === '$' && !isLast) {\n      var next = $charAt(replacement, i + 1);\n\n      if (next === '$') {\n        result += '$';\n        i += 1;\n      } else if (next === '&') {\n        result += matched;\n        i += 1;\n      } else if (next === '`') {\n        result += position === 0 ? '' : $strSlice(str, 0, position - 1);\n        i += 1;\n      } else if (next === \"'\") {\n        result += tailPos >= stringLength ? '' : $strSlice(str, tailPos);\n        i += 1;\n      } else {\n        var nextNext = nextIsLast ? null : $charAt(replacement, i + 2);\n\n        if (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n          // $1 through $9, and not followed by a digit\n          var n = $parseInt(next, 10); // if (n > m, impl-defined)\n\n          result += n <= m && Type(captures[n - 1]) === 'Undefined' ? '' : captures[n - 1];\n          i += 1;\n        } else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n          // $00 through $99\n          var nn = next + nextNext;\n          var nnI = $parseInt(nn, 10) - 1; // if nn === '00' or nn > m, impl-defined\n\n          result += nn <= m && Type(captures[nnI]) === 'Undefined' ? '' : captures[nnI];\n          i += 2;\n        } else {\n          result += '$';\n        }\n      }\n    } else {\n      // the final $, or else not a $\n      result += $charAt(replacement, i);\n    }\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}