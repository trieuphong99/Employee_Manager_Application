{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $ArrayPrototype = GetIntrinsic('%Array.prototype%');\nvar $RangeError = GetIntrinsic('%RangeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsInteger = require('./IsInteger');\n\nvar MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1;\nvar $setProto = GetIntrinsic('%Object.setPrototypeOf%', true) || ( // eslint-disable-next-line no-proto, no-negated-condition\n[].__proto__ !== $ArrayPrototype ? null : function (O, proto) {\n  O.__proto__ = proto; // eslint-disable-line no-proto, no-param-reassign\n\n  return O;\n}); // https://www.ecma-international.org/ecma-262/6.0/#sec-arraycreate\n\nmodule.exports = function ArrayCreate(length) {\n  if (!IsInteger(length) || length < 0) {\n    throw new $TypeError('Assertion failed: `length` must be an integer Number >= 0');\n  }\n\n  if (length > MAX_ARRAY_LENGTH) {\n    throw new $RangeError('length is greater than (2**32 - 1)');\n  }\n\n  var proto = arguments.length > 1 ? arguments[1] : $ArrayPrototype;\n  var A = []; // steps 5 - 7, and 9\n\n  if (proto !== $ArrayPrototype) {\n    // step 8\n    if (!$setProto) {\n      throw new $SyntaxError('ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]');\n    }\n\n    $setProto(A, proto);\n  }\n\n  if (length !== 0) {\n    // bypasses the need for step 2\n    A.length = length;\n  }\n  /* step 10, the above as a shortcut for the below\n     OrdinaryDefineOwnProperty(A, 'length', {\n         '[[Configurable]]': false,\n         '[[Enumerable]]': false,\n         '[[Value]]': length,\n         '[[Writable]]': true\n     });\n     */\n\n\n  return A;\n};","map":null,"metadata":{},"sourceType":"module"}